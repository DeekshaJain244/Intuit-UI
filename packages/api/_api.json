{
  "swagger": "2.0",
  "info": {
    "description": "![MEGH Computing](https://megh.com/wp-content/uploads/2023/02/vas_system_configuration-1.png)\n\n# MEGH APIs\n\n**API documentation.**\n",
    "title": "STS APIs",
    "termsOfService": "https://megh.com/terms/",
    "contact": {
      "name": "API Support",
      "url": "https://support.megh.com/",
      "email": "support@megh.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0"
  },
  "host": "localhost:8000",
  "basePath": "/api/v1",
  "paths": {
    "/acl/list": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Lists all the UI modules for all the roles by default.\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"string\",\n  \"response\": [\n    {\n      \"components\": [\n        {\n          \"component_key\": 0,\n          \"component_name\": \"string\"\n        }\n      ],\n      \"module_key\": \"string\",\n      \"module_name\": \"string\",\n      \"module_path\": \"string\"\n    }\n  ],\n  \"response_code\": 200\n}\n```\n\nTo get list of UI modules for a specific role, `role_key` is accepted and query params.",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ACL"
        ],
        "summary": "ACL list",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/sts_internal_api_acl.moduleResp"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "components": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/sts_internal_api_acl.component"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/alert/active": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Alert Active API.\n\n*Sample INPUT*\n\n```json\n{\n  \"channel_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Active alerts\",\n  \"response\":  [\n    {\n      \"alert_expression\": \"string\",\n      \"alert_frequency\": 0,\n      \"alert_id\": \"string\",\n      \"alert_name\": \"string\",\n      \"alert_priority\": 0,\n      \"alert_uuid\": \"string\",\n      \"channel_id\": \"string\",\n      \"is_active\": true\n    }\n  ],\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Alert"
        ],
        "summary": "Alert Active",
        "parameters": [
          {
            "description": "Alert ID Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_alert.alertListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/sts_internal_api__common.AlertResp"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/alert/create": {
      "put": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Alert Create API.\n\n*Sample INPUT*\n\n```json\n{\n  \"alert_expression\": \"string\",\n  \"alert_frequency\": 86400,\n  \"alert_name\": \"string\",\n  \"alert_priority\": 0,\n  \"channel_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Alert created\",\n  \"response\": null,\n  \"response_code\": 201\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Alert"
        ],
        "summary": "Alert Create",
        "parameters": [
          {
            "description": "Alert Create Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_alert.alertCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/alert/delete": {
      "delete": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Alert Delete API\n\n*Sample INPUT*\n\n```json\n{\n  \"alert_id\": \"string\",\n  \"channel_id\": \"string\"\n}\n```\n\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Alert deleted\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Alert"
        ],
        "summary": "Alert Delete",
        "parameters": [
          {
            "description": "Alert Delete Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_alert.alertIDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/alert/disable": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Alert De-Activate API.\n\n*Sample INPUT*\n\n```json\n{\n  \"alert_id\": \"string\",\n  \"channel_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Alert deactivated\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Alert"
        ],
        "summary": "Alert Disable",
        "parameters": [
          {
            "description": "Alert Disable Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_alert.alertActivateDeActivateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/sts_internal_api__common.AlertResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/alert/enable": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Alert Activate API.\n\n*Sample INPUT*\n\n```json\n{\n  \"alert_id\": \"string\",\n  \"channel_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Alert activated\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Alert"
        ],
        "summary": "Alert Enable",
        "parameters": [
          {
            "description": "Alert Enable Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_alert.alertActivateDeActivateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/sts_internal_api__common.AlertResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/alert/event/range": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Event By Range API.\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"usecase_key\": \"string\",\n  \"usecase_meta_key\": [\n    \"string\"\n  ],\n  \"channel_id\": \"string\",\n  \"event_offset\": 0,\n  \"event_limit\": \"string\",\n  \"start\": \"string\",\n  \"end\": \"string\",\n  \"agg_frequency\": \"string\",\n  \"details\": false,\n  \"type\": 0\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Events by range\",\n  \"response\": {\n    \"agg_frequency\": \"string\",\n    \"channel_id\": \"string\",\n    \"end\": \"string\",\n    \"event_limit\": 0,\n    \"event_offset\": 0,\n    \"events\": [\n      {\n        \"alert\": 0,\n        \"alert_uuids\": \"string\",\n        \"condition\": \"string\",\n        \"down\": 0,\n        \"dwell_time\": 0,\n        \"fire\": 0,\n        \"frame_collision\": 0,\n        \"frame_near_miss\": 0,\n        \"high_smoke\": 0,\n        \"id\": 0,\n        \"ids\": [\n          \"string\"\n        ],\n        \"intermediate_smoke\": 0,\n        \"is_intersected\": 0,\n        \"low_smoke\": 0,\n        \"metadata\": \"string\",\n        \"moving_average_count\": 0,\n        \"non_violation\": 0,\n        \"not_intersected\": 0,\n        \"occupancy\": 0,\n        \"time\": \"string\",\n        \"total\": 0,\n        \"total_collision\": 0,\n        \"total_count\": 0,\n        \"total_near_miss\": 0,\n        \"up\": 0,\n        \"violation\": 0\n      }\n    ],\n    \"start\": \"string\",\n    \"usecase_key\": \"string\"\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Analytics"
        ],
        "summary": "Events By Range",
        "parameters": [
          {
            "type": "string",
            "description": "UseCase Key",
            "name": "usecase_key",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "UseCase Meta Key",
            "name": "usecase_meta_key",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Channel ID",
            "name": "channel_id",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Event Offset",
            "name": "event_offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Event Limit",
            "name": "event_limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start Time",
            "name": "start",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "End Time",
            "name": "end",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "default": "60s",
            "description": "Aggregation Frequency",
            "name": "agg_frequency",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "details",
            "name": "details",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "default": 1,
            "description": "type",
            "name": "type",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/internal_api_alert.eventRangeResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "events": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/internal_api_alert.event"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/alert/event/stats": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Event Alert Stats API.\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"usecase_key\": \"string\",\n  \"usecase_meta_key\": [\n    \"string\"\n  ],\n  \"channel_id\": \"string\",\n  \"frequency\": \"-string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Channel event stats for last frequency\",\n  \"response\": {\n    \"channel_alert\": {\n      \"channel\": \"string\",\n      \"condition\": \"string\",\n      \"count\": 0,\n      \"key\": \"string\",\n      \"name\": \"string\",\n      \"time\": \"string\"\n    },\n    \"channel_id\": \"string\",\n    \"channel_key\": \"string\",\n    \"channel_name\": \"string\",\n    \"channel_stats\": {\n      \"alert\": 0,\n      \"down\": 0,\n      \"dwell_time\": 0,\n      \"fire\": 0,\n      \"frame_collision\": 0,\n      \"frame_near_miss\": 0,\n      \"high_smoke\": 0,\n      \"ids\": [\n        \"string\"\n      ],\n      \"intermediate_smoke\": 0,\n      \"is_intersected\": 0,\n      \"low_smoke\": 0,\n      \"moving_average_count\": 0,\n      \"non_violation\": 0,\n      \"not_intersected\": 0,\n      \"occupancy\": 0,\n      \"total\": 0,\n      \"total_collision\": 0,\n      \"total_near_miss\": 0,\n      \"up\": 0,\n      \"violation\": 0\n    },\n    \"channel_total_alert\": 0,\n    \"channel_total_notification\": 0,\n    \"usecase_key\": \"string\"\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Analytics"
        ],
        "summary": "Channel Stats",
        "parameters": [
          {
            "type": "string",
            "description": "UseCase Key",
            "name": "usecase_key",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "UseCase Meta Key",
            "name": "usecase_meta_key",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Channel ID",
            "name": "channel_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "default": "-1h",
            "description": "Frequency",
            "name": "frequency",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/sts_internal_api__common.EventStatsResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "channel_alert": {
                              "$ref": "#/definitions/model.AlertData"
                            },
                            "channel_stats": {
                              "$ref": "#/definitions/model.StatsData"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/alert/id": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Alert ID API.\n\n*Sample INPUT*\n\n```json\n{\n  \"alert_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Alert by ID\",\n  \"response\": {\n    \"alert_expression\": \"string\",\n    \"alert_frequency\": 0,\n    \"alert_id\": \"string\",\n    \"alert_name\": \"string\",\n    \"alert_priority\": 0,\n    \"alert_uuid\": \"string\",\n    \"channel_id\": \"string\",\n    \"is_active\": true\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Alert"
        ],
        "summary": "Alert ID",
        "parameters": [
          {
            "description": "Alert ID Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_alert.alertIDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/sts_internal_api__common.AlertResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/alert/list": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Alert List API.\n\n*Sample INPUT*\n\n```json\n{\n  \"channel_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Alert list\",\n  \"response\": [\n    {\n      \"alert_expression\": \"string\",\n      \"alert_frequency\": 0,\n      \"alert_id\": \"string\",\n      \"alert_name\": \"string\",\n      \"alert_priority\": 0,\n      \"alert_uuid\": \"string\",\n      \"channel_id\": \"string\",\n      \"is_active\": true\n    }\n  ],\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Alert"
        ],
        "summary": "Alert List by Channel ID",
        "parameters": [
          {
            "description": "Alert List Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_alert.alertListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/sts_internal_api__common.AlertResp"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/alert/site/list": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Alert List By Site ID\n\n*Sample INPUT*\n\n```json\n{\n  \"site_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Channel List\",\n  \"response\":  [\n    {\n      \"alerts\": [\n        {\n          \"alert_expression\": \"string\",\n          \"alert_frequency\": 0,\n          \"alert_id\": \"string\",\n          \"alert_name\": \"string\",\n          \"alert_priority\": 0,\n          \"alert_uuid\": \"string\",\n          \"channel_id\": \"string\",\n          \"is_active\": true\n        }\n      ],\n      \"channel_alerts\": 0,\n      \"channel_favorite\": true,\n      \"channel_id\": \"string\",\n      \"channel_key\": \"string\",\n      \"channel_name\": \"string\",\n      \"channel_notifications\": 0,\n      \"channel_sid\": \"string\",\n      \"channel_type\": \"string\",\n      \"customer_id\": \"string\",\n      \"device_icon\": \"string\",\n      \"device_id\": \"string\",\n      \"device_name\": \"string\",\n      \"is_active\": true,\n      \"is_auto_recovery\": true,\n      \"is_purge\": true,\n      \"is_storage\": true,\n      \"is_verified\": true,\n      \"nimble_id\": \"string\",\n      \"pipeline_id\": \"string\",\n      \"site_id\": \"string\",\n      \"site_name\": \"string\",\n      \"source_id\": \"string\",\n      \"transaction_id\": \"string\",\n      \"usecase_icon\": \"string\",\n      \"usecase_id\": \"string\",\n      \"usecase_key\": \"string\",\n      \"usecase_meta_key\": [\n        {\n          \"additionalProp1\": \"string\",\n          \"additionalProp2\": \"string\",\n          \"additionalProp3\": \"string\"\n        }\n      ],\n      \"usecase_name\": \"string\"\n    }\n  ],\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Channel"
        ],
        "summary": "Alerts list by Site ID",
        "parameters": [
          {
            "description": "Alert List by Site ID Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_alert.alertListBySiteReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/sts_internal_api__common.ChannelResp"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/alert/update": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Alert Update API.\n\n*Sample INPUT*\n\n```json\n{\n  \"alert_expression\": \"string\",\n  \"alert_frequency\": 86400,\n  \"alert_id\": \"string\",\n  \"alert_name\": \"string\",\n  \"alert_priority\": 0,\n  \"channel_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Alert updated\",\n  \"response\": {\n    \"alert_expression\": \"string\",\n    \"alert_frequency\": 0,\n    \"alert_id\": \"string\",\n    \"alert_name\": \"string\",\n    \"alert_priority\": 0,\n    \"alert_uuid\": \"string\",\n    \"channel_id\": \"string\",\n    \"is_active\": true\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Alert"
        ],
        "summary": "Alert Update",
        "parameters": [
          {
            "description": "Alert Update Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_alert.alertUpdateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/sts_internal_api__common.AlertResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/alert/uuid": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Alert UUID API.\n\n*Sample INPUT*\n\n```json\n{\n  \"alert_uuid\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Alert by ID\",\n  \"response\": {\n    \"alert_expression\": \"string\",\n    \"alert_frequency\": 0,\n    \"alert_id\": \"string\",\n    \"alert_name\": \"string\",\n    \"alert_priority\": 0,\n    \"alert_uuid\": \"string\",\n    \"channel_id\": \"string\",\n    \"is_active\": true\n  },\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Alert"
        ],
        "summary": "Alert UUID",
        "parameters": [
          {
            "description": "Alert UUID Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_alert.alertUUIDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/sts_internal_api__common.AlertResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/auto/test": {
      "post": {
        "description": "### Auto Test API.\n\n*Sample OUTPUT*\n\n```json\n{\n    \"message\": \"Auto Test\",\n    \"response\": null,\n    \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auto"
        ],
        "summary": "Auto Test",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/bundle/config/defaults/get": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Config Defaults Get API.\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"bundle_usecase\": \"string\"\n}\n```\n*Sample Output*\n\n```json\n{\n  \"message\": \"Bundle Default config\",\n  \"response\": {\n    \"bundle_default_data\": {\n      \"additionalProp1\": {}\n    },\n    \"bundle_id\": \"string\",\n    \"bundle_key\": \"string\",\n    \"bundle_name\": \"string\",\n    \"bundle_usecases\": [\n      {\n        \"bundle_key\": \"string\",\n        \"is_available\": true,\n        \"usecase_background_color\": \"string\",\n        \"usecase_channel_count\": 0,\n        \"usecase_channels\": [\n          {\n            \"channel_alerts\": 0,\n            \"channel_favorite\": true,\n            \"channel_id\": \"string\",\n            \"channel_key\": \"string\",\n            \"channel_name\": \"string\",\n            \"channel_notifications\": 0,\n            \"channel_sid\": \"string\",\n            \"channel_type\": \"string\",\n            \"customer_id\": \"string\",\n            \"device_icon\": \"string\",\n            \"device_id\": \"string\",\n            \"device_name\": \"string\",\n            \"is_active\": true,\n            \"is_auto_recovery\": true,\n            \"is_purge\": true,\n            \"is_storage\": true,\n            \"is_verified\": true,\n            \"nimble_id\": \"string\",\n            \"pipeline_id\": \"string\",\n            \"site_id\": \"string\",\n            \"site_name\": \"string\",\n            \"source_id\": \"string\",\n            \"transaction_id\": \"string\",\n            \"usecase_icon\": \"string\",\n            \"usecase_id\": \"string\",\n            \"usecase_key\": \"string\",\n            \"usecase_meta_key\": [\n              {\n                \"additionalProp1\": \"string\",\n                \"additionalProp2\": \"string\",\n                \"additionalProp3\": \"string\"\n              }\n            ],\n            \"usecase_name\": \"string\"\n          }\n        ],\n        \"usecase_component_key\": \"string\",\n        \"usecase_desc\": \"string\",\n        \"usecase_device_types\": [\n          \"string\"\n        ],\n        \"usecase_icon\": \"string\",\n        \"usecase_id\": \"string\",\n        \"usecase_key\": \"string\",\n        \"usecase_meta_key\": [\n          {\n            \"additionalProp1\": \"string\",\n            \"additionalProp2\": \"string\",\n            \"additionalProp3\": \"string\"\n          }\n        ],\n        \"usecase_name\": \"string\"\n      }\n    ]\n  },\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Bundle"
        ],
        "summary": "Default Bundle config get",
        "parameters": [
          {
            "type": "string",
            "description": "Bundle Usecase",
            "name": "bundle_usecase",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/sts_internal_api__common.BundleResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/bundle/config/defaults/set": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Config Defaults Set API.\n\n*Sample INPUT*\n\n// Query params\n\n```json\n{\n  \"bundle_data\": {\n    \"additionalProp1\": {}\n  },\n  \"bundle_usecase\": \"string\"\n}\n```\n\n*Sample Output*\n\n```json\n{\n  \"message\": \"Default Json updated\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Bundle"
        ],
        "summary": "Default Bundle config set",
        "parameters": [
          {
            "description": "Default Set Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_bundle.defaultConfigReqSet"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/bundle/list": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Bundle List API.\n\n*Sample INPUT*\n\n// Query params\n\n```json\n{\n  \"type\": 0\n}\n```\n\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Bundle List\",\n  \"response\": [\n    {\n      \"bundle_id\": \"string\",\n      \"bundle_key\": \"string\",\n      \"bundle_name\": \"string\",\n      \"bundle_usecases\": {\n        \"usecase_background_color\": \"string\",\n        \"usecase_channel_count\": 0,\n        \"usecase_component_key\": \"string\",\n        \"usecase_desc\": \"string\",\n        \"usecase_icon\": \"string\",\n        \"usecase_id\": \"string\",\n        \"usecase_key\": \"string\",\n        \"usecase_meta_key\": [\n          {\n            \"additionalProp1\": \"string\",\n            \"additionalProp2\": \"string\",\n            \"additionalProp3\": \"string\"\n          }\n        ],\n        \"usecase_name\": \"string\"\n      }\n    }\n  ],\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Bundle"
        ],
        "summary": "Bundle List",
        "parameters": [
          {
            "type": "integer",
            "description": "Type",
            "name": "type",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/sts_internal_api__common.BundleResp"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "bundle_usecases": {
                                "$ref": "#/definitions/sts_internal_api__common.UsecaseResp"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/channel/assign": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Channel Assign API\n\n*Sample INPUT*\n\n```json\n{\n  \"channel_id\": [\n    \"string\"\n  ],\n  \"user_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Channel assigned\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Channel"
        ],
        "summary": "Channel Assign",
        "parameters": [
          {
            "description": "Channel Assign Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_channel.channelAssignReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/channel/create": {
      "put": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Channel Create API\n\n*Sample INPUT*\n\n```json\n{\n  \"channel_name\": \"string\",\n  \"nimble_id\": \"string\",\n  \"pipeline_id\": \"string\",\n  \"site_id\": \"string\",\n  \"source_id\": \"string\",\n  \"usecase_key\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Channel Created\",\n  \"response\": {\n    \"channel_id\": \"string\",\n    \"transaction_id\": \"string\"\n  },\n  \"response_code\": 201\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Channel"
        ],
        "summary": "Channel Create",
        "parameters": [
          {
            "description": "Channel Create Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_channel.channelCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/channel/delete": {
      "delete": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Channel Delete API\n\n*Sample INPUT*\n\n```json\n{\n  \"channel_id\": \"string\",\n  \"is_force\": false\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Channel Deleted\",\n  \"response\": {\n    \"channel_id\": \"string\",\n    \"transaction_id\": \"string\"\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Channel"
        ],
        "summary": "Channel Delete",
        "parameters": [
          {
            "description": "Channel Delete Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_channel.channelStatusReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/channel/id": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Channel ID API\n\n*Sample INPUT*\n\n// Query params\n```sh\n?channel_id=\"string\"\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Channel ID\",\n  \"response\": {\n    \"channel_favorite\": true,\n    \"channel_id\": \"string\",\n    \"channel_key\": \"string\",\n    \"channel_name\": \"string\",\n    \"channel_sid\": \"string\",\n    \"device_id\": \"string\",\n    \"is_active\": true,\n    \"is_auto_recovery\": true,\n    \"is_purge\": true,\n    \"is_storage\": true,\n    \"is_verified\": true,\n    \"nimble_id\": \"string\",\n    \"pipeline_id\": \"string\",\n    \"site_id\": \"string\",\n    \"source_id\": \"string\",\n    \"usecase_icon\": \"string\",\n    \"usecase_id\": \"string\",\n    \"usecase_key\": \"string\",\n    \"usecase_meta_key\": [\n      {\n        \"additionalProp1\": \"string\",\n        \"additionalProp2\": \"string\",\n        \"additionalProp3\": \"string\"\n      }\n    ],\n    \"usecase_name\": \"string\"\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Channel"
        ],
        "summary": "Channel ID",
        "parameters": [
          {
            "type": "string",
            "description": "Channel ID Payload",
            "name": "channel_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/sts_internal_api__common.ChannelResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/channel/list": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Channel List By Key API\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"usecase_key\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Channel List\",\n  \"response\": [\n    {\n      \"channel_favorite\": true,\n      \"channel_id\": \"string\",\n      \"channel_key\": \"string\",\n      \"channel_name\": \"string\",\n      \"channel_sid\": \"string\",\n      \"device_id\": \"string\",\n      \"is_active\": true,\n      \"is_auto_recovery\": true,\n      \"is_purge\": true,\n      \"is_storage\": true,\n      \"is_verified\": true,\n      \"nimble_id\": \"string\",\n      \"pipeline_id\": \"string\",\n      \"site_id\": \"string\",\n      \"source_id\": \"string\",\n      \"usecase_icon\": \"string\",\n      \"usecase_id\": \"string\",\n      \"usecase_key\": \"string\",\n      \"usecase_meta_key\": [\n        {\n          \"additionalProp1\": \"string\",\n          \"additionalProp2\": \"string\",\n          \"additionalProp3\": \"string\"\n        }\n      ],\n      \"usecase_name\": \"string\"\n    }\n  ],\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Channel"
        ],
        "summary": "Channel List",
        "parameters": [
          {
            "description": "Channel List Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_channel.channelListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/sts_internal_api__common.ChannelResp"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/channel/refactor": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Channel Refactor API\n\n*Sample INPUT*\n\n```json\n{\n  \"nimble_id\": \"string\",\n  \"device_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Channel Updated\",\n  \"response\": {\n    \"channel_id\": \"string\",\n    \"transaction_id\": \"string\"\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Channel"
        ],
        "summary": "Channel Refactor",
        "parameters": [
          {
            "description": "Channel Refactor Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_channel.channelRefactorReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/channel/revive": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Channel Revive API\n\n*Sample INPUT*\n\n```json\n{\n  \"channel_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Channel Revive initiated\",\n  \"response\": {\n    \"channel_id\": \"string\",\n    \"transaction_id\": \"string\"\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Channel"
        ],
        "summary": "Channel Revive",
        "parameters": [
          {
            "description": "Channel Revive Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_channel.channelStatusReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/channel/status": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Channel Status API\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"channel_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Channel Status\",\n  \"response\": {\n    \"is_active\": true,\n    \"is_auto_recovery\": true,\n    \"is_storage\": true,\n    \"is_verified\": true\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Channel"
        ],
        "summary": "Channel Status",
        "parameters": [
          {
            "type": "string",
            "description": "Channel ID Payload",
            "name": "channel_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_channel.channelStatusResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/channel/troubleshoot": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Channel Troubleshoot API\n\n*Sample INPUT*\n\n```json\n{\n  \"channel_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Channel troubleshoot\",\n  \"response\": {\n    \"channel_id\": \"string\",\n    \"transaction_id\": \"string\"\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Channel"
        ],
        "summary": "Channel Troubleshoot",
        "parameters": [
          {
            "type": "string",
            "description": "Channel Troubleshoot Payload",
            "name": "channel_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/channel/unassign": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Channel UnAssign API\n\n*Sample INPUT*\n\n```json\n{\n  \"channel_id\": [\n    \"string\"\n  ],\n  \"user_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Channel un-assigned\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Channel"
        ],
        "summary": "Channel UnAssign",
        "parameters": [
          {
            "description": "Channel UnAssign Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_channel.channelUnAssignReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/channel/update": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Channel Update API\n\n*Sample INPUT*\n\n```json\n{\n  \"channel_id\": \"string\",\n  \"channel_name\": \"string\",\n  \"is_auto_recovery\": true,\n  \"is_force\": true,\n  \"pipeline_elements\": {\n    \"additionalProp1\": {}\n  },\n  \"pipeline_id\": \"string\",\n  \"usecase_key\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Channel updated\",\n  \"response\":  {},\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Channel"
        ],
        "summary": "Channel Update",
        "parameters": [
          {
            "description": "Channel Update Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_channel.channelUpdateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/sts_internal_api__common.ChannelResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/channel/update/notify": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Channel Update API\n\n*Sample INPUT*\n\n```json\n{\n  \"channel_id\": \"string\",\n  \"channel_name\": \"string\",\n  \"is_auto_recovery\": true,\n  \"is_force\": true,\n  \"pipeline_elements\": {\n    \"additionalProp1\": {}\n  },\n  \"pipeline_id\": \"string\",\n  \"usecase_key\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Channel updated\",\n  \"response\":  {},\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Channel"
        ],
        "summary": "Channel Update Notification Count",
        "parameters": [
          {
            "description": "Channel Revive Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_channel.channelUpdateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/config/backup/state": {
      "post": {
        "description": "### Config Backup State API.\n\n#### `run_type` options\n\n- `1` for Docker backup\n- `2` for local backup\n\nNote: For local backup, `mongo`, `mongodump` \u0026 `mongorestore`\nexecutables are required in `$PATH`.\n\n*Sample INPUT*\n\n```json\n{\n  \"run_type\": 1\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Backup completed\",\n  \"response\": {\n    \"mongo_backup\": \"string\",\n    \"influx_backup\": \"string\"\n  },\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Backup State",
        "parameters": [
          {
            "type": "string",
            "description": "Backup run type, [1] Docker, [2] Local",
            "name": "run_type",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/sts_internal_api_config.backupResponse"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/config/patch/state": {
      "post": {
        "description": "### Config Patch State API.\n\n#### `run_type` options\n\n- `1` for Docker patch\n- `2` for local patch\n\n#### `data_base` options\n\n- `1` for MongoDB\n- `2` for InfluxDB\n\nNote: For local patch, `mongo`, `mongodump` \u0026 `mongorestore`\nexecutables are required in `$PATH`.\n\n*Sample INPUT*\n\n```json\n{\n  \"run_type\": 1,\n  \"data_base\": 1\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"State patch completed\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Patch State",
        "parameters": [
          {
            "type": "string",
            "description": "Patch run type, [1] Docker, [2] Local",
            "name": "run_type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Patch data base type, [1] MongoDB, [2] InfluxDB",
            "name": "data_base",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/config/restore/state": {
      "post": {
        "description": "### Config Restore State API.\n\n#### `run_type` options\n\n  - `1` for Docker restore\n  - `2` for local restore\n \nNote: For local restore, `mongo`, `mongodump` \u0026 `mongorestore` \nexecutables are required in `$PATH`.\n\n*Sample INPUT*\n\n```json\n{\n  \"file_\": \"\",\n  \"run_type\": 1\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"State restore completed\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Restore State",
        "parameters": [
          {
            "type": "string",
            "description": "Restore run type, [1] Docker, [2] Local",
            "name": "run_type",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/config/sms": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Get SMS Config API.\n\n\n*Sample Input*\n\n```json\n{\n  \"is_secret\": false\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"SMS Settings\",\n  \"response\": [\n    {\n      \"sms_auth_key\": \"string\",\n      \"sms_auth_token\": \"string\",\n      \"sms_provider\": \"string\",\n      \"sms_from\": \"string\",\n      \"sms_to\": \"string\",\n      \"smtp_relay_id\": \"string\",\n      \"is_default\": true\n    }\n  ],\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Get SMS Config",
        "parameters": [
          {
            "type": "boolean",
            "description": "Reveal Secret",
            "name": "is_secret",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/internal_api_config.smsConfResp"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Create SMS Config API.\n\n*Sample INPUT*\n\n```json\n{\n  \"sms_key\": \"string\",\n  \"sms_token\": \"string\",\n  \"sms_provider\": \"string\",\n  \"sms_from\": \"string\",\n  \"sms_to\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"SMS settings created\",\n  \"response\": null,\n  \"response_code\": 201\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Create SMS Config",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Update SMS Config API.\n\n*Sample INPUT*\n\n```json\n{\n  \"sms_auth_key\": \"string\",\n  \"sms_auth_token\": \"string\",\n  \"sms_provider\": \"string\",\n  \"sms_from\": \"string\",\n  \"sms_to\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"SMS settings updated\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Update SMS Config",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Delete SMS Config API.\n\n*Sample INPUT*\n\n```json\n{\n  \"sms_relay_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"SMS settings deleted\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Delete SMS Config",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/config/sms/test": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Test SMS Config API.\n\n*Sample INPUT*\n\n```json\n{\n  \"sms_from\": \"string\",\n  \"sms_to\": \"string\",\n  \"sms_relay_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"SMS test successful.\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Test SMS Config",
        "parameters": [
          {
            "description": "SMS Update Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_config.smsConfTestReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/config/smtp": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Get SMS Config API.\n\n\n*Sample Input*\n\n```json\n{\n  \"is_secret\": false\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"SMTP Settings\",\n  \"response\": [\n    {\n      \"smtp_attachment\": true,\n      \"smtp_auth\": true,\n      \"smtp_from\": \"string\",\n      \"smtp_host\": \"string\",\n      \"smtp_password\": \"string\",\n      \"smtp_port\": 0,\n      \"smtp_to\": \"string\",\n      \"smtp_username\": \"string\",\n      \"smtp_relay_id\": \"string\",\n      \"is_default\": true\n    }\n  ],\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Get SMTP Config",
        "parameters": [
          {
            "type": "boolean",
            "description": "Reveal Secret",
            "name": "is_secret",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/sts_internal_api_config.smtpConfResp"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Create SMTP Config API.\n\n*Sample INPUT*\n\n```json\n{\n  \"smtp_attachment\": true,\n  \"smtp_auth\": true,\n  \"smtp_from\": \"string\",\n  \"smtp_host\": \"string\",\n  \"smtp_password\": \"string\",\n  \"smtp_port\": 0,\n  \"smtp_to\": \"string\",\n  \"smtp_username\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"SMTP settings created\",\n  \"response\": null,\n  \"response_code\": 201\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Create SMTP Conf",
        "parameters": [
          {
            "description": "SMTP Create Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_config.smtpConfCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Delete SMTP Config API.\n\n*Sample INPUT*\n\n```json\n{\n  \"smtp_relay_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"SMTP settings deleted\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Delete SMTP Config",
        "parameters": [
          {
            "description": "SMTP Update Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_config.smtpConfDeleteReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Update SMTP Config API.\n\n*Sample INPUT*\n\n```json\n{\n  \"smtp_attachment\": true,\n  \"smtp_auth\": true,\n  \"smtp_from\": \"string\",\n  \"smtp_host\": \"string\",\n  \"smtp_password\": \"string\",\n  \"smtp_port\": 0,\n  \"smtp_to\": \"string\",\n  \"smtp_username\": \"string\",\n  \"smtp_relay_id\": \"string\",\n  \"is_default\": true\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"SMTP settings updated\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Update SMTP Config",
        "parameters": [
          {
            "description": "SMTP Update Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_config.smtpConfUpdateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/config/smtp/onboard": {
      "put": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Create SMTP Config API.\n\n*Sample INPUT*\n\n```json\n{\n  \"smtp_attachment\": true,\n  \"smtp_auth\": true,\n  \"smtp_from\": \"string\",\n  \"smtp_host\": \"string\",\n  \"smtp_password\": \"string\",\n  \"smtp_port\": 0,\n  \"smtp_to\": \"string\",\n  \"smtp_username\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"SMTP settings created\",\n  \"response\": null,\n  \"response_code\": 201\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Onboard SMTP Create",
        "parameters": [
          {
            "description": "SMTP Create Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_config.smtpConfCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/config/smtp/test": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Test SMTP Config API.\n\n*Sample INPUT*\n\n```json\n{\n  \"smtp_from\": \"string\",\n  \"smtp_to\": \"string\",\n  \"smtp_relay_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"SMTP test successful.\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Test SMTP Config",
        "parameters": [
          {
            "description": "SMTP Update Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_config.smtpConfTestReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/config/storage/account": {
      "get": {
        "description": "### Storage Information + Account Information",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Status Storage",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_config.statusAccountStorageResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/config/storage/data": {
      "get": {
        "description": "### Storage Information ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Status Storage",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/config/storage/delete": {
      "post": {
        "description": "### Storage Delete\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"purge_data\": [\n    {\n      \"channel_ids\": [\n        \"string\"\n      ],\n      \"site_id\": \"string\"\n    }\n  ]\n}\n```\n\n*Sample Output*\n```json\n{\n  \"message\": \"Storage delete initiated for selected channels\",\n  \"response\": \"string\",\n  \"response_code\": 200\n}\n\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Storage Delete",
        "parameters": [
          {
            "description": "Channel Storage Delete Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/internal_api_config.channelStorageDeleteReq"
                },
                {
                  "type": "object",
                  "properties": {
                    "purge_data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/internal_api_config.channelStorageData"
                      }
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/config/storage/update": {
      "post": {
        "description": "### Storage Update\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"notification_types\": [\n    \"string\"\n  ],\n  \"purge_frequency\": 0,\n  \"purge_threshold\": 0\n}\n```\n\n*Sample Output*\n```json\n{\n  \"message\": \"string\",\n  \"response\": \"string\",\n  \"response_code\": 200\n}\n\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Storage Config Update",
        "parameters": [
          {
            "description": "Storage Config Update Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_config.storageConfigReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/config/sts/init": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Config Init API.\n\n*Sample OUTPUT*\n\n```json\n  {\n    \"message\": \"Init Settings\",\n    \"response\": {},\n    \"response_code\": 200\n  } \n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Is INIT",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/sts_internal_api_config.settingInitResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/config/sts/reset": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "![MEGH Computing](https://megh.com/wp-content/uploads/2023/02/vas_system_configuration-1.png)\n\n# MEGH APIs\n\n**API documentation.**\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Configuration"
        ],
        "summary": "Reset STS",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/customer/assign": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Customer Site Assign API.\n\n*Sample INPUT*\n\n```json\n{\n  \"customer_id\": \"string\",\n  \"site_ids\": [\n    \"string\"\n  ]\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Assigned site(s) to customer\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Customer"
        ],
        "summary": "Customer Assign",
        "parameters": [
          {
            "description": "Customer Assign Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_customer.customerAssignReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/customer/bundle": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Customer View API\n\n*Sample Input*\n\n```json\n{\n  \"customer_id\": \"string\"\n}\n```\n\n*Sample OUTPUT Type 1*\n\n```json\n{\n  \"message\": \"string\",\n  \"response\": {\n    \"message\": \"string\",\n    \"response\": [\n      {\n        \"bundle_id\": \"string\",\n        \"bundle_key\": \"string\",\n        \"bundle_name\": \"string\",\n        \"bundle_usecases\": [\n          {\n            \"bundle_key\": \"string\",\n            \"is_available\": true,\n            \"usecase_background_color\": \"string\",\n            \"usecase_channels\": [\n              {\n                \"channel_favorite\": true,\n                \"channel_id\": \"string\",\n                \"channel_key\": \"string\",\n                \"channel_name\": \"string\",\n                \"channel_sid\": \"string\",\n                \"channel_threshold_duration\": 0,\n                \"device_id\": \"string\",\n                \"is_active\": true,\n                \"is_auto_recovery\": true,\n                \"is_purge\": true,\n                \"is_storage\": true,\n                \"is_verified\": true,\n                \"nimble_id\": \"string\",\n                \"pipeline_id\": \"string\",\n                \"site_id\": \"string\",\n                \"source_id\": \"string\",\n                \"usecase_icon\": \"string\",\n                \"usecase_id\": \"string\",\n                \"usecase_key\": \"string\",\n                \"usecase_meta_key\": [\n                  {\n                    \"additionalProp1\": \"string\",\n                    \"additionalProp2\": \"string\",\n                    \"additionalProp3\": \"string\"\n                  }\n                ],\n                \"usecase_name\": \"string\"\n              }\n            ],\n            \"usecase_component_key\": \"string\",\n            \"usecase_desc\": \"string\",\n            \"usecase_icon\": \"string\",\n            \"usecase_id\": \"string\",\n            \"usecase_key\": \"string\",\n            \"usecase_meta_key\": [\n              {\n                \"additionalProp1\": \"string\",\n                \"additionalProp2\": \"string\",\n                \"additionalProp3\": \"string\"\n              }\n            ],\n            \"usecase_name\": \"string\"\n          }\n        ]\n      }\n    ]\n  },\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Customer"
        ],
        "summary": "Customer Bundle View",
        "parameters": [
          {
            "type": "string",
            "description": "Customer ID",
            "name": "customer_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/structs.HTTPResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "response": {
                              "type": "array",
                              "items": {
                                "allOf": [
                                  {
                                    "$ref": "#/definitions/sts_internal_api__common.BundleResp"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "bundle_usecases": {
                                        "type": "array",
                                        "items": {
                                          "allOf": [
                                            {
                                              "$ref": "#/definitions/sts_internal_api__common.UsecaseResp"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "usecase_channels": {
                                                  "type": "array",
                                                  "items": {
                                                    "$ref": "#/definitions/sts_internal_api__common.ChannelResp"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/customer/create": {
      "put": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Customer Create API.\n\nAt create customer `customer_sites` is an empty array, or it has to have a valid list of `site_id`s\n\n*Sample INPUT*\n\n```json\n{\n  \"customer_address\": {\n    \"customer_area\": \"string\",\n    \"customer_city\": \"string\",\n    \"customer_country\": \"string\",\n    \"customer_state\": \"string\",\n    \"customer_street\": \"string\",\n    \"customer_unit\": \"string\",\n    \"customer_zip\": \"string\"\n  },\n  \"customer_contact\": [\n    \"string\"\n  ],\n  \"customer_description\": \"string\",\n  \"customer_icon\": \"string\",\n  \"customer_image\": \"string\",\n  \"customer_key\": \"string\",\n  \"customer_name\": \"string\",\n  \"customer_type\": \"string\",\n  \"organization_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Customer Created\",\n  \"response\": null,\n  \"response_code\": 201\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Customer"
        ],
        "summary": "Customer Create",
        "parameters": [
          {
            "description": "Customer Create Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_customer.customerCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/customer/delete": {
      "delete": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Customer Delete API.\n\n*Sample INPUT*\n\n```json\n{\n    \"customer_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n    \"message\": \"Customer deleted\",\n    \"response\": null,\n    \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Customer"
        ],
        "summary": "Customer Delete",
        "parameters": [
          {
            "description": "Customer Delete Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_customer.customerIDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/customer/id": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Customer ID API.\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"customer_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Customer ID\",\n  \"response\":  {\n    \"customer_address\": {\n      \"customer_area\": \"string\",\n      \"customer_city\": \"string\",\n      \"customer_country\": \"string\",\n      \"customer_state\": \"string\",\n      \"customer_street\": \"string\",\n      \"customer_unit\": \"string\",\n      \"customer_zip\": \"string\"\n    },\n    \"customer_contact\": [\n      \"string\"\n    ],\n    \"customer_description\": \"string\",\n    \"customer_icon\": \"string\",\n    \"customer_id\": \"string\",\n    \"customer_image\": \"string\",\n    \"customer_key\": \"string\",\n    \"customer_name\": \"string\",\n    \"customer_type\": \"string\",\n    \"organization_id\": \"string\"\n  },\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Customer"
        ],
        "summary": "Customer ID",
        "parameters": [
          {
            "type": "string",
            "description": "Customer ID",
            "name": "customer_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/sts_internal_api_customer.customerResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "customer_address": {
                              "$ref": "#/definitions/sts_internal_api_customer.customerAddress"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/customer/list": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Customer List API.\n\n*Sample INPUT*\n\n// Query params\n\n```json\n{\n  \"organization_id\": \"string\",\n  \"is_default\": true\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Customer List\",\n  \"response\": [\n    {\n      \"customer_address\": {\n        \"customer_area\": \"string\",\n        \"customer_city\": \"string\",\n        \"customer_country\": \"string\",\n        \"customer_state\": \"string\",\n        \"customer_street\": \"string\",\n        \"customer_unit\": \"string\",\n        \"customer_zip\": \"string\"\n      },\n      \"customer_contact\": [\n        \"string\"\n      ],\n      \"customer_description\": \"string\",\n      \"customer_icon\": \"string\",\n      \"customer_id\": \"string\",\n      \"customer_image\": \"string\",\n      \"customer_key\": \"string\",\n      \"customer_name\": \"string\",\n      \"customer_type\": \"string\",\n      \"organization_id\": \"string\"\n    }\n  ],\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Customer"
        ],
        "summary": "Customer List",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID",
            "name": "organization_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Includes Default Customer",
            "name": "is_default",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/sts_internal_api_customer.customerResp"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "customer_address": {
                                "$ref": "#/definitions/sts_internal_api_customer.customerAddress"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/customer/site/assign": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Customer Site Assign API.\n\n*Sample INPUT*\n\n```json\n{\n  \"customer_id\": \"string\",\n  \"site_ids\": [\n    \"string\"\n  ]\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Assigned site(s) to customer\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Customer"
        ],
        "summary": "Customer Site Assign",
        "parameters": [
          {
            "description": "Customer Site Assign Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_customer.customerSiteAssignReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/customer/site/unassign": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Customer Site Unassign API.\n\n*Sample INPUT*\n\n```json\n{\n  \"customer_id\": \"string\",\n  \"site_ids\": [\n    \"string\"\n  ]\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n    \"message\": \"Unassigned site(s) to customer\",\n    \"response\": null,\n    \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Customer"
        ],
        "summary": "Customer Site Unassign",
        "parameters": [
          {
            "description": "Customer Site Assign Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_customer.customerSiteAssignReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/customer/unassign": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Customer Site Unassign API.\n\n*Sample INPUT*\n\n```json\n{\n  \"customer_id\": \"string\",\n  \"site_ids\": [\n    \"string\"\n  ]\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n    \"message\": \"Unassigned site(s) to customer\",\n    \"response\": null,\n    \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Customer"
        ],
        "summary": "Customer Assign",
        "parameters": [
          {
            "description": "Customer UnAssign Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_customer.customerAssignReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/customer/update": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Customer Update API.\n\n*Sample INPUT*\n\n```json\n{\n  \"customer_address\": {\n    \"customer_area\": \"string\",\n    \"customer_city\": \"string\",\n    \"customer_country\": \"string\",\n    \"customer_state\": \"string\",\n    \"customer_street\": \"string\",\n    \"customer_unit\": \"string\",\n    \"customer_zip\": \"string\"\n  },\n  \"customer_contact\": [\n    \"string\"\n  ],\n  \"customer_description\": \"string\",\n  \"customer_icon\": \"string\",\n  \"customer_id\": \"string\",\n  \"customer_image\": \"string\",\n  \"customer_key\": \"string\",\n  \"customer_name\": \"string\",\n  \"customer_type\": \"string\",\n  \"organization_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Customer updated\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Customer"
        ],
        "summary": "Customer Update",
        "parameters": [
          {
            "description": "Customer Update Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_customer.customerUpdateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/customer/view": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Customer View API\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"customer_id\": \"string\",\n  \"type\": 1\n}\n```\n\n*Sample OUTPUT Type 1*\n\n```json\n{\n  \"message\": \"Customer site map\",\n  \"response\": [\n    {\n      \"site_address\": {\n        \"site_area\": \"string\",\n        \"site_city\": \"string\",\n        \"site_country\": \"string\",\n        \"site_geolocation\": {\n          \"lat\": 0,\n          \"long\": 0\n        },\n        \"site_state\": \"string\",\n        \"site_street\": \"string\",\n        \"site_timezone\": \"string\",\n        \"site_unit\": \"string\",\n        \"site_zip\": \"string\"\n      },\n      \"site_description\": \"string\",\n      \"site_devices\": [\n        {\n          \"device_alerts\": 0,\n          \"device_icon\": \"string\",\n          \"device_id\": \"string\",\n          \"device_identifier\": \"string\",\n          \"device_image\": \"string\",\n          \"device_name\": \"string\",\n          \"device_notifications\": 0,\n          \"device_source\": [\n            {\n              \"source_address\": \"string\",\n              \"source_fps\": 0,\n              \"source_id\": \"string\",\n              \"source_name\": \"string\",\n              \"source_sid\": 0,\n              \"source_type\": \"string\"\n            }\n          ],\n          \"device_state\": true,\n          \"device_status\": \"string\",\n          \"device_streams\": [\n            {\n              \"address\": \"string\",\n              \"fps\": {\n                \"input\": 0,\n                \"output\": 0\n              },\n              \"id\": 0,\n              \"password\": \"string\",\n              \"port\": 0,\n              \"protocol\": \"string\",\n              \"resolution\": {\n                \"height\": 0,\n                \"width\": 0\n              },\n              \"type\": \"string\",\n              \"username\": \"string\",\n              \"uuid\": \"string\"\n            }\n          ],\n          \"device_tags\": {\n            \"additionalProp1\": \"string\",\n            \"additionalProp2\": \"string\",\n            \"additionalProp3\": \"string\"\n          },\n          \"device_type\": \"string\",\n          \"device_uuid\": \"string\",\n          \"device_value\": \"string\",\n          \"nimble_id\": \"string\",\n          \"site_id\": \"string\",\n          \"source_channels\": [\n            {\n              \"channel_favorite\": true,\n              \"channel_id\": \"string\",\n              \"channel_key\": \"string\",\n              \"channel_name\": \"string\",\n              \"channel_notifications\": 0,\n              \"channel_sid\": \"string\",\n              \"channel_type\": \"string\",\n              \"customer_id\": \"string\",\n              \"device_icon\": \"string\",\n              \"device_id\": \"string\",\n              \"device_name\": \"string\",\n              \"is_active\": true,\n              \"is_auto_recovery\": true,\n              \"is_purge\": true,\n              \"is_storage\": true,\n              \"is_verified\": true,\n              \"nimble_id\": \"string\",\n              \"pipeline_id\": \"string\",\n              \"site_id\": \"string\",\n              \"site_name\": \"string\",\n              \"source_id\": \"string\",\n              \"transaction_id\": \"string\",\n              \"usecase_icon\": \"string\",\n              \"usecase_id\": \"string\",\n              \"usecase_key\": \"string\",\n              \"usecase_meta_key\": [\n                {\n                  \"additionalProp1\": \"string\",\n                  \"additionalProp2\": \"string\",\n                  \"additionalProp3\": \"string\"\n                }\n              ],\n              \"usecase_name\": \"string\"\n            }\n          ],\n          \"transaction_id\": \"string\"\n        }\n      ],\n      \"site_icon\": \"string\",\n      \"site_id\": \"string\",\n      \"site_image\": \"string\",\n      \"site_key\": \"string\",\n      \"site_name\": \"string\",\n      \"site_notifications\": 0,\n      \"site_total_devices\": 0,\n      \"site_type\": \"string\"\n    }\n  ],\n  \"response_code\": 200\n}\n```\n\n*Sample OUTPUT Type 2*\n\n```json\n{\n  \"message\": \"Customer site map\",\n  \"response\": {\n    \"bundle_key\": \"string\",\n    \"is_available\": true,\n    \"usecase_background_color\": \"string\",\n    \"usecase_channel_count\": 0,\n    \"usecase_channels\": [\n      {\n        \"alerts\": [\n          {\n            \"alert_expression\": \"string\",\n            \"alert_frequency\": 0,\n            \"alert_id\": \"string\",\n            \"alert_name\": \"string\",\n            \"alert_priority\": 0,\n            \"alert_uuid\": \"string\",\n            \"channel_id\": \"string\",\n            \"is_active\": true\n          }\n        ],\n        \"channel_alerts\": 0,\n        \"channel_favorite\": true,\n        \"channel_id\": \"string\",\n        \"channel_key\": \"string\",\n        \"channel_name\": \"string\",\n        \"channel_notifications\": 0,\n        \"channel_sid\": \"string\",\n        \"channel_type\": \"string\",\n        \"customer_id\": \"string\",\n        \"device_icon\": \"string\",\n        \"device_id\": \"string\",\n        \"device_name\": \"string\",\n        \"is_active\": true,\n        \"is_auto_recovery\": true,\n        \"is_purge\": true,\n        \"is_storage\": true,\n        \"is_verified\": true,\n        \"nimble_id\": \"string\",\n        \"pipeline_id\": \"string\",\n        \"site_id\": \"string\",\n        \"site_name\": \"string\",\n        \"source_id\": \"string\",\n        \"transaction_id\": \"string\",\n        \"usecase_icon\": \"string\",\n        \"usecase_id\": \"string\",\n        \"usecase_key\": \"string\",\n        \"usecase_meta_key\": [\n          {\n            \"additionalProp1\": \"string\",\n            \"additionalProp2\": \"string\",\n            \"additionalProp3\": \"string\"\n          }\n        ],\n        \"usecase_name\": \"string\"\n      }\n    ],\n    \"usecase_component_key\": \"string\",\n    \"usecase_desc\": \"string\",\n    \"usecase_device_types\": [\n      \"string\"\n    ],\n    \"usecase_icon\": \"string\",\n    \"usecase_id\": \"string\",\n    \"usecase_key\": \"string\",\n    \"usecase_meta_key\": [\n      {\n        \"additionalProp1\": \"string\",\n        \"additionalProp2\": \"string\",\n        \"additionalProp3\": \"string\"\n      }\n    ],\n    \"usecase_name\": \"string\"\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Customer"
        ],
        "summary": "Customer View",
        "parameters": [
          {
            "type": "string",
            "description": "Customer ID",
            "name": "customer_id",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "type",
            "name": "type",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "type-1",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/sts_internal_api__common.SiteResp"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "site_address": {
                                "allOf": [
                                  {
                                    "$ref": "#/definitions/sts_internal_api__common.SiteAddress"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "site_geolocation": {
                                        "$ref": "#/definitions/sts_internal_api__common.GeoLocation"
                                      }
                                    }
                                  }
                                ]
                              },
                              "site_devices": {
                                "type": "array",
                                "items": {
                                  "allOf": [
                                    {
                                      "$ref": "#/definitions/sts_internal_api__common.DeviceResp"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "source_channels": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/sts_internal_api__common.ChannelResp"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          "202": {
            "description": "type-2",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/sts_internal_api__common.UsecaseResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "usecase_channels": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/sts_internal_api__common.ChannelResp"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/device/create": {
      "put": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Device Create API\n\n*Sample INPUT*\n\n```json\n{\n  \"device_identifier\": \"string\",\n  \"device_image\": \"string\",\n  \"device_name\": \"string\",\n  \"device_streams\": [\n    {\n      \"address\": \"string\",\n      \"fps\": {\n        \"input\": 0,\n        \"output\": 0\n      },\n      \"id\": 0,\n      \"password\": \"string\",\n      \"port\": 0,\n      \"protocol\": \"string\",\n      \"resolution\": {\n        \"height\": 0,\n        \"width\": 0\n      },\n      \"type\": \"string\",\n      \"username\": \"string\",\n      \"uuid\": \"string\"\n    }\n  ],\n  \"device_tags\": {\n    \"additionalProp1\": \"string\",\n    \"additionalProp2\": \"string\",\n    \"additionalProp3\": \"string\"\n  },\n  \"device_type\": \"string\",\n  \"device_uuid\": \"string\",\n  \"nimble_id\": \"string\",\n  \"site_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Device created\",\n  \"response\": {\n    \"device_id\": \"string\",\n    \"transaction_id\": \"string\"\n  },\n  \"response_code\": 201\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Device"
        ],
        "summary": "Device Create",
        "parameters": [
          {
            "description": "Device Create Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_device.deviceCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/sts_internal_api__common.DeviceResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/device/delete": {
      "delete": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Device Delete API\n\n*Sample INPUT*\n\n```json\n{\n    \"device_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n    \"message\": \"Device deleted\",\n    \"response\": null,\n    \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Device"
        ],
        "summary": "Device Delete",
        "parameters": [
          {
            "description": "Device Delete Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_device.deviceDeleteReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/structs.HTTPResp"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/device/id": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Device ID API\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"device_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Device ID\",\n  \"response\": {\n    \"device_id\": \"string\",\n    \"device_identifier\": \"string\",\n    \"device_image\": \"string\",\n    \"device_name\": \"string\",\n    \"device_state\": true,\n    \"device_status\": \"string\",\n    \"device_streams\": [\n      {\n        \"address\": \"string\",\n        \"fps\": {\n          \"input\": 0,\n          \"output\": 0\n        },\n        \"id\": 0,\n        \"password\": \"string\",\n        \"port\": 0,\n        \"protocol\": \"string\",\n        \"resolution\": {\n          \"height\": 0,\n          \"width\": 0\n        },\n        \"type\": \"string\",\n        \"username\": \"string\",\n        \"uuid\": \"string\"\n      }\n    ],\n    \"device_tags\": {\n      \"additionalProp1\": \"string\",\n      \"additionalProp2\": \"string\",\n      \"additionalProp3\": \"string\"\n    },\n    \"device_type\": \"string\",\n    \"device_uuid\": \"string\",\n    \"device_value\": \"string\",\n    \"nimble_id\": \"string\",\n    \"site_id\": \"string\",\n  },\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Device"
        ],
        "summary": "Device ID",
        "parameters": [
          {
            "type": "string",
            "description": "Device ID",
            "name": "device_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/sts_internal_api__common.DeviceResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "device_streams": {
                              "type": "array",
                              "items": {
                                "allOf": [
                                  {
                                    "$ref": "#/definitions/sts_internal_api__common.DeviceStream"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "fps": {
                                        "$ref": "#/definitions/sts_internal_api__common.StreamFPS"
                                      },
                                      "resolution": {
                                        "$ref": "#/definitions/sts_internal_api__common.StreamResolution"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/device/list": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Device List API\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"site_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Device List\",\n  \"response\": [\n    {\n      \"device_id\": \"string\",\n      \"device_identifier\": \"string\",\n      \"device_image\": \"string\",\n      \"device_name\": \"string\",\n      \"device_state\": true,\n      \"device_status\": \"string\",\n      \"device_streams\": [\n        {\n          \"address\": \"string\",\n          \"fps\": {\n            \"input\": 0,\n            \"output\": 0\n          },\n          \"id\": 0,\n          \"password\": \"string\",\n          \"port\": 0,\n          \"protocol\": \"string\",\n          \"resolution\": {\n            \"height\": 0,\n            \"width\": 0\n          },\n          \"type\": \"string\",\n          \"username\": \"string\",\n          \"uuid\": \"string\"\n        }\n      ],\n      \"device_tags\": {\n        \"additionalProp1\": \"string\",\n        \"additionalProp2\": \"string\",\n        \"additionalProp3\": \"string\"\n      },\n      \"device_type\": \"string\",\n      \"device_uuid\": \"string\",\n      \"device_value\": \"string\",\n      \"nimble_id\": \"string\",\n      \"site_id\": \"string\"\n    }\n  ],\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Device"
        ],
        "summary": "Device List",
        "parameters": [
          {
            "type": "string",
            "description": "Site ID",
            "name": "site_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/sts_internal_api__common.DeviceResp"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "device_streams": {
                                "type": "array",
                                "items": {
                                  "allOf": [
                                    {
                                      "$ref": "#/definitions/sts_internal_api__common.DeviceStream"
                                    },
                                    {
                                      "type": "object",
                                      "properties": {
                                        "fps": {
                                          "$ref": "#/definitions/sts_internal_api__common.StreamFPS"
                                        },
                                        "resolution": {
                                          "$ref": "#/definitions/sts_internal_api__common.StreamResolution"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/device/static/create": {
      "put": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Static Create API\n\n*Sample INPUT*\n\n```json\n{\n  \"device_id\": \"string\",\n  \"id\": 0,\n  \"static_content_data\": {\n    \"additionalProp1\": {}\n  },\n  \"static_content_name\": \"string\",\n  \"static_content_type\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n    \"message\": \"Zone created\",\n    \"response\": null,\n    \"response_code\": 201\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "StaticContent"
        ],
        "summary": "Static Content Create",
        "parameters": [
          {
            "description": "Static Content Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_device.staticContentCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/structs.HTTPResp"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/device/static/delete": {
      "delete": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Static Delete API\n\n*Sample INPUT*\n\n```json\n{\n  \"static_content_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n    \"message\": \"Static Content Deleted\",\n    \"response\": null,\n    \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "StaticContent"
        ],
        "summary": "Static Content Delete",
        "parameters": [
          {
            "description": "Static Content Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_device.staticContentIDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/device/static/id": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Static ID API\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"static_content_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n    \"message\": \"Zone created\",\n    \"response\": {\n      \"device_id\": \"string\",\n      \"id\": 0,\n      \"static_content_data\": {\n        \"additionalProp1\": {}\n      },\n      \"static_content_name\": \"string\",\n      \"static_content_type\": \"string\"\n    },\n    \"response_code\": 201\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "StaticContent"
        ],
        "summary": "Static Content ID",
        "parameters": [
          {
            "type": "string",
            "description": "Static ID",
            "name": "static_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_device.staticContentResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/device/static/list": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Static List API\n\n*Sample INPUT*\n\n// Query params\n\n```json\n{\n  \"device_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Zone List\",\n  \"response\": [\n    {\n      \"device_id\": \"string\",\n      \"id\": 0,\n      \"static_content_data\": {\n        \"additionalProp1\": {}\n      },\n      \"static_content_name\": \"string\",\n      \"static_content_type\": \"string\"\n    }\n  ],\n  \"response_code\": 201\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "StaticContent"
        ],
        "summary": "Static Content List",
        "parameters": [
          {
            "type": "string",
            "description": "Device ID",
            "name": "device_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/internal_api_device.staticContentResp"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/device/static/update": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Static Update API\n\n*Sample INPUT*\n\n```json\n{\n  \"device_id\": \"string\",\n  \"id\": 0,\n  \"static_content_data\": {\n    \"additionalProp1\": {}\n  },\n  \"static_content_name\": \"string\",\n  \"static_content_type\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n    \"message\": \"Zone updated\",\n    \"response\": null,\n    \"response_code\": 201\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "StaticContent"
        ],
        "summary": "Static Content Update",
        "parameters": [
          {
            "description": "Static Content Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_device.staticContentUpdateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/device/update": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Device Update API\n\n*Sample INPUT*\n\n```json\n{\n  \"device_id\": \"string\",\n  \"device_identifier\": \"string\",\n  \"device_image\": \"string\",\n  \"device_name\": \"string\",\n  \"device_streams\": [\n    {\n      \"address\": \"string\",\n      \"fps\": {\n        \"input\": 0,\n        \"output\": 0\n      },\n      \"id\": 0,\n      \"password\": \"string\",\n      \"port\": 0,\n      \"protocol\": \"string\",\n      \"resolution\": {\n        \"height\": 0,\n        \"width\": 0\n      },\n      \"type\": \"string\",\n      \"username\": \"string\",\n      \"uuid\": \"string\"\n    }\n  ],\n  \"device_tags\": {\n    \"additionalProp1\": \"string\",\n    \"additionalProp2\": \"string\",\n    \"additionalProp3\": \"string\"\n  },\n  \"device_type\": \"string\",\n  \"device_uuid\": \"string\",\n  \"nimble_id\": \"string\",\n  \"site_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Device Updated\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Device"
        ],
        "summary": "Device Update",
        "parameters": [
          {
            "description": "Device Update Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_device.deviceUpdateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/device/view": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Device View API\n\n*Sample INPUT*\n\n// Query params\n\n```json\n{\n  \"device_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Device view\",\n  \"response\": {\n    \"device_alerts\": 0,\n    \"device_icon\": \"string\",\n    \"device_id\": \"string\",\n    \"device_identifier\": \"string\",\n    \"device_image\": \"string\",\n    \"device_name\": \"string\",\n    \"device_notifications\": 0,\n    \"device_source\": [\n      {\n        \"source_address\": \"string\",\n        \"source_fps\": 0,\n        \"source_id\": \"string\",\n        \"source_name\": \"string\",\n        \"source_sid\": 0,\n        \"source_type\": \"string\"\n      }\n    ],\n    \"device_state\": true,\n    \"device_status\": \"string\",\n    \"device_streams\": [\n      {\n        \"address\": \"string\",\n        \"fps\": {\n          \"input\": 0,\n          \"output\": 0\n        },\n        \"id\": 0,\n        \"password\": \"string\",\n        \"port\": 0,\n        \"protocol\": \"string\",\n        \"resolution\": {\n          \"height\": 0,\n          \"width\": 0\n        },\n        \"type\": \"string\",\n        \"username\": \"string\",\n        \"uuid\": \"string\"\n      }\n    ],\n    \"device_tags\": {\n      \"additionalProp1\": \"string\",\n      \"additionalProp2\": \"string\",\n      \"additionalProp3\": \"string\"\n    },\n    \"device_type\": \"string\",\n    \"device_uuid\": \"string\",\n    \"device_value\": \"string\",\n    \"nimble_id\": \"string\",\n    \"site_id\": \"string\",\n    \"source_channels\": [\n      {\n        \"channel_alerts\": 0,\n        \"channel_favorite\": true,\n        \"channel_id\": \"string\",\n        \"channel_key\": \"string\",\n        \"channel_name\": \"string\",\n        \"channel_notifications\": 0,\n        \"channel_sid\": \"string\",\n        \"channel_type\": \"string\",\n        \"customer_id\": \"string\",\n        \"device_icon\": \"string\",\n        \"device_id\": \"string\",\n        \"device_name\": \"string\",\n        \"is_active\": true,\n        \"is_auto_recovery\": true,\n        \"is_purge\": true,\n        \"is_storage\": true,\n        \"is_verified\": true,\n        \"nimble_id\": \"string\",\n        \"pipeline_id\": \"string\",\n        \"site_id\": \"string\",\n        \"site_name\": \"string\",\n        \"source_id\": \"string\",\n        \"transaction_id\": \"string\",\n        \"usecase_icon\": \"string\",\n        \"usecase_id\": \"string\",\n        \"usecase_key\": \"string\",\n        \"usecase_meta_key\": [\n          {\n            \"additionalProp1\": \"string\",\n            \"additionalProp2\": \"string\",\n            \"additionalProp3\": \"string\"\n          }\n        ],\n        \"usecase_name\": \"string\"\n      }\n    ],\n    \"transaction_id\": \"string\",\n    \"device_sources\": [\n      {\n        \"source_address\": \"string\",\n        \"source_fps\": 0,\n        \"source_id\": \"string\",\n        \"source_name\": \"string\",\n        \"source_sid\": 0,\n        \"source_type\": \"string\"\n      }\n    ]\n  },\n  \"response_code\": 200\n}\n\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Device"
        ],
        "summary": "Device List",
        "parameters": [
          {
            "type": "string",
            "description": "Device ID",
            "name": "device_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/sts_internal_api__common.DeviceResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "device_sources": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/sts_internal_api__common.SourceResp"
                              }
                            },
                            "source_channels": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/sts_internal_api__common.ChannelResp"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/generic/asset": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Returns a file\n\n*Sample Input*\n```json\n{\n  \"path\": \"string\",\n  \"type\": \"string\"\n}\n```\n\n*Sample Output*\n```\nReturns file\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Generic"
        ],
        "summary": "Asset Upload Image",
        "parameters": [
          {
            "type": "string",
            "description": "Path",
            "name": "path",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/generic/asset/secure": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Takes in a file as part of a multipart form and stores the file",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Generic"
        ],
        "summary": "Get Secure Image",
        "parameters": [
          {
            "type": "string",
            "description": "Asset Path",
            "name": "path",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Asset Type",
            "name": "type",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/generic/upload": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Takes in a file as part of a multipart form and stores the file\n\n*Sample Input*\n```json\n{\n  \"isBase64\": false,\n  \"base64Image\": \"string\",\n  \"image\": \"formData\"\n}\n```\n\n*Sample Output*\n```json\n{\n  \"message\": \"Uploaded successfully\",\n  \"response\": \"string\",\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Generic"
        ],
        "summary": "Upload Image",
        "parameters": [
          {
            "description": "Accepts .jpg .png",
            "name": "image",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "isBase64",
            "name": "isBase64",
            "in": "body",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "base64Image",
            "name": "base64Image",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/structs.HTTPResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "response": {
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/generic/upload/_": {
      "post": {
        "description": "### Takes in a file as part of a multipart form and stores the file\n\n*Sample Input*\n```json\n{\n  \"isBase64\": false,\n  \"base64Image\": \"string\",\n  \"image\": \"formData\"\n}\n```\n\n*Sample Output*\n```json\n{\n  \"message\": \"Uploaded successfully\",\n  \"response\": \"string\",\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Generic"
        ],
        "summary": "Upload No Auth",
        "parameters": [
          {
            "description": "Accepts .gz",
            "name": "file",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "isGzip",
            "name": "isBase64",
            "in": "body",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/structs.HTTPResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "response": {
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/instance/create": {
      "put": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Instance Create API\n\n*Sample Input*\n```json\n{\n  \"uuid\": \"string\"\n}\n```\n\n*Sample Output*\n```json\n{\n  \"message\": \"Instance created\",\n  \"response\": \"string\",\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Instance"
        ],
        "summary": "Instance Create",
        "parameters": [
          {
            "description": "Instance Create Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_instance.instanceCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/instance/list": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Instance List by User API\n\n*Sample Output*\n```json\n{\n  \"message\": \"Instance\",\n  \"response\": [\n    {\n      \"instance_id\": \"string\",\n      \"instance_uuid\": \"string\"\n    }\n  ],\n  \"response_code\": 200\n}\n```",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Instance"
        ],
        "summary": "Instance List",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/instance/notification/send": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Instance send notification \n\n*Sample Input*\n\n```json\n{\n  \"instance_notification\": {\n    \"action_uuid\": \"string\",\n    \"customer_name\": \"string\",\n    \"site_name\": \"string\",\n    \"rule_uuid\": \"string\",\n    \"rule_name\": \"string\",\n    \"rule_expression\": \"string\",\n    \"notification_url\": \"string\",\n    \"extra_data\": \"\",\n    \"image_url\": [\n      \"https://www.example.com/icon.png\"\n    ],\n    \"action\": [\n      {\n        \"action_access_id\": \"string\",\n        \"action_access_token\": \"string\",\n        \"action_auth_header\": \"string\",\n        \"action_external_link\": \"string\",\n        \"action_header\": \"string\",\n        \"action_is_auto_payload\": true,\n        \"action_is_secure\": true,\n        \"action_message\": \"string\",\n        \"action_method\": \"string\",\n        \"action_payload\": \"string\",\n        \"action_process_delay\": 0,\n        \"action_query\": \"string\",\n        \"action_subject\": \"string\",\n        \"action_to\": \"string\",\n        \"action_type\": \"string\",\n        \"action_url\": \"string\",\n        \"service_key\": \"string\",\n        \"additionalProp1\": {}\n      }\n    ]\n  },\n  \"instance_attachments\": [\n    \"https://www.example.com/icon.png\"\n  ]\n}\n```\n\n*Sample Output*\n\n```json\n{\n  \"message\": \"Notification sent\",\n  \"response\": \"string\",\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Instance"
        ],
        "summary": "Instance Notification Send",
        "parameters": [
          {
            "description": "Notification Send Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_instance.instanceNotificationSendReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/instance/process": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Instance Report Process API\n\n*Sample INPUT*\n\n```json\n{\n  \"bucket\": \"string\",\n  \"object\": \"string\",\n  \"filename\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Usage Instance\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Instance"
        ],
        "summary": "Instance Process",
        "parameters": [
          {
            "description": "Process instance request",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_instance.instanceUsageProcessReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/instance/update": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Backoffice Instance Update API\n\n*Sample INPUT*\n\n```json\n{\n  \"instance_name\": \"string\",\n  \"instance_image\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Instance Details Updated\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Instance"
        ],
        "summary": "Update Instance details in Env",
        "parameters": [
          {
            "description": "Instance Update Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_instance.instanceUpdateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/instance/uuid": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Instance by UUID API\n\n*Sample Output*\n```json\n{\n  \"message\": \"Instance\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Instance"
        ],
        "summary": "Instance By UUID",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/license/create": {
      "put": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Licence Create API\n\n*Sample INPUT*\n\n```json\n{\n  \"license_customer\": \"string\",\n  \"license_pool\": \"string\",\n  \"license_subscription\": \"string\",\n  \"license_version\": 0\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"License add and activation transaction created successfully\",\n  \"response\": {\n    \"license_id\": \"string\"\n  },\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "License"
        ],
        "summary": "License Create",
        "parameters": [
          {
            "description": "License Create Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_license.licenseCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_license.licenseResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/license/delete": {
      "delete": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Licence Delete API\n\n*Sample INPUT*\n\n```json\n{\n  \"license_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"License deleted\",\n  \"response\": {\n    \"license_id\": \"string\"\n  },\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "License"
        ],
        "summary": "License Delete",
        "parameters": [
          {
            "description": "License Delete Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_license.licenseStatusReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_license.licenseResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/license/id": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Licence ID API\n\n*Sample INPUT*\n\n```json\n{\n  \"license_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"License by ID\",\n  \"response\": {\n    \"license_created_at\": \"string\",\n    \"license_customer\": \"string\",\n    \"license_id\": \"string\",\n    \"license_status\": {\n      \"additionalProp1\": {}\n    },\n    \"license_updated_at\": \"string\",\n    \"license_version\": 0\n  },\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "License"
        ],
        "summary": "License by ID",
        "parameters": [
          {
            "type": "string",
            "description": "License ID",
            "name": "license_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_license.licenseResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/license/list": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Licence List API\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"License Configuration list\",\n  \"response\": [\n    {\n      \"license_created_at\": \"string\",\n      \"license_customer\": \"string\",\n      \"license_id\": \"string\",\n      \"license_status\": {\n        \"additionalProp1\": {}\n      },\n      \"license_updated_at\": \"string\",\n      \"license_version\": 0\n    }\n  ],\n  \"response_code\": 200\n}\n```",
        "produces": [
          "application/json"
        ],
        "tags": [
          "License"
        ],
        "summary": "List License",
        "parameters": [
          {
            "type": "boolean",
            "description": "With Status",
            "name": "is_status",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/internal_api_license.licenseResp"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/license/status": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Licence Status API\n\n*Sample INPUT*\n\n```json\n{\n  \"license_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"License Configuration Status\",\n  \"response\": {\n    \"license_created_at\": \"string\",\n    \"license_customer\": \"string\",\n    \"license_id\": \"string\",\n    \"license_status\": {\n      \"additionalProp1\": {}\n    },\n    \"license_updated_at\": \"string\",\n    \"license_version\": 0\n  },\n  \"response_code\": 200\n}\n```",
        "produces": [
          "application/json"
        ],
        "tags": [
          "License"
        ],
        "summary": "License Status",
        "parameters": [
          {
            "type": "boolean",
            "description": "License ID",
            "name": "license_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_license.licenseResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/license/update": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Licence Update API\n\n*Sample INPUT*\n\n```json\n{\n  \"license_customer\": \"string\",\n  \"license_id\": \"string\",\n  \"license_pool\": \"string\",\n  \"license_subscription\": \"string\",\n  \"license_version\": 0\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"License updated\",\n  \"response\": {\n    \"license_id\": \"string\"\n  },\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "License"
        ],
        "summary": "License Update",
        "parameters": [
          {
            "description": "License Update Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_license.licenseUpdateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_license.licenseResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/nimble/config": {
      "put": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Nimble Conf Create API\n\n*Sample INPUT*\n\n```json\n{\n  \"license_id\": \"string\",\n  \"nimble_address\": \"string\",\n  \"nimble_is_secure\": true,\n  \"nimble_key\": \"string\",\n  \"nimble_name\": \"string\",\n  \"nimble_port\": 0,\n  \"nimble_retry\": {\n    \"disable_backoff\": true,\n    \"times\": 0,\n    \"wait_base\": 0\n  },\n  \"nimble_timeout\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Nimble created\",\n  \"response\": {\n    \"nimble_id\": \"string\",\n    \"transaction_id\": \"string\"\n  },\n  \"response_code\": 0\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Nimble"
        ],
        "summary": "Nimble Configuration Create",
        "parameters": [
          {
            "description": "Nimble Config Create Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_nimble.nimbleCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Nimble Conf Delete API\n\n*Sample INPUT*\n\n```json\n{\n  \"nimble_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Nimble deleted\",\n  \"response\": {\n    \"nimble_id\": \"string\",\n    \"transaction_id\": \"string\"\n  },\n  \"response_code\": 0\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Nimble"
        ],
        "summary": "Nimble Configuration Delete",
        "parameters": [
          {
            "description": "Nimble Config Delete Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_nimble.nimbleStatusReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Nimble Conf Update API\n\n*Sample INPUT*\n\n```json\n{\n  \"license_id\": \"string\",\n  \"nimble_address\": \"string\",\n  \"nimble_id\": \"string\",\n  \"nimble_is_secure\": true,\n  \"nimble_key\": \"string\",\n  \"nimble_name\": \"string\",\n  \"nimble_port\": 0,\n  \"nimble_retry\": {\n    \"disable_backoff\": true,\n    \"times\": 0,\n    \"wait_base\": 0\n  },\n  \"nimble_timeout\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Nimble updated\",\n  \"response\": {\n    \"nimble_id\": \"string\",\n    \"transaction_id\": \"string\"\n  },\n  \"response_code\": 0\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Nimble"
        ],
        "summary": "Nimble Configuration Update",
        "parameters": [
          {
            "description": "Nimble Config Update Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_nimble.nimbleUpdateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/nimble/config/override": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Nimble Conf Override API\n\n*Sample INPUT*\n\n```json\n{\n  \"nimble_id\": \"string\",\n  \"nimble_is_override\": true\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Nimble override status updated\",\n  \"response\": {\n    \"nimble_id\": \"string\",\n    \"transaction_id\": \"string\"\n  },\n  \"response_code\": 0\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Nimble"
        ],
        "summary": "Nimble Configuration Override",
        "parameters": [
          {
            "description": "Nimble Config Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_nimble.nimbleStatusReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/nimble/id": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Nimble Conf Get API\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"string\",\n  \"response\": {\n    \"license\": {\n      \"license_created_at\": \"string\",\n      \"license_customer\": \"string\",\n      \"license_expires_at\": \"string\",\n      \"license_id\": \"string\",\n      \"license_name\": \"string\",\n      \"license_status\": {\n        \"additionalProp1\": {}\n      },\n      \"license_updated_at\": \"string\",\n      \"license_uuid\": \"string\"\n    },\n    \"nimble_address\": \"string\",\n    \"nimble_api_version\": \"string\",\n    \"nimble_created_at\": \"string\",\n    \"nimble_device_types\": [\n      \"string\"\n    ],\n    \"nimble_hash\": \"string\",\n    \"nimble_host_name\": \"string\",\n    \"nimble_id\": \"string\",\n    \"nimble_is_active\": true,\n    \"nimble_is_override\": true,\n    \"nimble_is_secure\": true,\n    \"nimble_is_statistics\": true,\n    \"nimble_key\": \"string\",\n    \"nimble_name\": \"string\",\n    \"nimble_port\": 0,\n    \"nimble_retry\": {\n      \"disable_backoff\": true,\n      \"times\": 0,\n      \"wait_base\": 0\n    },\n    \"nimble_routes\": {\n      \"additionalProp1\": {}\n    },\n    \"nimble_status\": 0,\n    \"nimble_timeout\": \"string\",\n    \"nimble_updated_at\": \"string\",\n    \"nimble_version\": \"string\",\n    \"site_ids\": [\n      \"string\"\n    ]\n  },\n  \"response_code\": 0\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Nimble"
        ],
        "summary": "Nimble Configuration by ID",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/internal_api_nimble.nimbleResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "license": {
                              "$ref": "#/definitions/internal_api_nimble.licenseResp"
                            },
                            "nimble_retry": {
                              "$ref": "#/definitions/internal_api_nimble.nimbleRetryConfig"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/nimble/licence/upsert": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Nimble License Upsert API\n\n*Sample INPUT*\n\n```json\n{\n  \"license_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"License updated to nimble.\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Nimble"
        ],
        "summary": "Nimble License Upsert",
        "parameters": [
          {
            "description": "Nimble License Upsert Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_nimble.nimbleLicenseUpsertReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/nimble/list": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Nimble List API\n\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"string\",\n  \"response\": [\n    {\n      \"license\": {\n        \"license_created_at\": \"string\",\n        \"license_customer\": \"string\",\n        \"license_expires_at\": \"string\",\n        \"license_id\": \"string\",\n        \"license_name\": \"string\",\n        \"license_status\": {\n          \"additionalProp1\": {}\n        },\n        \"license_updated_at\": \"string\",\n        \"license_uuid\": \"string\"\n      },\n      \"nimble_address\": \"string\",\n      \"nimble_api_version\": \"string\",\n      \"nimble_created_at\": \"string\",\n      \"nimble_device_types\": [\n        \"string\"\n      ],\n      \"nimble_hash\": \"string\",\n      \"nimble_host_name\": \"string\",\n      \"nimble_id\": \"string\",\n      \"nimble_is_active\": true,\n      \"nimble_is_override\": true,\n      \"nimble_is_secure\": true,\n      \"nimble_is_statistics\": true,\n      \"nimble_key\": \"string\",\n      \"nimble_name\": \"string\",\n      \"nimble_port\": 0,\n      \"nimble_retry\": {\n        \"disable_backoff\": true,\n        \"times\": 0,\n        \"wait_base\": 0\n      },\n      \"nimble_routes\": {\n        \"additionalProp1\": {}\n      },\n      \"nimble_status\": 0,\n      \"nimble_timeout\": \"string\",\n      \"nimble_updated_at\": \"string\",\n      \"nimble_version\": \"string\"\n    }\n  ],\n  \"response_code\": 0\n}\n```",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Nimble"
        ],
        "summary": "List Nimble Configuration",
        "parameters": [
          {
            "type": "boolean",
            "description": "Site ID",
            "name": "site_ids",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "description": "With Status",
            "name": "is_status",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/internal_api_nimble.nimbleResp"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "license": {
                                "$ref": "#/definitions/internal_api_nimble.licenseResp"
                              },
                              "nimble_retry": {
                                "$ref": "#/definitions/internal_api_nimble.nimbleRetryConfig"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/nimble/stats": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Nimble Stats API\n\n*Sample INPUT*\n\n```json\n{\n  \"nimble_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Nimble Configuration Stats\",\n  \"response\": {\n    \"nimble_id\": \"string\",\n    \"nimble_stats\": [\n      {\n        \"cpu\": 0,\n        \"mem_physical\": 0,\n        \"mem_virtual\": 0,\n        \"time\": \"string\"\n      }\n    ],\n    \"nimble_uptime\": 0\n  },\n  \"response_code\": 0\n}\n```",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Nimble"
        ],
        "summary": "Nimble Stats",
        "parameters": [
          {
            "type": "boolean",
            "description": "Nimble ID",
            "name": "nimble_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/internal_api_nimble.nimbleStatsResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "nimble_stats": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/internal_api_nimble.nimbleStats"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/nimble/status": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Nimble Status API\n\n*Sample INPUT*\n\n```json\n{\n  \"nimble_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"string\",\n  \"response\": {\n    \"nimble_id\": \"string\"\n  },\n  \"response_code\": 0\n}\n```",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Nimble"
        ],
        "summary": "Nimble Service Status",
        "parameters": [
          {
            "type": "boolean",
            "description": "Nimble ID",
            "name": "nimble_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/internal_api_nimble.nimbleResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "nimble_stats": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/internal_api_nimble.nimbleStats"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/notification/range": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Notification By Range API.\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"rule_uuid\": \"string\",\n  \"notification_offset\": 0,\n  \"notification_limit\": 0,\n  \"start\": \"string\",\n  \"end\": \"string\",\n  \"type\": 0,\n  \"agg_frequency\": \"0ms\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Notifications by range\",\n  \"response\": {\n    \"end\": \"string\",\n    \"rule_uuid\": \"string\",\n    \"notifications\": [\n      {\n        \"rule_uuid\": \"string\",\n        \"notification_data\": {\n          \"attachment\": \"string\",\n          \"from\": \"string\",\n          \"message\": \"string\",\n          \"subject\": \"string\",\n          \"to\": \"string\"\n        },\n        \"notification_extra\": \"string\",\n        \"notification_time\": \"string\",\n        \"notification_uuid\": \"string\"\n      }\n    ],\n    \"start\": \"string\"\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Notification"
        ],
        "summary": "Notifications By Range",
        "parameters": [
          {
            "type": "string",
            "description": "Rule UUID",
            "name": "rule_uuid",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Notification Offset",
            "name": "notification_offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Notification Limit",
            "name": "notification_limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start Time",
            "name": "start",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "End Time",
            "name": "end",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Type",
            "name": "type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Aggregation Frequency",
            "name": "agg_frequency",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/internal_api_notification.notificationRangeResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "notifications": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/internal_api_notification.notificationUUIDResp"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/notification/stats": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Notification Stats By Usecase API.\n\n*Sample INPUT*\n\n// Query params\n\n```json\n{\n  \"usecase_key\": \"string\",\n  \"usecase_meta_key\": [\n    \"string\",\n    \"string\",\n    \"string\"\n  ],\n  \"frequency\": \"string\",\n  \"details\": true\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Notification stats\",\n  \"response\": {\n    \"usecase_channel\": [\n      {\n        \"channel_alert\": {\n          \"channel\": \"string\",\n          \"condition\": \"string\",\n          \"count\": 0,\n          \"key\": \"string\",\n          \"name\": \"string\",\n          \"time\": \"string\"\n        },\n        \"channel_id\": \"string\",\n        \"channel_key\": \"string\",\n        \"channel_name\": \"string\",\n        \"channel_stats\": {\n          \"alert\": 0,\n          \"down\": 0,\n          \"dwell_time\": 0,\n          \"fire\": 0,\n          \"frame_collision\": 0,\n          \"frame_near_miss\": 0,\n          \"high_smoke\": 0,\n          \"ids\": [\n            \"string\"\n          ],\n          \"intermediate_smoke\": 0,\n          \"low_smoke\": 0,\n          \"moving_average_count\": 0,\n          \"non_violation\": 0,\n          \"occupancy\": 0,\n          \"total\": 0,\n          \"total_collision\": 0,\n          \"total_near_miss\": 0,\n          \"up\": 0,\n          \"violation\": 0\n        },\n        \"channel_total_alert\": 0,\n        \"channel_total_notification\": 0,\n        \"usecase_key\": \"string\"\n      }\n    ],\n    \"usecase_key\": \"string\",\n    \"usecase_total_alert\": 0,\n    \"usecase_total_notification\": 0,\n    \"usecase_total_stats\": {\n      \"down\": 0,\n      \"dwell_time\": 0,\n      \"fire\": 0,\n      \"frame_collision\": 0,\n      \"frame_nearmiss\": 0,\n      \"high_smoke\": 0,\n      \"intermediate_smoke\": 0,\n      \"low_smoke\": 0,\n      \"movingaverage_count\": 0,\n      \"nonviolation\": 0,\n      \"occupancy\": 0,\n      \"total\": 0,\n      \"total_collision\": 0,\n      \"total_nearmiss\": 0,\n      \"up\": 0,\n      \"violation\": 0\n    }\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Analytics"
        ],
        "summary": "UseCase Stats",
        "parameters": [
          {
            "type": "string",
            "description": "UseCase Key",
            "name": "usecase_key",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "UseCase Meta Key",
            "name": "usecase_meta_key",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "default": "-1h",
            "description": "Frequency",
            "name": "frequency",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "details",
            "name": "details",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/internal_api_notification.notificationStatResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "usecase_channel": {
                              "type": "array",
                              "items": {
                                "allOf": [
                                  {
                                    "$ref": "#/definitions/sts_internal_api__common.EventStatsResp"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "channel_alert": {
                                        "$ref": "#/definitions/model.AlertData"
                                      },
                                      "channel_stats": {
                                        "$ref": "#/definitions/model.StatsData"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/notification/uuid": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Notification By UUID API.\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"rule_uuid\": \"string\",\n  \"notification_uuid\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Notification by UUID\",\n  \"response\": {\n    \"rule_uuid\": \"string\",\n    \"notification_data\": {\n      \"attachment\": \"string\",\n      \"from\": \"string\",\n      \"message\": \"string\",\n      \"subject\": \"string\",\n      \"to\": \"string\"\n    },\n    \"notification_extra\": \"string\",\n    \"notification_time\": \"string\",\n    \"notification_uuid\": \"string\"\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Notification"
        ],
        "summary": "Notification By UUID",
        "parameters": [
          {
            "type": "string",
            "description": "Rule UUID",
            "name": "rule_uuid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Notification UUID",
            "name": "notification_uuid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/internal_api_notification.notificationUUIDResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "notification_data": {
                              "$ref": "#/definitions/structs.DefaultEmail"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/organization/create": {
      "put": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Organization Create API\n\n*Sample INPUT*\n\n```json\n{\n  \"organization_address\": {\n    \"organization_area\": \"string\",\n    \"organization_city\": \"string\",\n    \"organization_country\": \"string\",\n    \"organization_geolocation\": {\n      \"lat\": 0,\n      \"long\": 0\n    },\n    \"organization_state\": \"string\",\n    \"organization_street\": \"string\",\n    \"organization_unit\": \"string\",\n    \"organization_zip\": \"string\"\n  },\n  \"organization_description\": \"string\",\n  \"organization_icon\": \"string\",\n  \"organization_key\": \"string\",\n  \"organization_name\": \"string\",\n  \"organization_website\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Organization created\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Organization"
        ],
        "summary": "Organization Create",
        "parameters": [
          {
            "description": "Organization Create Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_organization.organizationCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/organization/delete": {
      "delete": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Organization Delete API\n\n*Sample INPUT*\n\n```json\n{\n  \"organization_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Organization Deleted\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Organization"
        ],
        "summary": "Organization Delete",
        "parameters": [
          {
            "description": "Organization Delete Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_organization.organizationIDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/organization/id": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Organization ID API\n\n*Sample INPUT*\n\n// Query params\n\n```json\n{\n  \"organization_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Organization ID\",\n  \"response\": [\n    {\n      \"organization_address\": {\n        \"organization_area\": \"string\",\n        \"organization_city\": \"string\",\n        \"organization_country\": \"string\",\n        \"organization_geolocation\": {\n          \"lat\": 0,\n          \"long\": 0\n        },\n        \"organization_state\": \"string\",\n        \"organization_street\": \"string\",\n        \"organization_unit\": \"string\",\n        \"organization_zip\": \"string\"\n      },\n      \"organization_description\": \"string\",\n      \"organization_icon\": \"string\",\n      \"organization_id\": \"string\",\n      \"organization_key\": \"string\",\n      \"organization_name\": \"string\",\n      \"organization_website\": \"string\"\n    }\n  ],\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Organization"
        ],
        "summary": "Organization ID",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID",
            "name": "organization_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/sts_internal_api_organization.organizationResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "organization_address": {
                              "allOf": [
                                {
                                  "$ref": "#/definitions/sts_internal_api_organization.organizationAddress"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "organization_geolocation": {
                                      "$ref": "#/definitions/sts_internal_api_organization.geoLocation"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/organization/list": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Organization List API\n\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"string\",\n  \"response\": [\n    {\n      \"organization_address\": {\n        \"organization_area\": \"string\",\n        \"organization_city\": \"string\",\n        \"organization_country\": \"string\",\n        \"organization_geolocation\": {\n          \"lat\": 0,\n          \"long\": 0\n        },\n        \"organization_state\": \"string\",\n        \"organization_street\": \"string\",\n        \"organization_unit\": \"string\",\n        \"organization_zip\": \"string\"\n      },\n      \"organization_description\": \"string\",\n      \"organization_icon\": \"string\",\n      \"organization_id\": \"string\",\n      \"organization_key\": \"string\",\n      \"organization_name\": \"string\",\n      \"organization_website\": \"string\"\n    }\n  ],\n  \"response_code\": 0\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Organization"
        ],
        "summary": "Organization List",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/sts_internal_api_organization.organizationResp"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "organization_address": {
                                "allOf": [
                                  {
                                    "$ref": "#/definitions/sts_internal_api_organization.organizationAddress"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "organization_geolocation": {
                                        "$ref": "#/definitions/sts_internal_api_organization.geoLocation"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/organization/update": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Organization Update API\n\n*Sample INPUT*\n\n```json\n{\n  \"organization_address\": {\n    \"organization_area\": \"string\",\n    \"organization_city\": \"string\",\n    \"organization_country\": \"string\",\n    \"organization_geolocation\": {\n      \"lat\": 0,\n      \"long\": 0\n    },\n    \"organization_state\": \"string\",\n    \"organization_street\": \"string\",\n    \"organization_unit\": \"string\",\n    \"organization_zip\": \"string\"\n  },\n  \"organization_description\": \"string\",\n  \"organization_icon\": \"string\",\n  \"organization_id\": \"string\",\n  \"organization_key\": \"string\",\n  \"organization_name\": \"string\",\n  \"organization_website\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Organization updated\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Organization"
        ],
        "summary": "Organization Update",
        "parameters": [
          {
            "description": "Organization Update Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_organization.organizationUpdateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/pipeline/catalog/info": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Pipeline Catalog Info API\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"nimble_id\": \"string\",\n  \"key\": []\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Pipeline Catalog Info\",\n  \"response\": {\n    \"catalog_elements\": [\n      {\n        \"additionalProp1\": {}\n      }\n    ],\n    \"models\": [\n      {\n        \"additionalProp1\": {}\n      }\n    ]\n  },\n  \"response_code\": 0\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pipeline"
        ],
        "summary": "Pipeline Catalog Information",
        "parameters": [
          {
            "type": "string",
            "description": "Nimble ID",
            "name": "nimble_id",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "Catalog Element Key",
            "name": "key",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_pipeline.pipelineCatalogInfoResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/pipeline/catalog/refresh": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Catalog Refresh API.\n\n*Sample INPUT*\n\n```json\n{\n  \"nimble_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Catalog Information updated\",\n  \"response\": {\n    \"transaction_id\": \"string\"\n  },\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pipeline"
        ],
        "summary": "Refresh Catalog Information",
        "parameters": [
          {
            "description": "Pipeline Catalog refresh Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_pipeline.pipelineCatalogRefreshReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_pipeline.pipelineCatalogRefreshResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/pipeline/create": {
      "post": {
        "security": [
          {
            "OAuth2Password": []
          }
        ],
        "description": "### Pipeline Create API\n\n*Sample INPUT*\n\n```json\n{\n  \"nimble_id\": \"string\",\n  \"pipeline_elements\": [\n    {}\n  ],\n  \"pipeline_name\": \"string\",\n  \"pipeline_source\": [\n    0\n  ],\n  \"pipeline_usecase\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Pipeline created\",\n  \"response\": null,\n  \"response_code\": 201\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pipeline"
        ],
        "summary": "Pipeline Create",
        "parameters": [
          {
            "description": "Pipeline Create Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_pipeline.pipelineCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/pipeline/defaults": {
      "get": {
        "security": [
          {
            "OAuth2Password": []
          }
        ],
        "description": "### Pipeline Defaults API\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"usecase_key\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Default Pipeline Elements\",\n  \"response\": {\n    \"default_data\": {\n      \"additionalProp1\": {}\n    }\n  },\n  \"response_code\": 200\n}\n```",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pipeline"
        ],
        "summary": "Default Pipeline Element Information",
        "parameters": [
          {
            "type": "string",
            "description": "UseCase Key",
            "name": "usecase_key",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_pipeline.pipelineDefaultsResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/pipeline/delete": {
      "delete": {
        "security": [
          {
            "OAuth2Password": []
          }
        ],
        "description": "### Pipeline Delete API\n\n*Sample INPUT*\n\n```json\n{\n  \"pipeline_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Pipeline deleted\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pipeline"
        ],
        "summary": "Pipeline Delete",
        "parameters": [
          {
            "description": "Pipeline Delete Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_pipeline.pipelineIDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/pipeline/id": {
      "get": {
        "security": [
          {
            "OAuth2Password": []
          }
        ],
        "description": "### Pipeline ID API\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"pipeline_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Pipeline ID\",\n  \"response\": {\n    \"nimble_id\": \"string\",\n    \"pipeline_elements\": [\n      {}\n    ],\n    \"pipeline_id\": \"string\",\n    \"pipeline_name\": \"string\",\n    \"pipeline_source\": [\n      0\n    ],\n    \"pipeline_usecase\": \"string\"\n  },\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pipeline"
        ],
        "summary": "Pipeline ID",
        "parameters": [
          {
            "type": "string",
            "description": "Pipeline ID",
            "name": "pipeline_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_pipeline.pipelineResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/pipeline/list": {
      "get": {
        "security": [
          {
            "OAuth2Password": []
          }
        ],
        "description": "### Pipeline List API\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Pipeline List\",\n  \"response\": [\n    {\n      \"nimble_id\": \"string\",\n      \"pipeline_elements\": [\n        {}\n      ],\n      \"pipeline_id\": \"string\",\n      \"pipeline_name\": \"string\",\n      \"pipeline_source\": [\n        0\n      ],\n      \"pipeline_usecase\": \"string\"\n    }\n  ],\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pipeline"
        ],
        "summary": "Pipeline List",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/internal_api_pipeline.pipelineResp"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/pipeline/update": {
      "patch": {
        "security": [
          {
            "OAuth2Password": []
          }
        ],
        "description": "### Pipeline Update API\n\n*Sample INPUT*\n\n```json\n{\n  \"nimble_id\": \"string\",\n  \"pipeline_elements\": [\n    {}\n  ],\n  \"pipeline_name\": \"string\",\n  \"pipeline_source\": [\n    0\n  ],\n  \"pipeline_usecase\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Pipeline updated\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Pipeline"
        ],
        "summary": "Pipeline Update",
        "parameters": [
          {
            "description": "Pipeline Update Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_pipeline.pipelineCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_pipeline.pipelineIDReq"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/role/list": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Role List\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Roles List\",\n  \"response\": [\n    {\n      \"role_id\": \"string\",\n      \"role_key\": \"string\",\n      \"role_name\": \"string\"\n    }\n  ],\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Role"
        ],
        "summary": "Role List",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/sts_internal_api_role.roleListResp"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/rule/create": {
      "put": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Rule Create API.\n\n*Sample INPUT*\n\n```json\n{\n  \"rule_action\": [\n    {\n      \"action_access_id\": \"string\",\n      \"action_access_token\": \"string\",\n      \"action_auth_header\": \"string\",\n      \"action_external_link\": \"string\",\n      \"action_header\": \"string\",\n      \"action_is_auto_payload\": true,\n      \"action_is_secure\": true,\n      \"action_message\": \"string\",\n      \"action_method\": \"string\",\n      \"action_payload\": \"string\",\n      \"action_process_delay\": 0,\n      \"action_query\": \"string\",\n      \"action_subject\": \"string\",\n      \"action_to\": \"string\",\n      \"action_type\": \"string\",\n      \"action_url\": \"string\",\n      \"service_key\": \"string\",\n      \"additionalProp1\": {}\n    }\n  ],\n  \"rule_expression\": \"string\",\n  \"rule_frequency\": 0,\n  \"rule_name\": \"string\",\n  \"rule_notification\": {\n    \"notification_frequency\": 0,\n    \"notification_is_reminder\": true,\n    \"notification_reminder\": {\n      \"reminder_count\": 0,\n      \"reminder_frequency\": 0,\n      \"reminder_is_ack\": true,\n      \"reminder_priority_type\": \"string\",\n      \"reminder_type\": \"string\"\n    },\n    \"notification_type\": \"string\"\n  },\n  \"rule_priority\": \"string\",\n  \"rule_template\": {\n    \"additionalProp1\": {}\n  },\n  \"rule_tolerance\": 0,\n  \"site_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Rule created\",\n  \"response\": {\n    \"rule_id\": \"string\"\n  },\n  \"response_code\": 201\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Rule"
        ],
        "summary": "Rule Create",
        "parameters": [
          {
            "description": "Rule Create Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/internal_api_rule.ruleCreateReq"
                },
                {
                  "type": "object",
                  "properties": {
                    "rule_action": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/internal_api_rule.action"
                      }
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_rule.ruleResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/rule/delete": {
      "delete": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Rule Delete API.\n\n*Sample INPUT*\n\n```json\n{\n  \"rule_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Rule deleted\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Rule"
        ],
        "summary": "Rule Delete",
        "parameters": [
          {
            "description": "Rule Delete Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_rule.ruleIDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/rule/disable": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Rule Disable API.\n\n*Sample INPUT*\n\n```json\n{\n  \"rule_id\": \"string\",\n  \"site_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Rule deactivated\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Rule"
        ],
        "summary": "Rule Disable",
        "parameters": [
          {
            "description": "Rule Disable Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_rule.ruleActivateDeActivateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_rule.ruleResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/rule/enable": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Rule Enable API.\n\n*Sample INPUT*\n\n```json\n{\n  \"rule_id\": \"string\",\n  \"site_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Rule activated\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Rule"
        ],
        "summary": "Rule Enable",
        "parameters": [
          {
            "description": "Rule Enable Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_rule.ruleActivateDeActivateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_rule.ruleResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/rule/id": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Rule by ID API.\n\n*Sample INPUT*\n\n```json\n{\n  \"rule_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Rule ID\",\n  \"response\": {\n    \"is_active\": true,\n    \"rule_action\": [\n      {\n        \"action_access_id\": \"string\",\n        \"action_access_token\": \"string\",\n        \"action_auth_header\": \"string\",\n        \"action_external_link\": \"string\",\n        \"action_header\": \"string\",\n        \"action_is_auto_payload\": true,\n        \"action_is_secure\": true,\n        \"action_message\": \"string\",\n        \"action_method\": \"string\",\n        \"action_payload\": \"string\",\n        \"action_process_delay\": 0,\n        \"action_query\": \"string\",\n        \"action_subject\": \"string\",\n        \"action_to\": \"string\",\n        \"action_type\": \"string\",\n        \"action_url\": \"string\",\n        \"service_key\": \"string\"\n      }\n    ],\n    \"rule_expand\": {\n      \"additionalProp1\": {}\n    },\n    \"rule_expression\": \"string\",\n    \"rule_frequency\": 0,\n    \"rule_id\": \"string\",\n    \"rule_name\": \"string\",\n    \"rule_notification\": {\n      \"notification_frequency\": 0,\n      \"notification_is_reminder\": true,\n      \"notification_reminder\": {\n        \"reminder_count\": 0,\n        \"reminder_frequency\": 0,\n        \"reminder_is_ack\": true,\n        \"reminder_priority_type\": \"string\",\n        \"reminder_type\": \"string\"\n      },\n      \"notification_type\": \"string\"\n    },\n    \"rule_priority\": \"string\",\n    \"rule_template\": {\n      \"additionalProp1\": {}\n    },\n    \"rule_tolerance\": 0,\n    \"rule_uuid\": \"string\",\n    \"site_id\": \"string\"\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Rule"
        ],
        "summary": "Rule by ID",
        "parameters": [
          {
            "type": "string",
            "description": "Rule ID",
            "name": "rule_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/internal_api_rule.ruleResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "rule_action": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/internal_api_rule.action"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/rule/list": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Rule List by Site ID API.\n\n*Sample INPUT*\n\n```json\n{\n  \"site_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Rule list\",\n  \"response\": [\n    {\n      \"is_active\": true,\n      \"rule_action\": [\n        {\n          \"action_access_id\": \"string\",\n          \"action_access_token\": \"string\",\n          \"action_auth_header\": \"string\",\n          \"action_external_link\": \"string\",\n          \"action_header\": \"string\",\n          \"action_is_auto_payload\": true,\n          \"action_is_secure\": true,\n          \"action_message\": \"string\",\n          \"action_method\": \"string\",\n          \"action_payload\": \"string\",\n          \"action_process_delay\": 0,\n          \"action_query\": \"string\",\n          \"action_subject\": \"string\",\n          \"action_to\": \"string\",\n          \"action_type\": \"string\",\n          \"action_url\": \"string\",\n          \"service_key\": \"string\"\n        }\n      ],\n      \"rule_expand\": {\n        \"additionalProp1\": {}\n      },\n      \"rule_expression\": \"string\",\n      \"rule_frequency\": 0,\n      \"rule_id\": \"string\",\n      \"rule_name\": \"string\",\n      \"rule_notification\": {\n        \"notification_frequency\": 0,\n        \"notification_is_reminder\": true,\n        \"notification_reminder\": {\n          \"reminder_count\": 0,\n          \"reminder_frequency\": 0,\n          \"reminder_is_ack\": true,\n          \"reminder_priority_type\": \"string\",\n          \"reminder_type\": \"string\"\n        },\n        \"notification_type\": \"string\"\n      },\n      \"rule_priority\": \"string\",\n      \"rule_template\": {\n        \"additionalProp1\": {}\n      },\n      \"rule_tolerance\": 0,\n      \"rule_uuid\": \"string\",\n      \"site_id\": \"string\"\n    }\n  ],\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Rule"
        ],
        "summary": "Rule List by Site ID",
        "parameters": [
          {
            "type": "string",
            "description": "Site ID",
            "name": "site_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/internal_api_rule.ruleResp"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "rule_action": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/internal_api_rule.action"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/rule/list/device": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Rule List by Device ID API.\n\n*Sample INPUT*\n\n```json\n{\n  \"device_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Rule list\",\n  \"response\": [\n    {\n      \"is_active\": true,\n      \"rule_action\": [\n        {\n          \"action_access_id\": \"string\",\n          \"action_access_token\": \"string\",\n          \"action_auth_header\": \"string\",\n          \"action_external_link\": \"string\",\n          \"action_header\": \"string\",\n          \"action_is_auto_payload\": true,\n          \"action_is_secure\": true,\n          \"action_message\": \"string\",\n          \"action_method\": \"string\",\n          \"action_payload\": \"string\",\n          \"action_process_delay\": 0,\n          \"action_query\": \"string\",\n          \"action_subject\": \"string\",\n          \"action_to\": \"string\",\n          \"action_type\": \"string\",\n          \"action_url\": \"string\",\n          \"service_key\": \"string\"\n        }\n      ],\n      \"rule_expand\": {\n        \"additionalProp1\": {}\n      },\n      \"rule_expression\": \"string\",\n      \"rule_frequency\": 0,\n      \"rule_id\": \"string\",\n      \"rule_name\": \"string\",\n      \"rule_notification\": {\n        \"notification_frequency\": 0,\n        \"notification_is_reminder\": true,\n        \"notification_reminder\": {\n          \"reminder_count\": 0,\n          \"reminder_frequency\": 0,\n          \"reminder_is_ack\": true,\n          \"reminder_priority_type\": \"string\",\n          \"reminder_type\": \"string\"\n        },\n        \"notification_type\": \"string\"\n      },\n      \"rule_priority\": \"string\",\n      \"rule_template\": {\n        \"additionalProp1\": {}\n      },\n      \"rule_tolerance\": 0,\n      \"rule_uuid\": \"string\",\n      \"site_id\": \"string\"\n    }\n  ],\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Rule"
        ],
        "summary": "Rule List by Device ID",
        "parameters": [
          {
            "type": "string",
            "description": "Device ID",
            "name": "device_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/internal_api_rule.ruleResp"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "rule_action": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/internal_api_rule.action"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/rule/remove/reference": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Rule Remove User Reference API.\n\n*Sample INPUT*\n\n```json\n{\n  \"user_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Removed user association from rule.\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Rule"
        ],
        "summary": "Rule Remove User Reference",
        "parameters": [
          {
            "description": "Rule Remove User Reference Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_rule.ruleActivateDeActivateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/internal_api_rule.ruleResp"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "rule_action": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/internal_api_rule.action"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/rule/template": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Rule Template by Rule ID API.\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"rule_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Rule Template\",\n  \"response\": [\n    {\n      \"is_active\": true,\n      \"rule_action\": [\n        {\n          \"action_access_id\": \"string\",\n          \"action_access_token\": \"string\",\n          \"action_auth_header\": \"string\",\n          \"action_external_link\": \"string\",\n          \"action_header\": \"string\",\n          \"action_is_auto_payload\": true,\n          \"action_is_secure\": true,\n          \"action_message\": \"string\",\n          \"action_method\": \"string\",\n          \"action_payload\": \"string\",\n          \"action_process_delay\": 0,\n          \"action_query\": \"string\",\n          \"action_subject\": \"string\",\n          \"action_to\": \"string\",\n          \"action_type\": \"string\",\n          \"action_url\": \"string\",\n          \"service_key\": \"string\"\n        }\n      ],\n      \"rule_expand\": {\n        \"additionalProp1\": {}\n      },\n      \"rule_expression\": \"string\",\n      \"rule_frequency\": 0,\n      \"rule_id\": \"string\",\n      \"rule_name\": \"string\",\n      \"rule_notification\": {\n        \"notification_frequency\": 0,\n        \"notification_is_reminder\": true,\n        \"notification_reminder\": {\n          \"reminder_count\": 0,\n          \"reminder_frequency\": 0,\n          \"reminder_is_ack\": true,\n          \"reminder_priority_type\": \"string\",\n          \"reminder_type\": \"string\"\n        },\n        \"notification_type\": \"string\"\n      },\n      \"rule_priority\": \"string\",\n      \"rule_template\": {\n        \"additionalProp1\": {}\n      },\n      \"rule_tolerance\": 0,\n      \"rule_uuid\": \"string\",\n      \"site_id\": \"string\"\n    }\n  ],\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Rule"
        ],
        "summary": "Rule TemplateGet by Rule ID",
        "parameters": [
          {
            "type": "string",
            "description": "Rule ID",
            "name": "rule_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/internal_api_rule.ruleResp"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "rule_action": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/internal_api_rule.action"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/rule/update": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Rule Update API.\n\n*Sample INPUT*\n\n```json\n{\n  \"is_active\": true,\n  \"rule_action\": [\n    {\n      \"action_access_id\": \"string\",\n      \"action_access_token\": \"string\",\n      \"action_auth_header\": \"string\",\n      \"action_external_link\": \"string\",\n      \"action_header\": \"string\",\n      \"action_is_auto_payload\": true,\n      \"action_is_secure\": true,\n      \"action_message\": \"string\",\n      \"action_method\": \"string\",\n      \"action_payload\": \"string\",\n      \"action_process_delay\": 0,\n      \"action_query\": \"string\",\n      \"action_subject\": \"string\",\n      \"action_to\": \"string\",\n      \"action_type\": \"string\",\n      \"action_url\": \"string\",\n      \"service_key\": \"string\"\n    }\n  ],\n  \"rule_expand\": {\n    \"additionalProp1\": {}\n  },\n  \"rule_expression\": \"string\",\n  \"rule_frequency\": 0,\n  \"rule_id\": \"string\",\n  \"rule_name\": \"string\",\n  \"rule_notification\": {\n    \"notification_frequency\": 0,\n    \"notification_is_reminder\": true,\n    \"notification_reminder\": {\n      \"reminder_count\": 0,\n      \"reminder_frequency\": 0,\n      \"reminder_is_ack\": true,\n      \"reminder_priority_type\": \"string\",\n      \"reminder_type\": \"string\"\n    },\n    \"notification_type\": \"string\"\n  },\n  \"rule_priority\": \"string\",\n  \"rule_template\": {\n    \"additionalProp1\": {}\n  },\n  \"rule_tolerance\": 0,\n  \"rule_uuid\": \"string\",\n  \"site_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Rule Update\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Rule"
        ],
        "summary": "Rule Update",
        "parameters": [
          {
            "description": "Rule Update Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/internal_api_rule.ruleUpdateReq"
                },
                {
                  "type": "object",
                  "properties": {
                    "rule_action": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/internal_api_rule.action"
                      }
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/rule/uuid": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Rule by ID API.\n\n*Sample INPUT*\n\n```json\n{\n  \"rule_uuid\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Rule UUID\",\n  \"response\": {\n    \"is_active\": true,\n    \"rule_action\": [\n      {\n        \"action_access_id\": \"string\",\n        \"action_access_token\": \"string\",\n        \"action_auth_header\": \"string\",\n        \"action_external_link\": \"string\",\n        \"action_header\": \"string\",\n        \"action_is_auto_payload\": true,\n        \"action_is_secure\": true,\n        \"action_message\": \"string\",\n        \"action_method\": \"string\",\n        \"action_payload\": \"string\",\n        \"action_process_delay\": 0,\n        \"action_query\": \"string\",\n        \"action_subject\": \"string\",\n        \"action_to\": \"string\",\n        \"action_type\": \"string\",\n        \"action_url\": \"string\",\n        \"service_key\": \"string\"\n      }\n    ],\n    \"rule_expand\": {\n      \"additionalProp1\": {}\n    },\n    \"rule_expression\": \"string\",\n    \"rule_frequency\": 0,\n    \"rule_id\": \"string\",\n    \"rule_name\": \"string\",\n    \"rule_notification\": {\n      \"notification_frequency\": 0,\n      \"notification_is_reminder\": true,\n      \"notification_reminder\": {\n        \"reminder_count\": 0,\n        \"reminder_frequency\": 0,\n        \"reminder_is_ack\": true,\n        \"reminder_priority_type\": \"string\",\n        \"reminder_type\": \"string\"\n      },\n      \"notification_type\": \"string\"\n    },\n    \"rule_priority\": \"string\",\n    \"rule_template\": {\n      \"additionalProp1\": {}\n    },\n    \"rule_tolerance\": 0,\n    \"rule_uuid\": \"string\",\n    \"site_id\": \"string\"\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Rule"
        ],
        "summary": "Rule by UUID",
        "parameters": [
          {
            "type": "string",
            "description": "Rule UUID",
            "name": "rule_uuid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/internal_api_rule.ruleResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "rule_action": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/internal_api_rule.action"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/schedule/create": {
      "put": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Schedule Create API\n\n*Sample INPUT*\n\n```json\n{\n  \"alert_id\": \"string\",\n  \"channel_id\": \"string\",\n  \"rule_id\": \"string\",\n  \"schedule_name\": \"string\",\n  \"schedule_occurrence\": [\n    {\n      \"occurrence_activate_cron\": \"string\",\n      \"occurrence_constraint\": \"string\",\n      \"occurrence_deactivate_cron\": \"string\",\n      \"occurrence_end_time\": \"string\",\n      \"occurrence_id\": 0,\n      \"occurrence_is_allday\": true,\n      \"occurrence_start_time\": \"string\"\n    }\n  ],\n  \"schedule_timezone\": \"string\",\n  \"schedule_type\": \"string\",\n  \"site_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Schedule created\",\n  \"response\": null,\n  \"response_code\": 201\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Schedule"
        ],
        "summary": "Schedule Create",
        "parameters": [
          {
            "description": "Schedule Create Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_schedule.scheduleCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/schedule/delete": {
      "delete": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Schedule Delete API\n\n*Sample INPUT*\n\n```json\n{\n  \"schedule_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Schedule deleted\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Schedule"
        ],
        "summary": "Schedule Delete",
        "parameters": [
          {
            "description": "Schedule Delete Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_schedule.scheduleIDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/schedule/id": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Schedule ID API\n\n*Sample INPUT*\n\n```json\n{\n  \"schedule_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Schedule ID\",\n  \"response\": {\n    \"alert_id\": \"string\",\n    \"channel_id\": \"string\",\n    \"is_active\": true,\n    \"rule_id\": \"string\",\n    \"schedule_id\": \"string\",\n    \"schedule_name\": \"string\",\n    \"schedule_occurrence\": [\n      {\n        \"occurrence_activate_cron\": \"string\",\n        \"occurrence_constraint\": \"string\",\n        \"occurrence_deactivate_cron\": \"string\",\n        \"occurrence_end_time\": \"string\",\n        \"occurrence_id\": 0,\n        \"occurrence_is_allday\": true,\n        \"occurrence_start_time\": \"string\"\n      }\n    ],\n    \"schedule_type\": \"string\",\n    \"timezone\": \"string\"\n  },\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Schedule"
        ],
        "summary": "Schedule ID",
        "parameters": [
          {
            "description": "Schedule ID Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_schedule.scheduleIDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/sts_internal_api_schedule.scheduleResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "schedule_occurrence": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/sts_internal_api_schedule.scheduleOccurrence"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/schedule/list": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Schedule List By Channel ID API\n\n*Sample INPUT*\n\n```json\n{\n  \"channel_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Schedule List\",\n  \"response\": [\n    {\n      \"alert_id\": \"string\",\n      \"channel_id\": \"string\",\n      \"is_active\": true,\n      \"schedule_id\": \"string\",\n      \"schedule_name\": \"string\",\n      \"schedule_occurrence\": [\n        {\n          \"occurrence_activate_cron\": \"string\",\n          \"occurrence_constraint\": \"string\",\n          \"occurrence_deactivate_cron\": \"string\",\n          \"occurrence_end_time\": \"string\",\n          \"occurrence_id\": 0,\n          \"occurrence_is_allday\": true,\n          \"occurrence_start_time\": \"string\"\n        }\n      ],\n      \"schedule_type\": \"string\",\n      \"timezone\": \"string\"\n    }\n  ],\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Schedule"
        ],
        "summary": "Schedule List by Channel ID",
        "parameters": [
          {
            "description": "Schedule List Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_schedule.scheduleListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/sts_internal_api_schedule.scheduleResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "schedule_occurrence": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/sts_internal_api_schedule.scheduleOccurrence"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/schedule/rule/list": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Schedule Rule List\n\n*Sample INPUT*\n\n```json\n{\n  \"site_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Schedule Rule List\",\n  \"response\": [\n    {\n      \"rule_id\": \"string\",\n      \"is_active\": true,\n      \"schedule_id\": \"string\",\n      \"schedule_name\": \"string\",\n      \"schedule_occurrence\": [\n        {\n          \"occurrence_activate_cron\": \"string\",\n          \"occurrence_constraint\": \"string\",\n          \"occurrence_deactivate_cron\": \"string\",\n          \"occurrence_end_time\": \"string\",\n          \"occurrence_id\": 0,\n          \"occurrence_is_allday\": true,\n          \"occurrence_start_time\": \"string\"\n        }\n      ],\n      \"schedule_type\": \"string\",\n      \"timezone\": \"string\"\n    }\n  ],\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Schedule"
        ],
        "summary": "Schedule Rule List",
        "parameters": [
          {
            "description": "Schedule List Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_schedule.scheduleRuleListReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/sts_internal_api_schedule.scheduleResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "schedule_occurrence": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/sts_internal_api_schedule.scheduleOccurrence"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/schedule/update": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Schedule Update API\n\n*Sample INPUT*\n\n```json\n{\n  \"alert_id\": \"string\",\n  \"channel_id\": \"string\",\n  \"is_active\": true,\n  \"rule_id\": \"string\",\n  \"schedule_id\": \"string\",\n  \"schedule_name\": \"string\",\n  \"schedule_occurrence\": [\n    {\n      \"occurrence_activate_cron\": \"string\",\n      \"occurrence_constraint\": \"string\",\n      \"occurrence_deactivate_cron\": \"string\",\n      \"occurrence_end_time\": \"string\",\n      \"occurrence_id\": 0,\n      \"occurrence_is_allday\": true,\n      \"occurrence_start_time\": \"string\"\n    }\n  ],\n  \"schedule_type\": \"string\",\n  \"timezone\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Schedule updated\",\n  \"response\": {\n    \"alert_id\": \"string\",\n    \"channel_id\": \"string\",\n    \"is_active\": true,\n    \"rule_id\": \"string\",\n    \"schedule_id\": \"string\",\n    \"schedule_name\": \"string\",\n    \"schedule_occurrence\": [\n      {\n        \"occurrence_activate_cron\": \"string\",\n        \"occurrence_constraint\": \"string\",\n        \"occurrence_deactivate_cron\": \"string\",\n        \"occurrence_end_time\": \"string\",\n        \"occurrence_id\": 0,\n        \"occurrence_is_allday\": true,\n        \"occurrence_start_time\": \"string\"\n      }\n    ],\n    \"schedule_type\": \"string\",\n    \"timezone\": \"string\"\n  },\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Schedule"
        ],
        "summary": "Schedule Update",
        "parameters": [
          {
            "description": "Schedule Update Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_schedule.scheduleUpdateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/sts_internal_api_schedule.scheduleResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "schedule_occurrence": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/sts_internal_api_schedule.scheduleOccurrence"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/site/assign": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Site Assign API.\n\n*Sample INPUT*\n\n```json\n{\n  \"site_id\":  [\n    \"string\"\n  ],\n  \"user_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n    \"message\": \"Site(s) assigned to user\",\n    \"response\": null,\n    \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Site"
        ],
        "summary": "Site Assign",
        "parameters": [
          {
            "description": "Site Assign Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_site.siteAssignReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/site/create": {
      "put": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Site Create API\n\n*Sample INPUT*\n\n```json\n{\n  \"customer_id\": \"string\",\n  \"organization_id\": \"string\",\n  \"site_address\": {\n    \"site_area\": \"string\",\n    \"site_city\": \"string\",\n    \"site_country\": \"string\",\n    \"site_geolocation\": {\n      \"lat\": 0,\n      \"long\": 0\n    },\n    \"site_state\": \"string\",\n    \"site_street\": \"string\",\n    \"site_timezone\": \"string\",\n    \"site_unit\": \"string\",\n    \"site_zip\": \"string\"\n  },\n  \"site_description\": \"string\",\n  \"site_icon\": \"string\",\n  \"site_image\": \"string\",\n  \"site_key\": \"string\",\n  \"site_name\": \"string\",\n  \"site_type\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Site Created\",\n  \"response\": {\n    \"site_id\": \"string\"\n  },\n  \"response_code\": 201\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Site"
        ],
        "summary": "Site Create",
        "parameters": [
          {
            "description": "Site Create Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_site.siteCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/sts_internal_api__common.SiteResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "site_address": {
                              "allOf": [
                                {
                                  "$ref": "#/definitions/sts_internal_api__common.SiteAddress"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "site_geolocation": {
                                      "$ref": "#/definitions/sts_internal_api__common.GeoLocation"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/site/delete": {
      "delete": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Site Delete API\n\n*Sample INPUT*\n\n```json\n{\n  \"site_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Site Deleted\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Site"
        ],
        "summary": "Site Delete",
        "parameters": [
          {
            "description": "Site Delete Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_site.siteDeleteReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/site/id": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Site ID API\n\n*Sample INPUT*\n\n// Query params\n\n```json\n{\n  \"site_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Site ID\",\n  \"response\": {\n    \"site_address\": {\n      \"site_area\": \"string\",\n      \"site_city\": \"string\",\n      \"site_country\": \"string\",\n      \"site_geolocation\": {\n        \"lat\": 0,\n        \"long\": 0\n      },\n      \"site_state\": \"string\",\n      \"site_street\": \"string\",\n      \"site_timezone\": \"string\",\n      \"site_unit\": \"string\",\n      \"site_zip\": \"string\"\n    },\n    \"site_description\": \"string\",\n    \"site_icon\": \"string\",\n    \"site_id\": \"string\",\n    \"site_image\": \"string\",\n    \"site_key\": \"string\",\n    \"site_name\": \"string\",\n    \"site_total_devices\": 0,\n    \"site_type\": \"string\"\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Site"
        ],
        "summary": "Site ID",
        "parameters": [
          {
            "type": "string",
            "description": "Site ID",
            "name": "site_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/sts_internal_api__common.SiteResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "site_address": {
                              "allOf": [
                                {
                                  "$ref": "#/definitions/sts_internal_api__common.SiteAddress"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "site_geolocation": {
                                      "$ref": "#/definitions/sts_internal_api__common.GeoLocation"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/site/list": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Site List API\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"customer_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Site List\",\n  \"response\": [\n    {\n      \"site_address\": {\n        \"site_area\": \"string\",\n        \"site_city\": \"string\",\n        \"site_country\": \"string\",\n        \"site_geolocation\": {\n          \"lat\": 0,\n          \"long\": 0\n        },\n        \"site_state\": \"string\",\n        \"site_street\": \"string\",\n        \"site_timezone\": \"string\",\n        \"site_unit\": \"string\",\n        \"site_zip\": \"string\"\n      },\n      \"site_description\": \"string\",\n      \"site_devices\": [\n        {\n          \"device_alerts\": 0,\n          \"device_id\": \"string\",\n          \"device_identifier\": \"string\",\n          \"device_image\": \"string\",\n          \"device_name\": \"string\",\n          \"device_notifications\": 0,\n          \"device_source\": [\n            {\n              \"source_address\": \"string\",\n              \"source_fps\": 0,\n              \"source_id\": \"string\",\n              \"source_name\": \"string\",\n              \"source_sid\": 0,\n              \"source_type\": \"string\"\n            }\n          ],\n          \"device_state\": true,\n          \"device_status\": \"string\",\n          \"device_tags\": {\n            \"additionalProp1\": \"string\",\n            \"additionalProp2\": \"string\",\n            \"additionalProp3\": \"string\"\n          },\n          \"device_type\": \"string\",\n          \"device_uuid\": \"string\",\n          \"device_value\": \"string\",\n          \"nimble_id\": \"string\",\n          \"source_channels\": [\n            {\n              \"channel_alerts\": 0,\n              \"channel_favorite\": true,\n              \"channel_id\": \"string\",\n              \"channel_key\": \"string\",\n              \"channel_name\": \"string\",\n              \"channel_notifications\": 0,\n              \"channel_sid\": \"string\",\n              \"customer_id\": \"string\",\n              \"device_id\": \"string\",\n              \"is_active\": true,\n              \"is_auto_recovery\": true,\n              \"is_purge\": true,\n              \"is_storage\": true,\n              \"is_verified\": true,\n              \"nimble_id\": \"string\",\n              \"pipeline_id\": \"string\",\n              \"site_id\": \"string\",\n              \"source_id\": \"string\",\n              \"transaction_id\": \"string\",\n              \"usecase_icon\": \"string\",\n              \"usecase_id\": \"string\",\n              \"usecase_key\": \"string\",\n              \"usecase_meta_key\": [\n                {\n                  \"additionalProp1\": \"string\",\n                  \"additionalProp2\": \"string\",\n                  \"additionalProp3\": \"string\"\n                }\n              ],\n              \"usecase_name\": \"string\"\n            }\n          ]\n        }\n      ],\n      \"site_icon\": \"string\",\n      \"site_id\": \"string\",\n      \"site_image\": \"string\",\n      \"site_key\": \"string\",\n      \"site_name\": \"string\",\n      \"site_notifications\": 0,\n      \"site_total_devices\": 0,\n      \"site_type\": \"string\"\n    }\n  ],\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Site"
        ],
        "summary": "Sites List",
        "parameters": [
          {
            "type": "string",
            "description": "Customer ID",
            "name": "customer_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/sts_internal_api__common.SiteResp"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "site_address": {
                                "allOf": [
                                  {
                                    "$ref": "#/definitions/sts_internal_api__common.SiteAddress"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "site_geolocation": {
                                        "$ref": "#/definitions/sts_internal_api__common.GeoLocation"
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/site/unassign": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Site Unassign API.\n\n*Sample INPUT*\n\n```json\n{\n  \"site_id\":  [\n    \"string\"\n  ],\n  \"user_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n    \"message\": \"Site(s) un-assigned to user\",\n    \"response\": null,\n    \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Site"
        ],
        "summary": "Site Unassign",
        "parameters": [
          {
            "description": "Site Assign Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_site.siteUnAssignReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/site/update": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Site Update API\n\n*Sample INPUT*\n\n```json\n{\n  \"customer_id\": \"string\",\n  \"organization_id\": \"string\",\n  \"site_address\": {\n    \"site_area\": \"string\",\n    \"site_city\": \"string\",\n    \"site_country\": \"string\",\n    \"site_geolocation\": {\n      \"lat\": 0,\n      \"long\": 0\n    },\n    \"site_state\": \"string\",\n    \"site_street\": \"string\",\n    \"site_timezone\": \"string\",\n    \"site_unit\": \"string\",\n    \"site_zip\": \"string\"\n  },\n  \"site_description\": \"string\",\n  \"site_icon\": \"string\",\n  \"site_id\": \"string\",\n  \"site_image\": \"string\",\n  \"site_key\": \"string\",\n  \"site_name\": \"string\",\n  \"site_type\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Site Updated\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Site"
        ],
        "summary": "Site Update",
        "parameters": [
          {
            "description": "Site Update Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_site.siteUpdateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/site/view": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Site View API\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"site_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Site view\",\n  \"response\": {\n    \"site_address\": {\n      \"site_area\": \"string\",\n      \"site_city\": \"string\",\n      \"site_country\": \"string\",\n      \"site_geolocation\": {\n        \"lat\": 0,\n        \"long\": 0\n      },\n      \"site_state\": \"string\",\n      \"site_street\": \"string\",\n      \"site_timezone\": \"string\",\n      \"site_unit\": \"string\",\n      \"site_zip\": \"string\"\n    },\n    \"site_description\": \"string\",\n    \"site_devices\": [\n      {\n        \"device_alerts\": 0,\n        \"device_icon\": \"string\",\n        \"device_id\": \"string\",\n        \"device_identifier\": \"string\",\n        \"device_image\": \"string\",\n        \"device_name\": \"string\",\n        \"device_notifications\": 0,\n        \"device_source\": [\n          {\n            \"source_address\": \"string\",\n            \"source_fps\": 0,\n            \"source_id\": \"string\",\n            \"source_name\": \"string\",\n            \"source_sid\": 0,\n            \"source_type\": \"string\"\n          }\n        ],\n        \"device_state\": true,\n        \"device_status\": \"string\",\n        \"device_tags\": {\n          \"additionalProp1\": \"string\",\n          \"additionalProp2\": \"string\",\n          \"additionalProp3\": \"string\"\n        },\n        \"device_type\": \"string\",\n        \"device_uuid\": \"string\",\n        \"device_value\": \"string\",\n        \"nimble_id\": \"string\",\n        \"site_id\": \"string\",\n        \"source_channels\": [\n          {\n            \"channel_favorite\": true,\n            \"channel_id\": \"string\",\n            \"channel_key\": \"string\",\n            \"channel_name\": \"string\",\n            \"channel_notifications\": 0,\n            \"channel_sid\": \"string\",\n            \"channel_type\": \"string\",\n            \"customer_id\": \"string\",\n            \"device_icon\": \"string\",\n            \"device_id\": \"string\",\n            \"device_name\": \"string\",\n            \"is_active\": true,\n            \"is_auto_recovery\": true,\n            \"is_purge\": true,\n            \"is_storage\": true,\n            \"is_verified\": true,\n            \"nimble_id\": \"string\",\n            \"pipeline_id\": \"string\",\n            \"site_id\": \"string\",\n            \"site_name\": \"string\",\n            \"source_id\": \"string\",\n            \"transaction_id\": \"string\",\n            \"usecase_icon\": \"string\",\n            \"usecase_id\": \"string\",\n            \"usecase_key\": \"string\",\n            \"usecase_meta_key\": [\n              {\n                \"additionalProp1\": \"string\",\n                \"additionalProp2\": \"string\",\n                \"additionalProp3\": \"string\"\n              }\n            ],\n            \"usecase_name\": \"string\"\n          }\n        ],\n        \"transaction_id\": \"string\"\n      }\n    ],\n    \"site_icon\": \"string\",\n    \"site_id\": \"string\",\n    \"site_image\": \"string\",\n    \"site_key\": \"string\",\n    \"site_name\": \"string\",\n    \"site_notifications\": 0,\n    \"site_total_devices\": 0,\n    \"site_type\": \"string\"\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Site"
        ],
        "summary": "Site ID",
        "parameters": [
          {
            "type": "string",
            "description": "Site ID",
            "name": "site_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/sts_internal_api__common.SiteResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "site_address": {
                              "allOf": [
                                {
                                  "$ref": "#/definitions/sts_internal_api__common.SiteAddress"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "site_geolocation": {
                                      "$ref": "#/definitions/sts_internal_api__common.GeoLocation"
                                    }
                                  }
                                }
                              ]
                            },
                            "site_devices": {
                              "type": "array",
                              "items": {
                                "allOf": [
                                  {
                                    "$ref": "#/definitions/sts_internal_api__common.DeviceResp"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "device_source": {
                                        "type": "array",
                                        "items": {
                                          "$ref": "#/definitions/sts_internal_api__common.SourceResp"
                                        }
                                      },
                                      "source_channels": {
                                        "type": "array",
                                        "items": {
                                          "$ref": "#/definitions/sts_internal_api__common.ChannelResp"
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/source/create": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Source Create API\n\n*Sample INPUT*\n\n```json\n{\n  \"device_id\": \"string\",\n  \"nimble_id\": \"string\",\n  \"source_address\": \"string\",\n  \"source_fps\": 0,\n  \"source_name\": \"string\",\n  \"source_type\": \"string\",\n  \"static_content\": [\n    {\n      \"additionalProp1\": {}\n    }\n  ]\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Source Created\",\n  \"response\": null,\n  \"response_code\": 201\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Source"
        ],
        "summary": "Source Create",
        "parameters": [
          {
            "description": "Source Create Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_source.sourceCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/source/delete": {
      "delete": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Source Delete API\n\n*Sample INPUT*\n\n```json\n{\n  \"source_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Source Deleted\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Source"
        ],
        "summary": "Source Delete",
        "parameters": [
          {
            "description": "Source Delete Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_source.sourceIDReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/source/id": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Source ID API\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"source_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Source ID\",\n  \"response\": {\n    \"device_id\": \"string\",\n    \"nimble_id\": \"string\",\n    \"source_address\": \"string\",\n    \"source_channels\": [\n      {\n        \"channel_favorite\": true,\n        \"channel_id\": \"string\",\n        \"channel_key\": \"string\",\n        \"channel_name\": \"string\",\n        \"channel_sid\": \"string\",\n        \"channel_threshold_duration\": 0,\n        \"is_active\": true,\n        \"is_storage\": true,\n        \"is_verified\": true,\n        \"nimble_id\": \"string\",\n        \"pipeline_id\": \"string\",\n        \"source_id\": \"string\",\n        \"usecase_icon\": \"string\",\n        \"usecase_id\": \"string\",\n        \"usecase_key\": \"string\",\n        \"usecase_meta_key\": [\n          \"string\"\n        ],\n        \"usecase_name\": \"string\"\n      }\n    ],\n    \"source_fps\": 0,\n    \"source_id\": \"string\",\n    \"source_name\": \"string\",\n    \"source_type\": \"string\",\n    \"static_content\": [\n      {\n        \"additionalProp1\": {}\n      }\n    ]\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Source"
        ],
        "summary": "Source ID",
        "parameters": [
          {
            "type": "string",
            "description": "Source ID",
            "name": "source_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/internal_api_source.sourceResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "source_channels": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/internal_api_source.channelResp"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/source/list": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Source List API\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"device_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Source List\",\n  \"response\": [\n    {\n      \"device_id\": \"string\",\n      \"nimble_id\": \"string\",\n      \"source_address\": \"string\",\n      \"source_fps\": 0,\n      \"source_id\": \"string\",\n      \"source_name\": \"string\",\n      \"source_type\": \"string\",\n      \"static_content\": [\n        {\n          \"additionalProp1\": {}\n        }\n      ]\n    }\n  ],\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Source"
        ],
        "summary": "Source List",
        "parameters": [
          {
            "type": "string",
            "description": "Device ID",
            "name": "device_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/definitions/internal_api_source.sourceResp"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "source_channels": {
                                "type": "array",
                                "items": {
                                  "$ref": "#/definitions/internal_api_source.channelResp"
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/source/mapping": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Source Mapping API\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"is_default\": \"string\",\n  \"site_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Source List\",\n  \"response\": {\n    \"is_default\": true,\n    \"nimble_address\": \"string\",\n    \"nimble_hostname\": \"string\",\n    \"nimble_id\": \"string\",\n    \"site_id\": \"string\",\n    \"site_name\": \"string\",\n    \"sources\": [\n      {\n        \"device_id\": \"string\",\n        \"nimble_id\": \"string\",\n        \"source_address\": \"string\",\n        \"source_fps\": 0,\n        \"source_id\": \"string\",\n        \"source_name\": \"string\",\n        \"source_type\": \"string\",\n        \"static_content\": [\n          {\n            \"additionalProp1\": {}\n          }\n        ]\n      }\n    ]\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Source"
        ],
        "summary": "Source Mapping",
        "parameters": [
          {
            "type": "string",
            "description": "Include Default Site",
            "name": "is_default",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Specific Site data",
            "name": "site_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/internal_api_source.sourceMappingResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "sources": {
                              "type": "array",
                              "items": {
                                "allOf": [
                                  {
                                    "$ref": "#/definitions/internal_api_source.sourceResp"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "source_channels": {
                                        "type": "array",
                                        "items": {
                                          "$ref": "#/definitions/internal_api_source.channelResp"
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/source/update": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Source Update API\n\n*Sample INPUT*\n\n```json\n{\n  \"device_id\": \"string\",\n  \"nimble_id\": \"string\",\n  \"source_address\": \"string\",\n  \"source_fps\": 0,\n  \"source_name\": \"string\",\n  \"source_type\": \"string\",\n  \"static_content\": [\n    {\n      \"additionalProp1\": {}\n    }\n  ]\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Source Updated\",\n  \"response\": {\n    \"device_id\": \"string\",\n    \"nimble_id\": \"string\",\n    \"source_address\": \"string\",\n    \"source_channels\": [\n      {\n        \"channel_favorite\": true,\n        \"channel_id\": \"string\",\n        \"channel_key\": \"string\",\n        \"channel_name\": \"string\",\n        \"channel_sid\": \"string\",\n        \"channel_threshold_duration\": 0,\n        \"is_active\": true,\n        \"is_storage\": true,\n        \"is_verified\": true,\n        \"nimble_id\": \"string\",\n        \"pipeline_id\": \"string\",\n        \"source_id\": \"string\",\n        \"usecase_icon\": \"string\",\n        \"usecase_id\": \"string\",\n        \"usecase_key\": \"string\",\n        \"usecase_meta_key\": [\n          \"string\"\n        ],\n        \"usecase_name\": \"string\"\n      }\n    ],\n    \"source_fps\": 0,\n    \"source_id\": \"string\",\n    \"source_name\": \"string\",\n    \"source_type\": \"string\",\n    \"static_content\": [\n      {\n        \"additionalProp1\": {}\n      }\n    ]\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Source"
        ],
        "summary": "Source Update",
        "parameters": [
          {
            "description": "Source Update Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_source.sourceCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_source.sourceResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "description": "### Status Check\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"STS Status\",\n  \"response\": {\n    \"auth_providers\": [\n      \"string\"\n    ],\n    \"brand_name\": \"string\",\n    \"desc\": \"string\",\n    \"is_onboarding\": true,\n    \"license_count\": 0,\n    \"nis_module\": true,\n    \"sms_module\": true,\n    \"smtp_module\": true,\n    \"sts_service\": [\n      {\n        \"additionalProp1\": {}\n      }\n    ],\n    \"version\": \"string\"\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Status"
        ],
        "summary": "Status Check",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_status.statusResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/trace/codes": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Trace Codes API\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Trace Codes\",\n  \"response\": [\n    {\n      \"code\": 0,\n      \"type\": \"string\"\n    },\n    {\n      \"code\": 1,\n      \"type\": \"string\"\n    }\n  ],\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Trace"
        ],
        "summary": "Trace Codes",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/internal_api_trace.traceCodesResp"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/trace/range": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Trace Range API\n\n*Sample INPUT*\n\n```json\n{\n  \"start\": \"string\",\n  \"end\": \"string\",\n  \"trace_codes\": [],\n  \"trace_user_ids\": [],\n  \"trace_offset\": \"int\",\n  \"trace_limit\": \"int\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Trace by range\",\n  \"response\": {\n    \"end\": \"string\",\n    \"start\": \"string\",\n    \"total_count\": 0,\n    \"trace_data\": [\n      {\n        \"code\": 0,\n        \"data\": {},\n        \"message\": \"string\",\n        \"time\": \"string\",\n        \"type\": \"string\",\n        \"user\": \"string\"\n      }\n    ]\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Trace"
        ],
        "summary": "Trace By Range",
        "parameters": [
          {
            "type": "string",
            "description": "Trace User ID",
            "name": "trace_user_ids",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Trace Codes",
            "name": "trace_codes",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Channel ID",
            "name": "channel_id",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Trace Offset",
            "name": "trace_offset",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Trace Limit",
            "name": "trace_limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Start Time",
            "name": "start",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "End Time",
            "name": "end",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/internal_api_trace.traceRangeResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "trace_data": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/internal_api_trace.trace"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/trace/transaction": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Transaction List API\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Transactions\",\n  \"response\": {\n    \"transaction_count\": 0,\n    \"transaction_data\": [\n      {\n        \"data\": {},\n        \"message\": \"string\",\n        \"source\": \"string\",\n        \"status\": \"string\",\n        \"time\": \"string\",\n        \"uuid\": \"string\"\n      }\n    ]\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Trace"
        ],
        "summary": "Transaction List",
        "parameters": [
          {
            "type": "integer",
            "description": "Offset",
            "name": "offset",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Limit",
            "name": "limit",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/internal_api_trace.transactionResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "transaction_data": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/internal_api_trace.transaction"
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/trace/transaction/id": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Transaction by UUUID API\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Transaction\",\n  \"response\":  {\n    \"transaction_count\": 0,\n    \"transaction_data\": {\n      \"data\": {},\n      \"message\": \"string\",\n      \"source\": \"string\",\n      \"status\": \"string\",\n      \"time\": \"string\",\n      \"uuid\": \"string\"\n    }\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Trace"
        ],
        "summary": "Transaction By UUID",
        "parameters": [
          {
            "type": "string",
            "description": "Transaction UUID",
            "name": "uuid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/internal_api_trace.transactionResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "transaction_data": {
                              "$ref": "#/definitions/internal_api_trace.transaction"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/usecase/assign": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Usecase Assign API\n\n*Sample INPUT*\n\n```json\n{\n  \"usecase_id\": [\n    \"string\"\n  ],\n  \"user_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Usecase assigned\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "UseCase"
        ],
        "summary": "UseCase Assign",
        "parameters": [
          {
            "description": "UseCase Assign Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_usecase.usecaseAssignReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/usecase/create": {
      "put": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Usecase Create API\n\n*Sample INPUT*\n\n```json\n{\n  \"usecase_background_color\": \"string\",\n  \"usecase_channel_count\": 0,\n  \"usecase_component_key\": \"string\",\n  \"usecase_desc\": \"string\",\n  \"usecase_icon\": \"string\",\n  \"usecase_key\": \"string\",\n  \"usecase_meta_key\": [\n    \"string\"\n  ],\n  \"usecase_name\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Usecase created\",\n  \"response\": null,\n  \"response_code\": 201\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "UseCase"
        ],
        "summary": "UseCase Create",
        "parameters": [
          {
            "description": "UseCase Create Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_usecase.usecaseCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/usecase/delete": {
      "delete": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Usecase Delete API\n\n*Sample INPUT*\n\n```json\n{\n  \"usecase_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Usecase deleted\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "UseCase"
        ],
        "summary": "UseCase Delete",
        "parameters": [
          {
            "description": "UseCase Delete Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_usecase.usecaseReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/usecase/id": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Usecase ID API\n\n*Sample INPUT*\n\n// Query params\n```json\n{\n  \"usecase_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Usecase deleted\",\n  \"response\": {\n    \"usecase_background_color\": \"string\",\n    \"usecase_channel_count\": 0,\n    \"usecase_component_key\": \"string\",\n    \"usecase_desc\": \"string\",\n    \"usecase_icon\": \"string\",\n    \"usecase_id\": \"string\",\n    \"usecase_key\": \"string\",\n    \"usecase_meta_key\": [\n      \"string\"\n    ],\n    \"usecase_name\": \"string\"\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "UseCase"
        ],
        "summary": "UseCase ID",
        "parameters": [
          {
            "type": "string",
            "description": "UseCase ID",
            "name": "usecase_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/sts_internal_api__common.UsecaseResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/usecase/list": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Usecase List API\n\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Usecase list\",\n  \"response\": [\n    {\n      \"usecase_background_color\": \"string\",\n      \"usecase_channel_count\": 0,\n      \"usecase_component_key\": \"string\",\n      \"usecase_desc\": \"string\",\n      \"usecase_icon\": \"string\",\n      \"usecase_id\": \"string\",\n      \"usecase_key\": \"string\",\n      \"usecase_meta_key\": [\n        \"string\"\n      ],\n      \"usecase_name\": \"string\"\n    }\n  ],\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "UseCase"
        ],
        "summary": "UseCase List",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPRespArray"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/sts_internal_api__common.UsecaseResp"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/usecase/stats": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Usecase Stats API\n\n*Sample INPUT*\n\n```json\n{\n  \"details\": true,\n  \"frequency\": \"string\",\n  \"usecase_key\": \"string\",\n  \"usecase_meta_key\": [\n    \"string\"\n  ]\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Usecase deleted\",\n  \"response\":  {\n    \"usecase_channel\": [\n      {\n        \"channel_alert\": {\n          \"channel\": \"string\",\n          \"condition\": \"string\",\n          \"count\": 0,\n          \"key\": \"string\",\n          \"name\": \"string\",\n          \"time\": \"string\"\n        },\n        \"channel_id\": \"string\",\n        \"channel_key\": \"string\",\n        \"channel_name\": \"string\",\n        \"channel_stats\": {\n          \"alert\": 0,\n          \"down\": 0,\n          \"dwell_time\": 0,\n          \"fire\": 0,\n          \"frame_collision\": 0,\n          \"frame_near_miss\": 0,\n          \"high_smoke\": 0,\n          \"ids\": [\n            \"string\"\n          ],\n          \"intermediate_smoke\": 0,\n          \"low_smoke\": 0,\n          \"moving_average_count\": 0,\n          \"non_violation\": 0,\n          \"occupancy\": 0,\n          \"total\": 0,\n          \"total_collision\": 0,\n          \"total_near_miss\": 0,\n          \"up\": 0,\n          \"violation\": 0\n        },\n        \"channel_total_alert\": 0,\n        \"channel_total_notification\": 0,\n        \"usecase_key\": \"string\"\n      }\n    ],\n    \"usecase_key\": \"string\",\n    \"usecase_total_alert\": 0,\n    \"usecase_total_notification\": 0,\n    \"usecase_total_stats\": {\n      \"alert\": 0,\n      \"down\": 0,\n      \"dwell_time\": 0,\n      \"fire\": 0,\n      \"frame_collision\": 0,\n      \"frame_near_miss\": 0,\n      \"high_smoke\": 0,\n      \"ids\": [\n        \"string\"\n      ],\n      \"intermediate_smoke\": 0,\n      \"low_smoke\": 0,\n      \"moving_average_count\": 0,\n      \"non_violation\": 0,\n      \"occupancy\": 0,\n      \"total\": 0,\n      \"total_collision\": 0,\n      \"total_near_miss\": 0,\n      \"up\": 0,\n      \"violation\": 0\n    }\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Analytics"
        ],
        "summary": "UseCase Stats",
        "parameters": [
          {
            "description": "UseCase Stats Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_usecase.usecaseStatReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/sts_internal_api_usecase.usecaseStatResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "usecase_channel": {
                              "type": "array",
                              "items": {
                                "allOf": [
                                  {
                                    "$ref": "#/definitions/sts_internal_api_usecase.channelStatsResp"
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "channel_alert": {
                                        "$ref": "#/definitions/model.AlertData"
                                      },
                                      "channel_stats": {
                                        "$ref": "#/definitions/model.StatsData"
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            "usecase_total_stats": {
                              "$ref": "#/definitions/model.StatsData"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/usecase/stats/report": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Usecase Report API\n\n*Sample INPUT*\n\n```json\n{\n  \"details\": true,\n  \"frequency\": \"string\",\n  \"usecase_key\": \"string\",\n  \"usecase_meta_key\": [\n    \"string\"\n  ]\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"UseCase stats\",\n  \"response\": {\n    \"channel_alert\": {\n      \"channel\": \"string\",\n      \"condition\": \"string\",\n      \"count\": 0,\n      \"key\": \"string\",\n      \"name\": \"string\",\n      \"time\": \"string\"\n    },\n    \"channel_id\": \"string\",\n    \"channel_key\": \"string\",\n    \"channel_name\": \"string\",\n    \"channel_stats\": {\n      \"alert\": 0,\n      \"down\": 0,\n      \"dwell_time\": 0,\n      \"fire\": 0,\n      \"frame_collision\": 0,\n      \"frame_near_miss\": 0,\n      \"high_smoke\": 0,\n      \"ids\": [\n        \"string\"\n      ],\n      \"intermediate_smoke\": 0,\n      \"is_intersected\": 0,\n      \"low_smoke\": 0,\n      \"moving_average_count\": 0,\n      \"non_violation\": 0,\n      \"not_intersected\": 0,\n      \"occupancy\": 0,\n      \"total\": 0,\n      \"total_collision\": 0,\n      \"total_near_miss\": 0,\n      \"up\": 0,\n      \"violation\": 0\n    },\n    \"channel_total_alert\": 0,\n    \"channel_total_notification\": 0,\n    \"usecase_key\": \"string\"\n  },\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Analytics"
        ],
        "summary": "UseCase Report",
        "parameters": [
          {
            "description": "UseCase Stats Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sts_internal_api_usecase.usecaseReportReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "allOf": [
                        {
                          "$ref": "#/definitions/sts_internal_api_usecase.channelStatsResp"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "channel_alert": {
                              "$ref": "#/definitions/model.AlertData"
                            },
                            "channel_stats": {
                              "$ref": "#/definitions/model.StatsData"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/usecase/unassign": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Usecase UnAssign API\n\n*Sample INPUT*\n\n```json\n{\n  \"usecase_id\": [\n    \"string\"\n  ],\n  \"user_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Usecase un-assigned\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "UseCase"
        ],
        "summary": "UseCase UnAssign",
        "parameters": [
          {
            "description": "UseCase UnAssign Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_usecase.usecaseUnAssignReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/usecase/update": {
      "patch": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Usecase Update API\n\n*Sample INPUT*\n\n```json\n{\n  \"usecase_background_color\": \"string\",\n  \"usecase_channel_count\": 0,\n  \"usecase_component_key\": \"string\",\n  \"usecase_desc\": \"string\",\n  \"usecase_icon\": \"string\",\n  \"usecase_id\": \"string\",\n  \"usecase_key\": \"string\",\n  \"usecase_meta_key\": [\n    \"string\"\n  ],\n  \"usecase_name\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n {\n  \"message\": \"Usecase updated\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "UseCase"
        ],
        "summary": "UseCase Update",
        "parameters": [
          {
            "description": "UseCase Update Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_usecase.usecaseUpdateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/user/mobile/token": {
      "put": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### User Auth with return Access token\n\n*Sample INPUT*\n\n```json\n{\n  \"uuid\": \"string\",\n  \"mobile_token\": \"string\",\n  \"mobile_type\": \"string\",\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Mobile token created successfully\",\n  \"response\": {},\n  \"response_code\": 201\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "User Push Token Create",
        "parameters": [
          {
            "description": "User Push Token Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_user.userPushTokenReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### User Delete Push Token\r\n\r\n*Sample INPUT*\r\n\r\n```json\r\n{\r\n  \"mobile_token\": \"string\"\r\n}\r\n```\r\n\r\n*Sample OUTPUT*\r\n\r\n```json\r\n{\r\n  \"message\": \"Mobile token deleted\",\r\n  \"response\": {},\r\n  \"response_code\": 200\r\n}\r\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "User Push Token Delete",
        "parameters": [
          {
            "description": "User Push Token Delete Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_user.userPushTokenDeleteReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/user/notification/delete": {
      "delete": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### User Notification delete\n\n*Sample Input*\n\n```json\n{\n  \"user_uuid\": \"string\",\n  \"notification_uuid\": \"string\"\n}\n```\n\n*Sample Output*\n```json\n{\n  \"message\": \"Notification deleted\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "User Notification Delete",
        "parameters": [
          {
            "description": "User Delete Notification Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_user.userNotificationReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/user/notification/filter": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### User Notification filter\n\n*Sample Input*\n\n```json\n    {\n  \"user_uuid\": \"string\",\n  \"start\": \"string\",\n  \"end\": \"string\",\n  \"is_deleted\": false,\n  \"limit\": false,\n  \"offset\": false\n}\n```\n\n*Sample Output*\n```json\n{\n  \"message\": \"Notification by range\",\n  \"response\": {\n    \"user_uuid\": \"string\",\n    \"total_notifications\": 0,\n    \"user_notifications\": [\n      {\n        \"notification_uuid\": \"string\",\n        \"instance_id\": \"string\",\n        \"rule_uuid\": \"string\",\n        \"notification_url\": \"string\",\n        \"images\": [\"https://www.example.com/icon.png\"],\n        \"rule_expression\": \"string\",\n        \"is_read\": false,\n        \"notification_time\": \"string\",\n        \"message\": \"string\"\n      }\n    ]\n  },\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "User Notification Filter",
        "parameters": [
          {
            "description": "User Notification Range Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_user.userNotificationFetchReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/user/notification/read": {
      "put": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### User Notification read\n\n*Sample Input*\n\n```json\n{\n  \"user_uuid\": \"string\",\n  \"notification_uuid\": \"string\"\n}\n```\n\n*Sample Output*\n```json\n{\n  \"message\": \"Notification updated\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "User Notification Read",
        "parameters": [
          {
            "description": "User Read Notification Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_user.userNotificationReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/user/notification/uuid": {
      "get": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### User Notification By UUID\n\n*Sample Input*\n\n```json\n{\n  \"notification_uuid\": \"string\"\n}\n```\n\n*Sample Output*\n```json\n{\n  \"message\": \"Notification by uuid\",\n  \"response\": {\n    \"notification_uuid\": \"string\",\n    \"instance_id\": \"string\",\n    \"rule_uuid\": \"string\",\n    \"notification_url\": \"string\",\n    \"images\": [\n      \"https://www.example.com/icon.png\"\n    ],\n    \"rule_expression\": \"string\",\n    \"is_read\": false,\n    \"notification_time\": \"string\",\n    \"message\": \"string\"\n  },\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "User Notification By UUID",
        "parameters": [
          {
            "type": "string",
            "description": "Notification ID",
            "name": "notification_uuid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/user/session/check": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### User Session Check\n\n*Sample INPUT*\n\n```json\n{\n  \"user_uuid\": \"string\",\n  \"exchange_token\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"Session valid\",\n  \"response\": {\n    \"data\": {}\n  },\n  \"response_code\": 200\n}\n\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "User Session Check",
        "parameters": [
          {
            "description": "User Sync Remove Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_user.userSessionCheckReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/user/session/init": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### User Session Init\n\n*Sample INPUT*\n\n```json\n{\n  \"instance_id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"User sessions\",\n  \"response\": {\n    \"exchange_token\": \"string\"\n  },\n  \"response_code\": 200\n}\n\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "User Session Init",
        "parameters": [
          {
            "description": "User Session Init Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_user.userSessionInitReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_user.userSessionInitResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/user/sync/create": {
      "put": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### New User Sync Create\n\n*Sample INPUT*\n\n```json\n{\n  \"id\": \"string\",\n  \"first_name\": \"string\",\n  \"last_name\": \"string\",\n  \"user_name\": \"string\",\n  \"avatar\": \"string\",\n  \"image\": \"string\",\n  \"email\": \"string\",\n  \"hash\": \"string\",\n  \"password\": \"string\",\n  \"is_active\": false,\n  \"is_verified\": false,\n  \"o_auth2_uid\": \"string\",\n  \"o_auth2_provider\": \"string\",\n  \"last_logged_in_at\": \"string\",\n  \"last_attempt\": \"string\",\n  \"created_at\": \"string\",\n  \"updated_at\": \"string\",\n  \"confirm_selector\": \"string\",\n  \"confirm_verifier\": \"string\",\n  \"confirmed\": false,\n  \"attempt_count\": 0,\n  \"locked\": false,\n  \"recover_selector\": \"string\",\n  \"recover_verifier\": \"string\",\n  \"recover_token_expiry\": \"string\",\n  \"o_auth2_accessToken\": \"string\",\n  \"o_auth2_refreshToken\": \"string\",\n  \"o_auth2_expiry\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"User created successfully\",\n  \"response\": {},\n  \"response_code\": 201\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "User Sync",
        "parameters": [
          {
            "description": "User Sync Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_user.userSyncCreateReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {
                      "$ref": "#/definitions/internal_api_user.userUpdateConfigResp"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    },
    "/user/sync/remove": {
      "post": {
        "security": [
          {
            "OAuth2Application": []
          }
        ],
        "description": "### Remove User Sync\n\n*Sample INPUT*\n\n```json\n{\n  \"id\": \"string\"\n}\n```\n\n*Sample OUTPUT*\n\n```json\n{\n  \"message\": \"User Deleted\",\n  \"response\": null,\n  \"response_code\": 200\n}\n```",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "User"
        ],
        "summary": "User Remove Sync",
        "parameters": [
          {
            "description": "User Session Check Payload",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/internal_api_user.userSyncRemoveReq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPResp"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/structs.HTTPError"
                },
                {
                  "type": "object",
                  "properties": {
                    "response": {}
                  }
                }
              ]
            }
          }
        }
      }
    }
  },
  "definitions": {
    "internal_api_acl.component": {
      "type": "object",
      "properties": {
        "component_key": {
          "type": "integer"
        },
        "component_name": {
          "type": "string"
        }
      }
    },
    "internal_api_acl.moduleResp": {
      "type": "object",
      "properties": {
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/internal_api_acl.component"
          }
        },
        "module_key": {
          "type": "string"
        },
        "module_name": {
          "type": "string"
        },
        "module_path": {
          "type": "string"
        }
      }
    },
    "internal_api_alert.alertActivateDeActivateReq": {
      "type": "object",
      "required": [
        "alert_id",
        "channel_id"
      ],
      "properties": {
        "alert_id": {
          "type": "string"
        },
        "channel_id": {
          "type": "string"
        }
      }
    },
    "internal_api_alert.alertCreateReq": {
      "type": "object",
      "required": [
        "alert_expression",
        "alert_frequency",
        "alert_name",
        "alert_priority",
        "channel_id"
      ],
      "properties": {
        "alert_expression": {
          "type": "string"
        },
        "alert_frequency": {
          "type": "integer",
          "maximum": 86400,
          "minimum": 0
        },
        "alert_name": {
          "type": "string"
        },
        "alert_priority": {
          "type": "integer"
        },
        "channel_id": {
          "type": "string"
        }
      }
    },
    "internal_api_alert.alertIDReq": {
      "type": "object",
      "required": [
        "alert_id"
      ],
      "properties": {
        "alert_id": {
          "type": "string"
        }
      }
    },
    "internal_api_alert.alertListBySiteReq": {
      "type": "object",
      "required": [
        "site_id"
      ],
      "properties": {
        "site_id": {
          "type": "string"
        }
      }
    },
    "internal_api_alert.alertListReq": {
      "type": "object",
      "required": [
        "channel_id"
      ],
      "properties": {
        "channel_id": {
          "type": "string"
        }
      }
    },
    "internal_api_alert.alertUUIDReq": {
      "type": "object",
      "required": [
        "alert_uuid"
      ],
      "properties": {
        "alert_uuid": {
          "type": "string"
        }
      }
    },
    "internal_api_alert.alertUpdateReq": {
      "type": "object",
      "required": [
        "alert_expression",
        "alert_frequency",
        "alert_id",
        "alert_name",
        "alert_priority",
        "channel_id"
      ],
      "properties": {
        "alert_expression": {
          "type": "string"
        },
        "alert_frequency": {
          "type": "integer",
          "maximum": 86400,
          "minimum": 0
        },
        "alert_id": {
          "type": "string"
        },
        "alert_name": {
          "type": "string"
        },
        "alert_priority": {
          "type": "integer"
        },
        "channel_id": {
          "type": "string"
        }
      }
    },
    "internal_api_alert.event": {
      "type": "object",
      "properties": {
        "alert": {
          "type": "integer"
        },
        "alert_uuids": {
          "type": "string"
        },
        "condition": {
          "type": "string"
        },
        "down": {
          "type": "integer"
        },
        "dwell_time": {
          "type": "integer"
        },
        "fire": {
          "type": "integer"
        },
        "frame_collision": {
          "type": "integer"
        },
        "frame_near_miss": {
          "type": "integer"
        },
        "high_smoke": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "intermediate_smoke": {
          "type": "integer"
        },
        "is_intersected": {
          "type": "integer"
        },
        "low_smoke": {
          "type": "integer"
        },
        "metadata": {
          "type": "string"
        },
        "moving_average_count": {
          "type": "integer"
        },
        "non_violation": {
          "type": "integer"
        },
        "not_intersected": {
          "type": "integer"
        },
        "occupancy": {
          "type": "integer"
        },
        "time": {
          "type": "string"
        },
        "total": {
          "type": "integer"
        },
        "total_collision": {
          "type": "integer"
        },
        "total_count": {
          "type": "integer"
        },
        "total_near_miss": {
          "type": "integer"
        },
        "up": {
          "type": "integer"
        },
        "violation": {
          "type": "integer"
        }
      }
    },
    "internal_api_alert.eventRangeResp": {
      "type": "object",
      "properties": {
        "agg_frequency": {
          "type": "string"
        },
        "channel_id": {
          "type": "string"
        },
        "end": {
          "type": "string"
        },
        "event_limit": {
          "type": "integer"
        },
        "event_offset": {
          "type": "integer"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/internal_api_alert.event"
          }
        },
        "start": {
          "type": "string"
        },
        "usecase_key": {
          "type": "string"
        }
      }
    },
    "internal_api_bundle.defaultConfigReqSet": {
      "type": "object",
      "required": [
        "bundle_data",
        "bundle_usecase"
      ],
      "properties": {
        "bundle_data": {
          "type": "object",
          "additionalProperties": true
        },
        "bundle_usecase": {
          "type": "string"
        }
      }
    },
    "internal_api_channel.channelAssignReq": {
      "type": "object",
      "required": [
        "channel_id",
        "user_id"
      ],
      "properties": {
        "channel_id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "internal_api_channel.channelCreateReq": {
      "type": "object",
      "required": [
        "channel_name",
        "nimble_id",
        "pipeline_id",
        "site_id",
        "source_id",
        "usecase_key"
      ],
      "properties": {
        "channel_name": {
          "type": "string"
        },
        "nimble_id": {
          "type": "string"
        },
        "pipeline_id": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        },
        "source_id": {
          "type": "string"
        },
        "usecase_key": {
          "type": "string"
        }
      }
    },
    "internal_api_channel.channelListReq": {
      "type": "object",
      "properties": {
        "nimble_id": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        },
        "usecase_key": {
          "type": "string"
        }
      }
    },
    "internal_api_channel.channelRefactorReq": {
      "type": "object",
      "required": [
        "device_id",
        "nimble_id"
      ],
      "properties": {
        "device_id": {
          "type": "string"
        },
        "nimble_id": {
          "type": "string"
        }
      }
    },
    "internal_api_channel.channelStatusReq": {
      "type": "object",
      "required": [
        "channel_id"
      ],
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "is_force": {
          "type": "boolean"
        }
      }
    },
    "internal_api_channel.channelStatusResp": {
      "type": "object",
      "properties": {
        "is_active": {
          "type": "boolean"
        },
        "is_auto_recovery": {
          "type": "boolean"
        },
        "is_storage": {
          "type": "boolean"
        },
        "is_verified": {
          "type": "boolean"
        }
      }
    },
    "internal_api_channel.channelUnAssignReq": {
      "type": "object",
      "required": [
        "channel_id",
        "user_id"
      ],
      "properties": {
        "channel_id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "internal_api_channel.channelUpdateReq": {
      "type": "object",
      "required": [
        "channel_id",
        "channel_name",
        "is_auto_recovery",
        "usecase_key"
      ],
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "channel_name": {
          "type": "string"
        },
        "channel_pipeline": {
          "$ref": "#/definitions/internal_api_channel.pipelineUpdateReq"
        },
        "is_auto_recovery": {
          "type": "boolean"
        },
        "is_force": {
          "type": "boolean"
        },
        "usecase_key": {
          "type": "string"
        }
      }
    },
    "internal_api_channel.pipelineUpdateReq": {
      "type": "object",
      "properties": {
        "nimble_id": {
          "type": "string"
        },
        "pipeline_elements": {
          "type": "object",
          "additionalProperties": true
        },
        "pipeline_id": {
          "type": "string"
        },
        "pipeline_name": {
          "type": "string"
        },
        "pipeline_reference_key": {
          "type": "integer"
        },
        "pipeline_source": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "pipeline_usecase": {
          "type": "string"
        }
      }
    },
    "internal_api_config.backupResponse": {
      "type": "object",
      "properties": {
        "influx_backup": {
          "type": "string"
        },
        "mongo_backup": {
          "type": "string"
        }
      }
    },
    "internal_api_config.channelStorageData": {
      "type": "object",
      "required": [
        "channel_ids",
        "site_id"
      ],
      "properties": {
        "channel_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "site_id": {
          "type": "string"
        }
      }
    },
    "internal_api_config.channelStorageDeleteReq": {
      "type": "object",
      "properties": {
        "purge_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/internal_api_config.channelStorageData"
          }
        }
      }
    },
    "internal_api_config.settingInitResp": {
      "type": "object"
    },
    "internal_api_config.smsConfResp": {
      "type": "object",
      "properties": {
        "is_default": {
          "type": "boolean"
        },
        "sms_from": {
          "type": "string"
        },
        "sms_key": {
          "type": "string"
        },
        "sms_name": {
          "type": "string"
        },
        "sms_provider": {
          "type": "string"
        },
        "sms_relay_id": {
          "type": "string"
        },
        "sms_to": {
          "type": "string"
        },
        "sms_token": {
          "type": "string"
        }
      }
    },
    "internal_api_config.smsConfTestReq": {
      "type": "object",
      "properties": {
        "sms_from": {
          "type": "string"
        },
        "sms_relay_id": {
          "type": "string"
        },
        "sms_to": {
          "type": "string"
        }
      }
    },
    "internal_api_config.smtpConfCreateReq": {
      "type": "object",
      "required": [
        "smtp_attachment",
        "smtp_auth",
        "smtp_from",
        "smtp_host",
        "smtp_name",
        "smtp_password",
        "smtp_port",
        "smtp_to",
        "smtp_username"
      ],
      "properties": {
        "smtp_attachment": {
          "type": "boolean"
        },
        "smtp_auth": {
          "type": "boolean"
        },
        "smtp_from": {
          "type": "string"
        },
        "smtp_host": {
          "type": "string"
        },
        "smtp_name": {
          "type": "string"
        },
        "smtp_password": {
          "type": "string"
        },
        "smtp_port": {
          "type": "integer"
        },
        "smtp_to": {
          "type": "string"
        },
        "smtp_username": {
          "type": "string"
        }
      }
    },
    "internal_api_config.smtpConfDeleteReq": {
      "type": "object",
      "required": [
        "smtp_relay_id"
      ],
      "properties": {
        "smtp_relay_id": {
          "type": "string"
        }
      }
    },
    "internal_api_config.smtpConfResp": {
      "type": "object",
      "properties": {
        "is_default": {
          "type": "boolean"
        },
        "smtp_attachment": {
          "type": "boolean"
        },
        "smtp_auth": {
          "type": "boolean"
        },
        "smtp_from": {
          "type": "string"
        },
        "smtp_host": {
          "type": "string"
        },
        "smtp_name": {
          "type": "string"
        },
        "smtp_password": {
          "type": "string"
        },
        "smtp_port": {
          "type": "integer"
        },
        "smtp_relay_id": {
          "type": "string"
        },
        "smtp_to": {
          "type": "string"
        },
        "smtp_username": {
          "type": "string"
        }
      }
    },
    "internal_api_config.smtpConfTestReq": {
      "type": "object",
      "properties": {
        "smtp_from": {
          "type": "string"
        },
        "smtp_relay_id": {
          "type": "string"
        },
        "smtp_to": {
          "type": "string"
        }
      }
    },
    "internal_api_config.smtpConfUpdateReq": {
      "type": "object",
      "required": [
        "is_default",
        "smtp_attachment",
        "smtp_auth",
        "smtp_from",
        "smtp_host",
        "smtp_name",
        "smtp_password",
        "smtp_port",
        "smtp_relay_id",
        "smtp_to",
        "smtp_username"
      ],
      "properties": {
        "is_default": {
          "type": "boolean"
        },
        "smtp_attachment": {
          "type": "boolean"
        },
        "smtp_auth": {
          "type": "boolean"
        },
        "smtp_from": {
          "type": "string"
        },
        "smtp_host": {
          "type": "string"
        },
        "smtp_name": {
          "type": "string"
        },
        "smtp_password": {
          "type": "string"
        },
        "smtp_port": {
          "type": "integer"
        },
        "smtp_relay_id": {
          "type": "string"
        },
        "smtp_to": {
          "type": "string"
        },
        "smtp_username": {
          "type": "string"
        }
      }
    },
    "internal_api_config.statusAccountStorageResp": {
      "type": "object",
      "properties": {
        "account_info": {}
      }
    },
    "internal_api_config.storageConfigReq": {
      "type": "object",
      "required": [
        "notification_types",
        "purge_frequency",
        "purge_threshold"
      ],
      "properties": {
        "notification_types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "purge_frequency": {
          "type": "integer"
        },
        "purge_threshold": {
          "type": "integer"
        }
      }
    },
    "internal_api_customer.customerAddress": {
      "type": "object",
      "required": [
        "customer_city",
        "customer_country",
        "customer_state",
        "customer_zip"
      ],
      "properties": {
        "customer_area": {
          "type": "string"
        },
        "customer_city": {
          "type": "string"
        },
        "customer_country": {
          "type": "string"
        },
        "customer_state": {
          "type": "string"
        },
        "customer_street": {
          "type": "string"
        },
        "customer_unit": {
          "type": "string"
        },
        "customer_zip": {
          "type": "string"
        }
      }
    },
    "internal_api_customer.customerAssignReq": {
      "type": "object",
      "required": [
        "customer_id",
        "user_id"
      ],
      "properties": {
        "customer_id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "internal_api_customer.customerCreateReq": {
      "type": "object",
      "required": [
        "customer_address",
        "customer_icon",
        "customer_image",
        "customer_key",
        "customer_name",
        "organization_id"
      ],
      "properties": {
        "customer_address": {
          "$ref": "#/definitions/internal_api_customer.customerAddress"
        },
        "customer_contact": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customer_description": {
          "type": "string"
        },
        "customer_icon": {
          "type": "string"
        },
        "customer_image": {
          "type": "string"
        },
        "customer_key": {
          "type": "string"
        },
        "customer_name": {
          "type": "string"
        },
        "customer_sites": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customer_type": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        }
      }
    },
    "internal_api_customer.customerIDReq": {
      "type": "object",
      "required": [
        "customer_id"
      ],
      "properties": {
        "customer_id": {
          "type": "string"
        }
      }
    },
    "internal_api_customer.customerResp": {
      "type": "object",
      "required": [
        "customer_address",
        "customer_icon",
        "customer_id",
        "customer_image",
        "customer_key",
        "customer_name",
        "organization_id"
      ],
      "properties": {
        "customer_address": {
          "$ref": "#/definitions/internal_api_customer.customerAddress"
        },
        "customer_contact": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customer_description": {
          "type": "string"
        },
        "customer_icon": {
          "type": "string"
        },
        "customer_id": {
          "type": "string"
        },
        "customer_image": {
          "type": "string"
        },
        "customer_key": {
          "type": "string"
        },
        "customer_name": {
          "type": "string"
        },
        "customer_sites": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customer_type": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        }
      }
    },
    "internal_api_customer.customerSiteAssignReq": {
      "type": "object",
      "required": [
        "customer_id",
        "site_ids"
      ],
      "properties": {
        "customer_id": {
          "type": "string"
        },
        "site_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "internal_api_customer.customerUpdateReq": {
      "type": "object",
      "required": [
        "customer_address",
        "customer_icon",
        "customer_id",
        "customer_image",
        "customer_key",
        "customer_name",
        "organization_id"
      ],
      "properties": {
        "customer_address": {
          "$ref": "#/definitions/internal_api_customer.customerAddress"
        },
        "customer_contact": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customer_description": {
          "type": "string"
        },
        "customer_icon": {
          "type": "string"
        },
        "customer_id": {
          "type": "string"
        },
        "customer_image": {
          "type": "string"
        },
        "customer_key": {
          "type": "string"
        },
        "customer_name": {
          "type": "string"
        },
        "customer_sites": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customer_type": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        }
      }
    },
    "internal_api_device.deviceCreateReq": {
      "type": "object",
      "required": [
        "device_identifier",
        "device_name",
        "device_tags",
        "device_type",
        "nimble_id",
        "site_id"
      ],
      "properties": {
        "device_identifier": {
          "type": "string"
        },
        "device_image": {
          "type": "string"
        },
        "device_name": {
          "type": "string"
        },
        "device_streams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api__common.DeviceStream"
          }
        },
        "device_tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "device_type": {
          "type": "string"
        },
        "device_uuid": {
          "type": "string"
        },
        "nimble_id": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        }
      }
    },
    "internal_api_device.deviceDeleteReq": {
      "type": "object",
      "required": [
        "device_id"
      ],
      "properties": {
        "device_id": {
          "type": "string"
        }
      }
    },
    "internal_api_device.deviceUpdateReq": {
      "type": "object",
      "required": [
        "device_id",
        "device_identifier",
        "device_name",
        "device_tags",
        "device_type",
        "nimble_id",
        "site_id"
      ],
      "properties": {
        "device_id": {
          "type": "string"
        },
        "device_identifier": {
          "type": "string"
        },
        "device_image": {
          "type": "string"
        },
        "device_name": {
          "type": "string"
        },
        "device_streams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api__common.DeviceStream"
          }
        },
        "device_tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "device_type": {
          "type": "string"
        },
        "device_uuid": {
          "type": "string"
        },
        "nimble_id": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        }
      }
    },
    "internal_api_device.staticContentCreateReq": {
      "type": "object",
      "required": [
        "id",
        "source_id",
        "static_content_data",
        "static_content_name",
        "static_content_type"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "source_id": {
          "type": "string"
        },
        "static_content_data": {
          "type": "object",
          "additionalProperties": true
        },
        "static_content_name": {
          "type": "string"
        },
        "static_content_type": {
          "type": "string"
        }
      }
    },
    "internal_api_device.staticContentIDReq": {
      "type": "object",
      "required": [
        "static_content_id"
      ],
      "properties": {
        "static_content_id": {
          "type": "string"
        }
      }
    },
    "internal_api_device.staticContentResp": {
      "type": "object",
      "required": [
        "id",
        "source_id",
        "static_content_data",
        "static_content_name",
        "static_content_type"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "source_id": {
          "type": "string"
        },
        "static_content_data": {
          "type": "object",
          "additionalProperties": true
        },
        "static_content_id": {
          "type": "string"
        },
        "static_content_name": {
          "type": "string"
        },
        "static_content_type": {
          "type": "string"
        }
      }
    },
    "internal_api_device.staticContentUpdateReq": {
      "type": "object",
      "required": [
        "id",
        "source_id",
        "static_content_data",
        "static_content_id",
        "static_content_name",
        "static_content_type"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "source_id": {
          "type": "string"
        },
        "static_content_data": {
          "type": "object",
          "additionalProperties": true
        },
        "static_content_id": {
          "type": "string"
        },
        "static_content_name": {
          "type": "string"
        },
        "static_content_type": {
          "type": "string"
        }
      }
    },
    "internal_api_instance.instanceCreateReq": {
      "type": "object",
      "required": [
        "instance_auth_url",
        "instance_base_url",
        "instance_name",
        "instance_uuid",
        "instance_version"
      ],
      "properties": {
        "instance_auth_url": {
          "type": "string"
        },
        "instance_base_url": {
          "type": "string"
        },
        "instance_desc": {
          "type": "string"
        },
        "instance_image": {
          "type": "string"
        },
        "instance_name": {
          "type": "string"
        },
        "instance_uuid": {
          "type": "string"
        },
        "instance_version": {
          "type": "string"
        }
      }
    },
    "internal_api_instance.instanceNotificationSendReq": {
      "type": "object",
      "properties": {
        "instance_attachments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instance_notification": {
          "$ref": "#/definitions/internal_api_instance.notificationData"
        }
      }
    },
    "internal_api_instance.instanceUpdateReq": {
      "type": "object",
      "properties": {
        "instance_image": {
          "type": "string"
        },
        "instance_name": {
          "type": "string"
        }
      }
    },
    "internal_api_instance.instanceUsageProcessReq": {
      "type": "object",
      "required": [
        "bucket",
        "filename",
        "object"
      ],
      "properties": {
        "bucket": {
          "type": "string"
        },
        "filename": {
          "type": "string"
        },
        "object": {
          "type": "string"
        }
      }
    },
    "internal_api_instance.notificationData": {
      "type": "object",
      "properties": {
        "action": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.Action"
          }
        },
        "action_uuid": {
          "type": "string"
        },
        "customer_name": {
          "type": "string"
        },
        "extra_data": {
          "type": "object",
          "additionalProperties": true
        },
        "image_url": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "notification_url": {
          "type": "string"
        },
        "rule_expression": {
          "type": "string"
        },
        "rule_name": {
          "type": "string"
        },
        "rule_uuid": {
          "type": "string"
        },
        "site_name": {
          "type": "string"
        }
      }
    },
    "internal_api_license.licenseCreateReq": {
      "type": "object",
      "required": [
        "license_customer"
      ],
      "properties": {
        "license_customer": {
          "type": "string"
        },
        "license_name": {
          "type": "string"
        }
      }
    },
    "internal_api_license.licenseResp": {
      "type": "object",
      "properties": {
        "license_created_at": {
          "type": "string"
        },
        "license_customer": {
          "type": "string"
        },
        "license_expires_at": {
          "type": "string"
        },
        "license_id": {
          "type": "string"
        },
        "license_name": {
          "type": "string"
        },
        "license_status": {
          "type": "object",
          "additionalProperties": true
        },
        "license_updated_at": {
          "type": "string"
        },
        "license_uuid": {
          "type": "string"
        }
      }
    },
    "internal_api_license.licenseStatusReq": {
      "type": "object",
      "required": [
        "license_id"
      ],
      "properties": {
        "license_id": {
          "type": "string"
        }
      }
    },
    "internal_api_license.licenseUpdateReq": {
      "type": "object",
      "required": [
        "license_customer",
        "license_id"
      ],
      "properties": {
        "license_customer": {
          "type": "string"
        },
        "license_id": {
          "type": "string"
        },
        "license_name": {
          "type": "string"
        }
      }
    },
    "internal_api_nimble.licenseResp": {
      "type": "object",
      "properties": {
        "license_created_at": {
          "type": "string"
        },
        "license_customer": {
          "type": "string"
        },
        "license_expires_at": {
          "type": "string"
        },
        "license_id": {
          "type": "string"
        },
        "license_name": {
          "type": "string"
        },
        "license_status": {
          "type": "object",
          "additionalProperties": true
        },
        "license_updated_at": {
          "type": "string"
        },
        "license_uuid": {
          "type": "string"
        }
      }
    },
    "internal_api_nimble.nimbleCreateReq": {
      "type": "object",
      "required": [
        "license_id",
        "nimble_address",
        "nimble_is_secure",
        "nimble_name",
        "nimble_port",
        "nimble_retry",
        "nimble_timeout"
      ],
      "properties": {
        "license_id": {
          "type": "string"
        },
        "nimble_address": {
          "type": "string"
        },
        "nimble_is_secure": {
          "type": "boolean"
        },
        "nimble_key": {
          "type": "string"
        },
        "nimble_name": {
          "type": "string"
        },
        "nimble_port": {
          "type": "integer"
        },
        "nimble_retry": {
          "$ref": "#/definitions/internal_api_nimble.nimbleRetryConfig"
        },
        "nimble_timeout": {
          "type": "string"
        },
        "site_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "internal_api_nimble.nimbleLicenseUpsertReq": {
      "type": "object",
      "required": [
        "license_id"
      ],
      "properties": {
        "license_id": {
          "type": "string"
        }
      }
    },
    "internal_api_nimble.nimbleResp": {
      "type": "object",
      "properties": {
        "license": {
          "$ref": "#/definitions/internal_api_nimble.licenseResp"
        },
        "nimble_address": {
          "type": "string"
        },
        "nimble_api_version": {
          "type": "string"
        },
        "nimble_created_at": {
          "type": "string"
        },
        "nimble_device_types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nimble_hash": {
          "type": "string"
        },
        "nimble_host_name": {
          "type": "string"
        },
        "nimble_id": {
          "type": "string"
        },
        "nimble_is_active": {
          "type": "boolean"
        },
        "nimble_is_override": {
          "type": "boolean"
        },
        "nimble_is_secure": {
          "type": "boolean"
        },
        "nimble_is_statistics": {
          "type": "boolean"
        },
        "nimble_key": {
          "type": "string"
        },
        "nimble_name": {
          "type": "string"
        },
        "nimble_port": {
          "type": "integer"
        },
        "nimble_retry": {
          "$ref": "#/definitions/internal_api_nimble.nimbleRetryConfig"
        },
        "nimble_routes": {
          "type": "object",
          "additionalProperties": true
        },
        "nimble_status": {
          "type": "integer"
        },
        "nimble_timeout": {
          "type": "string"
        },
        "nimble_updated_at": {
          "type": "string"
        },
        "nimble_version": {
          "type": "string"
        },
        "site_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "transaction_id": {
          "type": "string"
        }
      }
    },
    "internal_api_nimble.nimbleRetryConfig": {
      "type": "object",
      "required": [
        "disable_backoff",
        "times",
        "wait_base"
      ],
      "properties": {
        "disable_backoff": {
          "type": "boolean"
        },
        "times": {
          "type": "integer"
        },
        "wait_base": {
          "type": "integer"
        }
      }
    },
    "internal_api_nimble.nimbleStats": {
      "type": "object",
      "properties": {
        "cpu": {
          "type": "number"
        },
        "mem_physical": {
          "type": "integer"
        },
        "mem_virtual": {
          "type": "integer"
        },
        "time": {
          "type": "string"
        }
      }
    },
    "internal_api_nimble.nimbleStatsResp": {
      "type": "object",
      "properties": {
        "nimble_id": {
          "type": "string"
        },
        "nimble_stats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/internal_api_nimble.nimbleStats"
          }
        },
        "nimble_uptime": {
          "type": "number"
        }
      }
    },
    "internal_api_nimble.nimbleStatusReq": {
      "type": "object",
      "required": [
        "nimble_id"
      ],
      "properties": {
        "nimble_id": {
          "type": "string"
        },
        "nimble_is_override": {
          "type": "boolean"
        }
      }
    },
    "internal_api_nimble.nimbleUpdateReq": {
      "type": "object",
      "required": [
        "license_id",
        "nimble_address",
        "nimble_id",
        "nimble_is_secure",
        "nimble_name",
        "nimble_port",
        "nimble_retry",
        "nimble_timeout"
      ],
      "properties": {
        "license_id": {
          "type": "string"
        },
        "nimble_address": {
          "type": "string"
        },
        "nimble_id": {
          "type": "string"
        },
        "nimble_is_secure": {
          "type": "boolean"
        },
        "nimble_key": {
          "type": "string"
        },
        "nimble_name": {
          "type": "string"
        },
        "nimble_port": {
          "type": "integer"
        },
        "nimble_retry": {
          "$ref": "#/definitions/internal_api_nimble.nimbleRetryConfig"
        },
        "nimble_timeout": {
          "type": "string"
        },
        "site_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "internal_api_notification.notificationRangeResp": {
      "type": "object",
      "properties": {
        "end": {
          "type": "string"
        },
        "notifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/internal_api_notification.notificationUUIDResp"
          }
        },
        "rule_uuid": {
          "description": "UseCase       string                 `json:\"usecase_key\"`\nChannelID     string                 `json:\"channel_id\"`",
          "type": "string"
        },
        "start": {
          "type": "string"
        }
      }
    },
    "internal_api_notification.notificationStatResp": {
      "type": "object",
      "properties": {
        "usecase_channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api__common.EventStatsResp"
          }
        },
        "usecase_key": {
          "type": "string"
        },
        "usecase_total_alert": {
          "type": "integer"
        },
        "usecase_total_notification": {
          "type": "integer"
        },
        "usecase_total_stats": {
          "$ref": "#/definitions/sts_internal_api__common.Stats"
        }
      }
    },
    "internal_api_notification.notificationUUIDResp": {
      "type": "object",
      "properties": {
        "notification_data": {
          "$ref": "#/definitions/structs.DefaultEmail"
        },
        "notification_extra": {
          "type": "string"
        },
        "notification_time": {
          "type": "string"
        },
        "notification_uuid": {
          "type": "string"
        },
        "rule_uuid": {
          "type": "string"
        },
        "total_count": {
          "type": "integer"
        }
      }
    },
    "internal_api_organization.geoLocation": {
      "type": "object",
      "required": [
        "lat",
        "long"
      ],
      "properties": {
        "lat": {
          "type": "number"
        },
        "long": {
          "type": "number"
        }
      }
    },
    "internal_api_organization.organizationAddress": {
      "type": "object",
      "required": [
        "organization_area",
        "organization_city",
        "organization_country",
        "organization_geolocation",
        "organization_state",
        "organization_street",
        "organization_unit",
        "organization_zip"
      ],
      "properties": {
        "organization_area": {
          "type": "string"
        },
        "organization_city": {
          "type": "string"
        },
        "organization_country": {
          "type": "string"
        },
        "organization_geolocation": {
          "$ref": "#/definitions/internal_api_organization.geoLocation"
        },
        "organization_state": {
          "type": "string"
        },
        "organization_street": {
          "type": "string"
        },
        "organization_unit": {
          "type": "string"
        },
        "organization_zip": {
          "type": "string"
        }
      }
    },
    "internal_api_organization.organizationCreateReq": {
      "type": "object",
      "required": [
        "organization_address",
        "organization_description",
        "organization_icon",
        "organization_key",
        "organization_name",
        "organization_website"
      ],
      "properties": {
        "organization_address": {
          "$ref": "#/definitions/internal_api_organization.organizationAddress"
        },
        "organization_description": {
          "type": "string"
        },
        "organization_icon": {
          "type": "string"
        },
        "organization_key": {
          "type": "string"
        },
        "organization_name": {
          "type": "string"
        },
        "organization_website": {
          "type": "string"
        }
      }
    },
    "internal_api_organization.organizationIDReq": {
      "type": "object",
      "required": [
        "organization_id"
      ],
      "properties": {
        "organization_id": {
          "type": "string"
        }
      }
    },
    "internal_api_organization.organizationResp": {
      "type": "object",
      "required": [
        "organization_address",
        "organization_description",
        "organization_icon",
        "organization_key",
        "organization_name",
        "organization_website"
      ],
      "properties": {
        "organization_address": {
          "$ref": "#/definitions/internal_api_organization.organizationAddress"
        },
        "organization_description": {
          "type": "string"
        },
        "organization_icon": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "organization_key": {
          "type": "string"
        },
        "organization_name": {
          "type": "string"
        },
        "organization_website": {
          "type": "string"
        }
      }
    },
    "internal_api_organization.organizationUpdateReq": {
      "type": "object",
      "required": [
        "organization_address",
        "organization_description",
        "organization_icon",
        "organization_id",
        "organization_key",
        "organization_name",
        "organization_website"
      ],
      "properties": {
        "organization_address": {
          "$ref": "#/definitions/internal_api_organization.organizationAddress"
        },
        "organization_description": {
          "type": "string"
        },
        "organization_icon": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "organization_key": {
          "type": "string"
        },
        "organization_name": {
          "type": "string"
        },
        "organization_website": {
          "type": "string"
        }
      }
    },
    "internal_api_pipeline.pipelineCatalogInfoResp": {
      "type": "object",
      "properties": {
        "catalog_elements": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "models": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        }
      }
    },
    "internal_api_pipeline.pipelineCatalogRefreshReq": {
      "type": "object",
      "properties": {
        "nimble_id": {
          "type": "string"
        }
      }
    },
    "internal_api_pipeline.pipelineCatalogRefreshResp": {
      "type": "object",
      "required": [
        "transaction_id"
      ],
      "properties": {
        "transaction_id": {
          "type": "string"
        }
      }
    },
    "internal_api_pipeline.pipelineCreateReq": {
      "type": "object",
      "required": [
        "nimble_id",
        "pipeline_elements",
        "pipeline_name",
        "pipeline_reference_key",
        "pipeline_usecase"
      ],
      "properties": {
        "nimble_id": {
          "type": "string"
        },
        "pipeline_elements": {
          "type": "object",
          "additionalProperties": true
        },
        "pipeline_name": {
          "type": "string"
        },
        "pipeline_reference_key": {
          "type": "integer"
        },
        "pipeline_source": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "pipeline_usecase": {
          "type": "string"
        }
      }
    },
    "internal_api_pipeline.pipelineDefaultsResp": {
      "type": "object",
      "required": [
        "default_data"
      ],
      "properties": {
        "default_data": {
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "internal_api_pipeline.pipelineIDReq": {
      "type": "object",
      "required": [
        "pipeline_id"
      ],
      "properties": {
        "pipeline_id": {
          "type": "string"
        }
      }
    },
    "internal_api_pipeline.pipelineResp": {
      "type": "object",
      "required": [
        "nimble_id",
        "pipeline_elements",
        "pipeline_name",
        "pipeline_reference_key",
        "pipeline_usecase"
      ],
      "properties": {
        "nimble_id": {
          "type": "string"
        },
        "pipeline_elements": {
          "type": "object",
          "additionalProperties": true
        },
        "pipeline_id": {
          "type": "string"
        },
        "pipeline_name": {
          "type": "string"
        },
        "pipeline_reference_key": {
          "type": "integer"
        },
        "pipeline_source": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "pipeline_usecase": {
          "type": "string"
        }
      }
    },
    "internal_api_role.roleListResp": {
      "type": "object",
      "properties": {
        "role_id": {
          "type": "string"
        },
        "role_key": {
          "type": "string"
        },
        "role_name": {
          "type": "string"
        }
      }
    },
    "internal_api_rule.action": {
      "type": "object",
      "properties": {
        "action_access_id": {
          "type": "string"
        },
        "action_access_token": {
          "type": "string"
        },
        "action_auth_header": {
          "type": "string"
        },
        "action_external_link": {
          "type": "string"
        },
        "action_header": {
          "type": "string"
        },
        "action_is_auto_payload": {
          "type": "boolean"
        },
        "action_is_secure": {
          "type": "boolean"
        },
        "action_message": {
          "type": "string"
        },
        "action_method": {
          "type": "string"
        },
        "action_payload": {
          "type": "string"
        },
        "action_process_delay": {
          "type": "integer"
        },
        "action_query": {
          "type": "string"
        },
        "action_subject": {
          "type": "string"
        },
        "action_to": {
          "type": "string"
        },
        "action_type": {
          "type": "string"
        },
        "action_url": {
          "type": "string"
        },
        "service_key": {
          "type": "string"
        }
      }
    },
    "internal_api_rule.notification": {
      "type": "object",
      "required": [
        "notification_is_reminder",
        "notification_type"
      ],
      "properties": {
        "notification_frequency": {
          "type": "integer"
        },
        "notification_is_reminder": {
          "type": "boolean"
        },
        "notification_reminder": {
          "$ref": "#/definitions/internal_api_rule.reminder"
        },
        "notification_type": {
          "type": "string"
        }
      }
    },
    "internal_api_rule.reminder": {
      "type": "object",
      "required": [
        "reminder_frequency",
        "reminder_is_ack",
        "reminder_priority_type",
        "reminder_type"
      ],
      "properties": {
        "reminder_count": {
          "type": "integer"
        },
        "reminder_frequency": {
          "type": "integer"
        },
        "reminder_is_ack": {
          "type": "boolean"
        },
        "reminder_priority_type": {
          "type": "string"
        },
        "reminder_type": {
          "type": "string"
        }
      }
    },
    "internal_api_rule.ruleActivateDeActivateReq": {
      "type": "object",
      "required": [
        "rule_id",
        "site_id"
      ],
      "properties": {
        "rule_id": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        }
      }
    },
    "internal_api_rule.ruleCreateReq": {
      "type": "object",
      "required": [
        "rule_action",
        "rule_expression",
        "rule_name",
        "rule_notification",
        "rule_priority",
        "rule_tolerance",
        "site_id"
      ],
      "properties": {
        "rule_action": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "rule_expression": {
          "type": "string"
        },
        "rule_frequency": {
          "type": "integer"
        },
        "rule_name": {
          "type": "string"
        },
        "rule_notification": {
          "$ref": "#/definitions/internal_api_rule.notification"
        },
        "rule_priority": {
          "type": "string"
        },
        "rule_template": {
          "type": "object",
          "additionalProperties": true
        },
        "rule_tolerance": {
          "type": "integer"
        },
        "site_id": {
          "type": "string"
        }
      }
    },
    "internal_api_rule.ruleIDReq": {
      "type": "object",
      "required": [
        "rule_id"
      ],
      "properties": {
        "rule_id": {
          "type": "string"
        }
      }
    },
    "internal_api_rule.ruleResp": {
      "type": "object",
      "properties": {
        "is_active": {
          "type": "boolean"
        },
        "rule_action": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/internal_api_rule.action"
          }
        },
        "rule_expand": {
          "type": "object",
          "additionalProperties": true
        },
        "rule_expression": {
          "type": "string"
        },
        "rule_frequency": {
          "type": "integer"
        },
        "rule_id": {
          "type": "string"
        },
        "rule_name": {
          "type": "string"
        },
        "rule_notification": {
          "$ref": "#/definitions/internal_api_rule.notification"
        },
        "rule_priority": {
          "type": "string"
        },
        "rule_template": {
          "type": "object",
          "additionalProperties": true
        },
        "rule_tolerance": {
          "type": "integer"
        },
        "rule_uuid": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        }
      }
    },
    "internal_api_rule.ruleUpdateReq": {
      "type": "object",
      "required": [
        "rule_action",
        "rule_expression",
        "rule_id",
        "rule_name",
        "rule_notification",
        "rule_priority",
        "rule_tolerance",
        "site_id"
      ],
      "properties": {
        "rule_action": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "rule_expression": {
          "type": "string"
        },
        "rule_frequency": {
          "type": "integer"
        },
        "rule_id": {
          "type": "string"
        },
        "rule_name": {
          "type": "string"
        },
        "rule_notification": {
          "$ref": "#/definitions/internal_api_rule.notification"
        },
        "rule_priority": {
          "type": "string"
        },
        "rule_template": {
          "type": "object",
          "additionalProperties": true
        },
        "rule_tolerance": {
          "type": "integer"
        },
        "site_id": {
          "type": "string"
        }
      }
    },
    "internal_api_schedule.scheduleCreateReq": {
      "type": "object",
      "required": [
        "schedule_name",
        "schedule_occurrence",
        "schedule_timezone",
        "schedule_type"
      ],
      "properties": {
        "alert_id": {
          "type": "string"
        },
        "channel_id": {
          "type": "string"
        },
        "rule_id": {
          "type": "string"
        },
        "schedule_name": {
          "type": "string"
        },
        "schedule_occurrence": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/internal_api_schedule.scheduleOccurrence"
          }
        },
        "schedule_timezone": {
          "type": "string"
        },
        "schedule_type": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        }
      }
    },
    "internal_api_schedule.scheduleIDReq": {
      "type": "object",
      "required": [
        "schedule_id"
      ],
      "properties": {
        "schedule_id": {
          "type": "string"
        }
      }
    },
    "internal_api_schedule.scheduleListReq": {
      "type": "object",
      "required": [
        "channel_id"
      ],
      "properties": {
        "channel_id": {
          "type": "string"
        }
      }
    },
    "internal_api_schedule.scheduleOccurrence": {
      "type": "object",
      "required": [
        "occurrence_activate_cron",
        "occurrence_constraint",
        "occurrence_deactivate_cron",
        "occurrence_end_time",
        "occurrence_is_allday",
        "occurrence_start_time"
      ],
      "properties": {
        "occurrence_activate_cron": {
          "type": "string"
        },
        "occurrence_constraint": {
          "type": "string"
        },
        "occurrence_deactivate_cron": {
          "type": "string"
        },
        "occurrence_end_time": {
          "type": "string"
        },
        "occurrence_id": {
          "type": "integer"
        },
        "occurrence_is_allday": {
          "type": "boolean"
        },
        "occurrence_start_time": {
          "type": "string"
        }
      }
    },
    "internal_api_schedule.scheduleResp": {
      "type": "object",
      "properties": {
        "alert_id": {
          "type": "string"
        },
        "channel_id": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "rule_id": {
          "type": "string"
        },
        "schedule_id": {
          "type": "string"
        },
        "schedule_name": {
          "type": "string"
        },
        "schedule_occurrence": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/internal_api_schedule.scheduleOccurrence"
          }
        },
        "schedule_type": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        }
      }
    },
    "internal_api_schedule.scheduleRuleListReq": {
      "type": "object",
      "required": [
        "site_id"
      ],
      "properties": {
        "site_id": {
          "type": "string"
        }
      }
    },
    "internal_api_schedule.scheduleUpdateReq": {
      "type": "object",
      "required": [
        "schedule_id",
        "schedule_name",
        "schedule_occurrence",
        "schedule_timezone",
        "schedule_type"
      ],
      "properties": {
        "alert_id": {
          "type": "string"
        },
        "channel_id": {
          "type": "string"
        },
        "rule_id": {
          "type": "string"
        },
        "schedule_id": {
          "type": "string"
        },
        "schedule_name": {
          "type": "string"
        },
        "schedule_occurrence": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/internal_api_schedule.scheduleOccurrence"
          }
        },
        "schedule_timezone": {
          "type": "string"
        },
        "schedule_type": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        }
      }
    },
    "internal_api_site.geoLocation": {
      "type": "object",
      "required": [
        "lat",
        "long"
      ],
      "properties": {
        "lat": {
          "type": "number"
        },
        "long": {
          "type": "number"
        }
      }
    },
    "internal_api_site.siteAddress": {
      "type": "object",
      "required": [
        "site_city",
        "site_country",
        "site_geolocation",
        "site_state",
        "site_timezone",
        "site_zip"
      ],
      "properties": {
        "site_area": {
          "type": "string"
        },
        "site_city": {
          "type": "string"
        },
        "site_country": {
          "type": "string"
        },
        "site_geolocation": {
          "$ref": "#/definitions/internal_api_site.geoLocation"
        },
        "site_state": {
          "type": "string"
        },
        "site_street": {
          "type": "string"
        },
        "site_timezone": {
          "type": "string"
        },
        "site_unit": {
          "type": "string"
        },
        "site_zip": {
          "type": "string"
        }
      }
    },
    "internal_api_site.siteAssignReq": {
      "type": "object",
      "required": [
        "site_id",
        "user_id"
      ],
      "properties": {
        "site_id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "internal_api_site.siteCreateReq": {
      "type": "object",
      "required": [
        "customer_id",
        "organization_id",
        "site_address",
        "site_icon",
        "site_image",
        "site_key",
        "site_name",
        "site_type"
      ],
      "properties": {
        "customer_id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "site_address": {
          "$ref": "#/definitions/internal_api_site.siteAddress"
        },
        "site_description": {
          "type": "string"
        },
        "site_icon": {
          "type": "string"
        },
        "site_image": {
          "type": "string"
        },
        "site_key": {
          "type": "string"
        },
        "site_name": {
          "type": "string"
        },
        "site_type": {
          "type": "string"
        }
      }
    },
    "internal_api_site.siteDeleteReq": {
      "type": "object",
      "required": [
        "site_id"
      ],
      "properties": {
        "site_id": {
          "type": "string"
        }
      }
    },
    "internal_api_site.siteUnAssignReq": {
      "type": "object",
      "required": [
        "customer_id",
        "site_id",
        "user_id"
      ],
      "properties": {
        "customer_id": {
          "type": "string"
        },
        "site_id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "internal_api_site.siteUpdateReq": {
      "type": "object",
      "required": [
        "customer_id",
        "organization_id",
        "site_address",
        "site_icon",
        "site_id",
        "site_image",
        "site_key",
        "site_name",
        "site_type"
      ],
      "properties": {
        "customer_id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "site_address": {
          "$ref": "#/definitions/internal_api_site.siteAddress"
        },
        "site_description": {
          "type": "string"
        },
        "site_icon": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        },
        "site_image": {
          "type": "string"
        },
        "site_key": {
          "type": "string"
        },
        "site_name": {
          "type": "string"
        },
        "site_type": {
          "type": "string"
        }
      }
    },
    "internal_api_source.channelResp": {
      "type": "object",
      "properties": {
        "channel_favorite": {
          "type": "boolean"
        },
        "channel_id": {
          "type": "string"
        },
        "channel_key": {
          "type": "string"
        },
        "channel_name": {
          "type": "string"
        },
        "channel_sid": {
          "type": "string"
        },
        "channel_threshold_duration": {
          "type": "integer"
        },
        "is_active": {
          "type": "boolean"
        },
        "is_auto_recovery": {
          "type": "boolean"
        },
        "is_storage": {
          "type": "boolean"
        },
        "is_verified": {
          "type": "boolean"
        },
        "nimble_id": {
          "type": "string"
        },
        "pipeline_id": {
          "type": "string"
        },
        "source_id": {
          "type": "string"
        },
        "usecase_icon": {
          "type": "string"
        },
        "usecase_id": {
          "type": "string"
        },
        "usecase_key": {
          "type": "string"
        },
        "usecase_meta_key": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "usecase_name": {
          "type": "string"
        }
      }
    },
    "internal_api_source.sourceCreateReq": {
      "type": "object",
      "required": [
        "device_id",
        "nimble_id",
        "source_name",
        "stream_id"
      ],
      "properties": {
        "device_id": {
          "type": "string"
        },
        "nimble_id": {
          "type": "string"
        },
        "source_address": {
          "type": "string"
        },
        "source_fps": {
          "type": "number"
        },
        "source_name": {
          "type": "string"
        },
        "source_type": {
          "type": "string"
        },
        "static_content": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "stream_id": {
          "type": "integer"
        }
      }
    },
    "internal_api_source.sourceIDReq": {
      "type": "object",
      "required": [
        "source_id"
      ],
      "properties": {
        "source_id": {
          "type": "string"
        }
      }
    },
    "internal_api_source.sourceMappingResp": {
      "type": "object",
      "properties": {
        "is_default": {
          "type": "boolean"
        },
        "nimble_address": {
          "type": "string"
        },
        "nimble_hostname": {
          "type": "string"
        },
        "nimble_id": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        },
        "site_name": {
          "type": "string"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/internal_api_source.sourceResp"
          }
        }
      }
    },
    "internal_api_source.sourceResp": {
      "type": "object",
      "required": [
        "device_id",
        "nimble_id",
        "source_name",
        "stream_id"
      ],
      "properties": {
        "device_id": {
          "type": "string"
        },
        "nimble_id": {
          "type": "string"
        },
        "source_address": {
          "type": "string"
        },
        "source_channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/internal_api_source.channelResp"
          }
        },
        "source_fps": {
          "type": "number"
        },
        "source_id": {
          "type": "string"
        },
        "source_name": {
          "type": "string"
        },
        "source_type": {
          "type": "string"
        },
        "static_content": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "stream_id": {
          "type": "integer"
        }
      }
    },
    "internal_api_status.statusResp": {
      "type": "object",
      "properties": {
        "auth_providers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "brand_name": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "is_onboarding": {
          "type": "boolean"
        },
        "license_count": {
          "type": "integer"
        },
        "nis_module": {
          "type": "boolean"
        },
        "sms_module": {
          "type": "boolean"
        },
        "smtp_module": {
          "type": "boolean"
        },
        "sts_service": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "version": {
          "type": "string"
        }
      }
    },
    "internal_api_trace.trace": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "data": {},
        "message": {
          "type": "string"
        },
        "time": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "internal_api_trace.traceCodesResp": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "internal_api_trace.traceRangeResp": {
      "type": "object",
      "properties": {
        "end": {
          "type": "string"
        },
        "start": {
          "type": "string"
        },
        "total_count": {
          "type": "integer"
        },
        "trace_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/internal_api_trace.trace"
          }
        }
      }
    },
    "internal_api_trace.transaction": {
      "type": "object",
      "properties": {
        "data": {},
        "message": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "time": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "internal_api_trace.transactionResp": {
      "type": "object",
      "properties": {
        "transaction_count": {
          "type": "integer"
        },
        "transaction_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/internal_api_trace.transaction"
          }
        }
      }
    },
    "internal_api_usecase.channelStatsResp": {
      "type": "object",
      "properties": {
        "channel_alert": {
          "$ref": "#/definitions/model.AlertData"
        },
        "channel_id": {
          "type": "string"
        },
        "channel_key": {
          "type": "string"
        },
        "channel_name": {
          "type": "string"
        },
        "channel_stats": {
          "$ref": "#/definitions/model.StatsData"
        },
        "channel_total_alert": {
          "type": "integer"
        },
        "channel_total_notification": {
          "type": "integer"
        },
        "usecase_key": {
          "type": "string"
        }
      }
    },
    "internal_api_usecase.usecaseAssignReq": {
      "type": "object",
      "required": [
        "usecase_id",
        "user_id"
      ],
      "properties": {
        "usecase_id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "internal_api_usecase.usecaseCreateReq": {
      "type": "object",
      "properties": {
        "usecase_background_color": {
          "type": "string"
        },
        "usecase_channel_count": {
          "type": "integer"
        },
        "usecase_component_key": {
          "type": "string"
        },
        "usecase_desc": {
          "type": "string"
        },
        "usecase_icon": {
          "type": "string"
        },
        "usecase_key": {
          "type": "string"
        },
        "usecase_meta_key": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "usecase_name": {
          "type": "string"
        }
      }
    },
    "internal_api_usecase.usecaseReportReq": {
      "type": "object",
      "required": [
        "channel_id",
        "details",
        "end_date",
        "start_date",
        "usecase_key"
      ],
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "details": {
          "type": "boolean"
        },
        "end_date": {
          "type": "string"
        },
        "start_date": {
          "type": "string"
        },
        "usecase_key": {
          "type": "string"
        }
      }
    },
    "internal_api_usecase.usecaseReq": {
      "type": "object",
      "required": [
        "usecase_id"
      ],
      "properties": {
        "usecase_id": {
          "type": "string"
        }
      }
    },
    "internal_api_usecase.usecaseStatReq": {
      "type": "object",
      "required": [
        "details",
        "frequency",
        "usecase_key",
        "usecase_meta_key"
      ],
      "properties": {
        "details": {
          "type": "boolean"
        },
        "frequency": {
          "type": "string"
        },
        "usecase_key": {
          "type": "string"
        },
        "usecase_meta_key": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "internal_api_usecase.usecaseStatResp": {
      "type": "object",
      "properties": {
        "usecase_channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/internal_api_usecase.channelStatsResp"
          }
        },
        "usecase_key": {
          "type": "string"
        },
        "usecase_total_alert": {
          "type": "integer"
        },
        "usecase_total_notification": {
          "type": "integer"
        },
        "usecase_total_stats": {
          "$ref": "#/definitions/model.StatsData"
        }
      }
    },
    "internal_api_usecase.usecaseUnAssignReq": {
      "type": "object",
      "required": [
        "usecase_id",
        "user_id"
      ],
      "properties": {
        "usecase_id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "internal_api_usecase.usecaseUpdateReq": {
      "type": "object",
      "required": [
        "usecase_id"
      ],
      "properties": {
        "usecase_background_color": {
          "type": "string"
        },
        "usecase_channel_count": {
          "type": "integer"
        },
        "usecase_component_key": {
          "type": "string"
        },
        "usecase_desc": {
          "type": "string"
        },
        "usecase_icon": {
          "type": "string"
        },
        "usecase_id": {
          "type": "string"
        },
        "usecase_key": {
          "type": "string"
        },
        "usecase_meta_key": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "usecase_name": {
          "type": "string"
        }
      }
    },
    "internal_api_user.userNotificationFetchReq": {
      "type": "object",
      "required": [
        "end",
        "is_deleted",
        "is_read",
        "limit",
        "offset",
        "start",
        "user_uuid"
      ],
      "properties": {
        "end": {
          "type": "string"
        },
        "is_deleted": {
          "type": "boolean"
        },
        "is_read": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "start": {
          "type": "string"
        },
        "user_uuid": {
          "type": "string"
        }
      }
    },
    "internal_api_user.userNotificationReq": {
      "type": "object",
      "required": [
        "notification_uuid",
        "user_uuid"
      ],
      "properties": {
        "notification_uuid": {
          "type": "string"
        },
        "user_uuid": {
          "type": "string"
        }
      }
    },
    "internal_api_user.userPushTokenDeleteReq": {
      "type": "object",
      "required": [
        "mobile_token"
      ],
      "properties": {
        "mobile_token": {
          "type": "string"
        }
      }
    },
    "internal_api_user.userPushTokenReq": {
      "type": "object",
      "required": [
        "mobile_token",
        "mobile_type",
        "user_uuid"
      ],
      "properties": {
        "mobile_token": {
          "type": "string"
        },
        "mobile_type": {
          "type": "string"
        },
        "user_uuid": {
          "type": "string"
        }
      }
    },
    "internal_api_user.userSessionCheckReq": {
      "type": "object",
      "required": [
        "exchange_token",
        "user_uuid"
      ],
      "properties": {
        "exchange_token": {
          "type": "string"
        },
        "user_uuid": {
          "type": "string"
        }
      }
    },
    "internal_api_user.userSessionInitReq": {
      "type": "object",
      "required": [
        "instance_id"
      ],
      "properties": {
        "instance_id": {
          "type": "string"
        }
      }
    },
    "internal_api_user.userSessionInitResp": {
      "type": "object",
      "properties": {
        "exchange_token": {
          "type": "string"
        }
      }
    },
    "internal_api_user.userSyncCreateReq": {
      "type": "object",
      "properties": {
        "attempt_count": {
          "type": "integer"
        },
        "avatar": {
          "type": "string"
        },
        "confirm_selector": {
          "type": "string"
        },
        "confirm_verifier": {
          "type": "string"
        },
        "confirmed": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "is_verified": {
          "type": "boolean"
        },
        "last_attempt": {
          "type": "string"
        },
        "last_logged_in_at": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "locked": {
          "type": "string"
        },
        "o_auth2_accessToken": {
          "type": "string"
        },
        "o_auth2_expiry": {
          "type": "string"
        },
        "o_auth2_provider": {
          "type": "string"
        },
        "o_auth2_refreshToken": {
          "type": "string"
        },
        "o_auth2_uid": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "recover_selector": {
          "type": "string"
        },
        "recover_token_expiry": {
          "type": "string"
        },
        "recover_verifier": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "user_name": {
          "type": "string"
        }
      }
    },
    "internal_api_user.userSyncRemoveReq": {
      "type": "object",
      "required": [
        "user_uuid"
      ],
      "properties": {
        "user_uuid": {
          "type": "string"
        }
      }
    },
    "internal_api_user.userUpdateConfigResp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "model.Action": {
      "type": "object",
      "properties": {
        "access_id": {
          "type": "string"
        },
        "access_token": {
          "type": "string"
        },
        "auth_header": {
          "type": "string"
        },
        "external_link": {
          "type": "string"
        },
        "header": {
          "type": "string"
        },
        "is_auto_payload": {
          "type": "boolean"
        },
        "is_secure": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "method": {
          "type": "string"
        },
        "payload": {
          "type": "string"
        },
        "process_delay": {
          "type": "integer"
        },
        "query": {
          "type": "string"
        },
        "service_key": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/model.ActionType"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "model.ActionType": {
      "type": "string",
      "enum": [
        "smtp",
        "sms",
        "webhook",
        "telegram",
        "slack",
        "chain",
        "mqtt",
        "push"
      ],
      "x-enum-varnames": [
        "ActionTypeSmtp",
        "ActionTypeSms",
        "ActionTypeWebhook",
        "ActionTypeTelegram",
        "ActionTypeSlack",
        "ActionTypeChain",
        "ActionTypeMqtt",
        "ActionTypePush"
      ]
    },
    "model.AlertData": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string"
        },
        "condition": {
          "type": "string"
        },
        "count": {
          "type": "integer"
        },
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "time": {
          "type": "string"
        }
      }
    },
    "model.StatsData": {
      "type": "object",
      "properties": {
        "alert": {
          "type": "integer"
        },
        "down": {
          "type": "integer"
        },
        "dwell_time": {
          "type": "integer"
        },
        "fire": {
          "type": "integer"
        },
        "frame_collision": {
          "type": "integer"
        },
        "frame_near_miss": {
          "type": "integer"
        },
        "high_smoke": {
          "type": "integer"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "intermediate_smoke": {
          "type": "integer"
        },
        "is_intersected": {
          "type": "integer"
        },
        "low_smoke": {
          "type": "integer"
        },
        "moving_average_count": {
          "type": "integer"
        },
        "non_violation": {
          "type": "integer"
        },
        "not_intersected": {
          "type": "integer"
        },
        "occupancy": {
          "type": "integer"
        },
        "total": {
          "type": "integer"
        },
        "total_collision": {
          "type": "integer"
        },
        "total_near_miss": {
          "type": "integer"
        },
        "up": {
          "type": "integer"
        },
        "violation": {
          "type": "integer"
        }
      }
    },
    "structs.DefaultEmail": {
      "type": "object",
      "properties": {
        "attachment": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "from": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "to": {
          "type": "string"
        }
      }
    },
    "structs.HTTPError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "response": {},
        "response_code": {
          "type": "integer"
        }
      }
    },
    "structs.HTTPResp": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "response": {},
        "response_code": {
          "type": "integer"
        }
      }
    },
    "structs.HTTPRespArray": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "response": {
          "type": "array",
          "items": {}
        },
        "response_code": {
          "type": "integer"
        }
      }
    },
    "sts_internal_api__common.AlertResp": {
      "type": "object",
      "properties": {
        "alert_expression": {
          "type": "string"
        },
        "alert_frequency": {
          "type": "integer"
        },
        "alert_id": {
          "type": "string"
        },
        "alert_name": {
          "type": "string"
        },
        "alert_priority": {
          "type": "integer"
        },
        "alert_uuid": {
          "type": "string"
        },
        "channel_id": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        }
      }
    },
    "sts_internal_api__common.BundleResp": {
      "type": "object",
      "properties": {
        "bundle_default_data": {
          "type": "object",
          "additionalProperties": true
        },
        "bundle_id": {
          "type": "string"
        },
        "bundle_key": {
          "type": "string"
        },
        "bundle_name": {
          "type": "string"
        },
        "bundle_usecases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api__common.UsecaseResp"
          }
        }
      }
    },
    "sts_internal_api__common.ChannelResp": {
      "type": "object",
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api__common.AlertResp"
          }
        },
        "channel_alerts": {
          "type": "integer"
        },
        "channel_favorite": {
          "type": "boolean"
        },
        "channel_id": {
          "type": "string"
        },
        "channel_key": {
          "type": "string"
        },
        "channel_name": {
          "type": "string"
        },
        "channel_notifications": {
          "type": "integer"
        },
        "channel_sid": {
          "type": "string"
        },
        "channel_type": {
          "type": "string"
        },
        "customer_id": {
          "type": "string"
        },
        "device_icon": {
          "type": "string"
        },
        "device_id": {
          "type": "string"
        },
        "device_name": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "is_auto_recovery": {
          "type": "boolean"
        },
        "is_purge": {
          "type": "boolean"
        },
        "is_storage": {
          "type": "boolean"
        },
        "is_verified": {
          "type": "boolean"
        },
        "nimble_id": {
          "type": "string"
        },
        "pipeline_id": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        },
        "site_name": {
          "type": "string"
        },
        "source_id": {
          "type": "string"
        },
        "transaction_id": {
          "type": "string"
        },
        "usecase_icon": {
          "type": "string"
        },
        "usecase_id": {
          "type": "string"
        },
        "usecase_key": {
          "type": "string"
        },
        "usecase_meta_key": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "usecase_name": {
          "type": "string"
        }
      }
    },
    "sts_internal_api__common.DeviceResp": {
      "type": "object",
      "properties": {
        "device_alerts": {
          "type": "integer"
        },
        "device_icon": {
          "type": "string"
        },
        "device_id": {
          "type": "string"
        },
        "device_identifier": {
          "type": "string"
        },
        "device_image": {
          "type": "string"
        },
        "device_name": {
          "type": "string"
        },
        "device_notifications": {
          "type": "integer"
        },
        "device_source": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api__common.SourceResp"
          }
        },
        "device_state": {
          "type": "boolean"
        },
        "device_status": {
          "type": "string"
        },
        "device_streams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api__common.DeviceStream"
          }
        },
        "device_tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "device_type": {
          "type": "string"
        },
        "device_uuid": {
          "type": "string"
        },
        "device_value": {
          "type": "string"
        },
        "nimble_id": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        },
        "source_channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api__common.ChannelResp"
          }
        },
        "transaction_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api__common.DeviceStream": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "fps": {
          "$ref": "#/definitions/sts_internal_api__common.StreamFPS"
        },
        "id": {
          "type": "integer"
        },
        "password": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "protocol": {
          "type": "string"
        },
        "resolution": {
          "$ref": "#/definitions/sts_internal_api__common.StreamResolution"
        },
        "type": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "sts_internal_api__common.EventStatsResp": {
      "type": "object",
      "properties": {
        "channel_alert": {
          "$ref": "#/definitions/model.AlertData"
        },
        "channel_id": {
          "type": "string"
        },
        "channel_key": {
          "type": "string"
        },
        "channel_name": {
          "type": "string"
        },
        "channel_stats": {
          "$ref": "#/definitions/model.StatsData"
        },
        "channel_total_alert": {
          "type": "integer"
        },
        "channel_total_notification": {
          "type": "integer"
        },
        "usecase_key": {
          "type": "string"
        }
      }
    },
    "sts_internal_api__common.GeoLocation": {
      "type": "object",
      "required": [
        "lat",
        "long"
      ],
      "properties": {
        "lat": {
          "type": "number"
        },
        "long": {
          "type": "number"
        }
      }
    },
    "sts_internal_api__common.SiteAddress": {
      "type": "object",
      "properties": {
        "site_area": {
          "type": "string"
        },
        "site_city": {
          "type": "string"
        },
        "site_country": {
          "type": "string"
        },
        "site_geolocation": {
          "$ref": "#/definitions/sts_internal_api__common.GeoLocation"
        },
        "site_state": {
          "type": "string"
        },
        "site_street": {
          "type": "string"
        },
        "site_timezone": {
          "type": "string"
        },
        "site_unit": {
          "type": "string"
        },
        "site_zip": {
          "type": "string"
        }
      }
    },
    "sts_internal_api__common.SiteResp": {
      "type": "object",
      "properties": {
        "site_address": {
          "$ref": "#/definitions/sts_internal_api__common.SiteAddress"
        },
        "site_description": {
          "type": "string"
        },
        "site_devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api__common.DeviceResp"
          }
        },
        "site_icon": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        },
        "site_image": {
          "type": "string"
        },
        "site_key": {
          "type": "string"
        },
        "site_name": {
          "type": "string"
        },
        "site_notifications": {
          "type": "integer"
        },
        "site_total_devices": {
          "type": "integer"
        },
        "site_type": {
          "type": "string"
        }
      }
    },
    "sts_internal_api__common.SourceResp": {
      "type": "object",
      "properties": {
        "source_address": {
          "type": "string"
        },
        "source_fps": {
          "type": "number"
        },
        "source_id": {
          "type": "string"
        },
        "source_name": {
          "type": "string"
        },
        "source_sid": {
          "type": "integer"
        },
        "source_type": {
          "type": "string"
        }
      }
    },
    "sts_internal_api__common.Stats": {
      "type": "object",
      "properties": {
        "down": {
          "type": "integer"
        },
        "dwelltime": {
          "type": "integer"
        },
        "fire": {
          "type": "integer"
        },
        "framecollision": {
          "type": "integer"
        },
        "framenearmiss": {
          "type": "integer"
        },
        "highsmoke": {
          "type": "integer"
        },
        "intermediatesmoke": {
          "type": "integer"
        },
        "lowsmoke": {
          "type": "integer"
        },
        "movingaveragecount": {
          "type": "integer"
        },
        "nonviolation": {
          "type": "integer"
        },
        "occupancy": {
          "type": "integer"
        },
        "total": {
          "type": "integer"
        },
        "totalcollision": {
          "type": "integer"
        },
        "totalnearmiss": {
          "type": "integer"
        },
        "up": {
          "type": "integer"
        },
        "violation": {
          "type": "integer"
        }
      }
    },
    "sts_internal_api__common.StreamFPS": {
      "type": "object",
      "properties": {
        "input": {
          "type": "number"
        },
        "output": {
          "type": "number"
        }
      }
    },
    "sts_internal_api__common.StreamResolution": {
      "type": "object",
      "properties": {
        "height": {
          "type": "integer"
        },
        "width": {
          "type": "integer"
        }
      }
    },
    "sts_internal_api__common.UsecaseResp": {
      "type": "object",
      "properties": {
        "bundle_key": {
          "type": "string"
        },
        "is_available": {
          "type": "boolean"
        },
        "usecase_background_color": {
          "type": "string"
        },
        "usecase_channel_count": {
          "type": "integer"
        },
        "usecase_channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api__common.ChannelResp"
          }
        },
        "usecase_component_key": {
          "type": "string"
        },
        "usecase_desc": {
          "type": "string"
        },
        "usecase_device_types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "usecase_icon": {
          "type": "string"
        },
        "usecase_id": {
          "type": "string"
        },
        "usecase_key": {
          "type": "string"
        },
        "usecase_meta_key": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "usecase_name": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_acl.component": {
      "type": "object",
      "properties": {
        "component_key": {
          "type": "integer"
        },
        "component_name": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_acl.moduleResp": {
      "type": "object",
      "properties": {
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api_acl.component"
          }
        },
        "module_key": {
          "type": "string"
        },
        "module_name": {
          "type": "string"
        },
        "module_path": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_alert.alertActivateDeActivateReq": {
      "type": "object",
      "required": [
        "alert_id",
        "channel_id"
      ],
      "properties": {
        "alert_id": {
          "type": "string"
        },
        "channel_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_alert.alertCreateReq": {
      "type": "object",
      "required": [
        "alert_expression",
        "alert_frequency",
        "alert_name",
        "alert_priority",
        "channel_id"
      ],
      "properties": {
        "alert_expression": {
          "type": "string"
        },
        "alert_frequency": {
          "type": "integer",
          "maximum": 86400,
          "minimum": 0
        },
        "alert_name": {
          "type": "string"
        },
        "alert_priority": {
          "type": "integer"
        },
        "channel_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_alert.alertIDReq": {
      "type": "object",
      "required": [
        "alert_id"
      ],
      "properties": {
        "alert_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_alert.alertListBySiteReq": {
      "type": "object",
      "required": [
        "site_id"
      ],
      "properties": {
        "site_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_alert.alertListReq": {
      "type": "object",
      "required": [
        "channel_id"
      ],
      "properties": {
        "channel_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_alert.alertUUIDReq": {
      "type": "object",
      "required": [
        "alert_uuid"
      ],
      "properties": {
        "alert_uuid": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_alert.alertUpdateReq": {
      "type": "object",
      "required": [
        "alert_expression",
        "alert_frequency",
        "alert_id",
        "alert_name",
        "alert_priority",
        "channel_id"
      ],
      "properties": {
        "alert_expression": {
          "type": "string"
        },
        "alert_frequency": {
          "type": "integer",
          "maximum": 86400,
          "minimum": 0
        },
        "alert_id": {
          "type": "string"
        },
        "alert_name": {
          "type": "string"
        },
        "alert_priority": {
          "type": "integer"
        },
        "channel_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_alert.event": {
      "type": "object",
      "properties": {
        "alert": {
          "type": "integer"
        },
        "alert_uuids": {
          "type": "string"
        },
        "condition": {
          "type": "string"
        },
        "down": {
          "type": "integer"
        },
        "dwell_time": {
          "type": "integer"
        },
        "fire": {
          "type": "integer"
        },
        "frame_collision": {
          "type": "integer"
        },
        "frame_near_miss": {
          "type": "integer"
        },
        "high_smoke": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "intermediate_smoke": {
          "type": "integer"
        },
        "is_intersected": {
          "type": "integer"
        },
        "low_smoke": {
          "type": "integer"
        },
        "metadata": {
          "type": "string"
        },
        "moving_average_count": {
          "type": "integer"
        },
        "non_violation": {
          "type": "integer"
        },
        "not_intersected": {
          "type": "integer"
        },
        "occupancy": {
          "type": "integer"
        },
        "time": {
          "type": "string"
        },
        "total": {
          "type": "integer"
        },
        "total_collision": {
          "type": "integer"
        },
        "total_count": {
          "type": "integer"
        },
        "total_near_miss": {
          "type": "integer"
        },
        "up": {
          "type": "integer"
        },
        "violation": {
          "type": "integer"
        }
      }
    },
    "sts_internal_api_alert.eventRangeResp": {
      "type": "object",
      "properties": {
        "agg_frequency": {
          "type": "string"
        },
        "channel_id": {
          "type": "string"
        },
        "end": {
          "type": "string"
        },
        "event_limit": {
          "type": "integer"
        },
        "event_offset": {
          "type": "integer"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api_alert.event"
          }
        },
        "start": {
          "type": "string"
        },
        "usecase_key": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_bundle.defaultConfigReqSet": {
      "type": "object",
      "required": [
        "bundle_data",
        "bundle_usecase"
      ],
      "properties": {
        "bundle_data": {
          "type": "object",
          "additionalProperties": true
        },
        "bundle_usecase": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_channel.channelAssignReq": {
      "type": "object",
      "required": [
        "channel_id",
        "user_id"
      ],
      "properties": {
        "channel_id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_channel.channelCreateReq": {
      "type": "object",
      "required": [
        "channel_name",
        "nimble_id",
        "pipeline_id",
        "site_id",
        "source_id",
        "usecase_key"
      ],
      "properties": {
        "channel_name": {
          "type": "string"
        },
        "nimble_id": {
          "type": "string"
        },
        "pipeline_id": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        },
        "source_id": {
          "type": "string"
        },
        "usecase_key": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_channel.channelListReq": {
      "type": "object",
      "properties": {
        "nimble_id": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        },
        "usecase_key": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_channel.channelRefactorReq": {
      "type": "object",
      "required": [
        "device_id",
        "nimble_id"
      ],
      "properties": {
        "device_id": {
          "type": "string"
        },
        "nimble_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_channel.channelStatusReq": {
      "type": "object",
      "required": [
        "channel_id"
      ],
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "is_force": {
          "type": "boolean"
        }
      }
    },
    "sts_internal_api_channel.channelStatusResp": {
      "type": "object",
      "properties": {
        "is_active": {
          "type": "boolean"
        },
        "is_auto_recovery": {
          "type": "boolean"
        },
        "is_storage": {
          "type": "boolean"
        },
        "is_verified": {
          "type": "boolean"
        }
      }
    },
    "sts_internal_api_channel.channelUnAssignReq": {
      "type": "object",
      "required": [
        "channel_id",
        "user_id"
      ],
      "properties": {
        "channel_id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_channel.channelUpdateReq": {
      "type": "object",
      "required": [
        "channel_id",
        "channel_name",
        "is_auto_recovery",
        "usecase_key"
      ],
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "channel_name": {
          "type": "string"
        },
        "channel_pipeline": {
          "$ref": "#/definitions/sts_internal_api_channel.pipelineUpdateReq"
        },
        "is_auto_recovery": {
          "type": "boolean"
        },
        "is_force": {
          "type": "boolean"
        },
        "usecase_key": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_channel.pipelineUpdateReq": {
      "type": "object",
      "properties": {
        "nimble_id": {
          "type": "string"
        },
        "pipeline_elements": {
          "type": "object",
          "additionalProperties": true
        },
        "pipeline_id": {
          "type": "string"
        },
        "pipeline_name": {
          "type": "string"
        },
        "pipeline_reference_key": {
          "type": "integer"
        },
        "pipeline_source": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "pipeline_usecase": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_config.backupResponse": {
      "type": "object",
      "properties": {
        "influx_backup": {
          "type": "string"
        },
        "mongo_backup": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_config.channelStorageData": {
      "type": "object",
      "required": [
        "channel_ids",
        "site_id"
      ],
      "properties": {
        "channel_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "site_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_config.channelStorageDeleteReq": {
      "type": "object",
      "properties": {
        "purge_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api_config.channelStorageData"
          }
        }
      }
    },
    "sts_internal_api_config.settingInitResp": {
      "type": "object"
    },
    "sts_internal_api_config.smsConfResp": {
      "type": "object",
      "properties": {
        "is_default": {
          "type": "boolean"
        },
        "sms_from": {
          "type": "string"
        },
        "sms_key": {
          "type": "string"
        },
        "sms_name": {
          "type": "string"
        },
        "sms_provider": {
          "type": "string"
        },
        "sms_relay_id": {
          "type": "string"
        },
        "sms_to": {
          "type": "string"
        },
        "sms_token": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_config.smsConfTestReq": {
      "type": "object",
      "properties": {
        "sms_from": {
          "type": "string"
        },
        "sms_relay_id": {
          "type": "string"
        },
        "sms_to": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_config.smtpConfCreateReq": {
      "type": "object",
      "required": [
        "smtp_attachment",
        "smtp_auth",
        "smtp_from",
        "smtp_host",
        "smtp_name",
        "smtp_password",
        "smtp_port",
        "smtp_to",
        "smtp_username"
      ],
      "properties": {
        "smtp_attachment": {
          "type": "boolean"
        },
        "smtp_auth": {
          "type": "boolean"
        },
        "smtp_from": {
          "type": "string"
        },
        "smtp_host": {
          "type": "string"
        },
        "smtp_name": {
          "type": "string"
        },
        "smtp_password": {
          "type": "string"
        },
        "smtp_port": {
          "type": "integer"
        },
        "smtp_to": {
          "type": "string"
        },
        "smtp_username": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_config.smtpConfDeleteReq": {
      "type": "object",
      "required": [
        "smtp_relay_id"
      ],
      "properties": {
        "smtp_relay_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_config.smtpConfResp": {
      "type": "object",
      "properties": {
        "is_default": {
          "type": "boolean"
        },
        "smtp_attachment": {
          "type": "boolean"
        },
        "smtp_auth": {
          "type": "boolean"
        },
        "smtp_from": {
          "type": "string"
        },
        "smtp_host": {
          "type": "string"
        },
        "smtp_name": {
          "type": "string"
        },
        "smtp_password": {
          "type": "string"
        },
        "smtp_port": {
          "type": "integer"
        },
        "smtp_relay_id": {
          "type": "string"
        },
        "smtp_to": {
          "type": "string"
        },
        "smtp_username": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_config.smtpConfTestReq": {
      "type": "object",
      "properties": {
        "smtp_from": {
          "type": "string"
        },
        "smtp_relay_id": {
          "type": "string"
        },
        "smtp_to": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_config.smtpConfUpdateReq": {
      "type": "object",
      "required": [
        "is_default",
        "smtp_attachment",
        "smtp_auth",
        "smtp_from",
        "smtp_host",
        "smtp_name",
        "smtp_password",
        "smtp_port",
        "smtp_relay_id",
        "smtp_to",
        "smtp_username"
      ],
      "properties": {
        "is_default": {
          "type": "boolean"
        },
        "smtp_attachment": {
          "type": "boolean"
        },
        "smtp_auth": {
          "type": "boolean"
        },
        "smtp_from": {
          "type": "string"
        },
        "smtp_host": {
          "type": "string"
        },
        "smtp_name": {
          "type": "string"
        },
        "smtp_password": {
          "type": "string"
        },
        "smtp_port": {
          "type": "integer"
        },
        "smtp_relay_id": {
          "type": "string"
        },
        "smtp_to": {
          "type": "string"
        },
        "smtp_username": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_config.statusAccountStorageResp": {
      "type": "object",
      "properties": {
        "account_info": {}
      }
    },
    "sts_internal_api_config.storageConfigReq": {
      "type": "object",
      "required": [
        "notification_types",
        "purge_frequency",
        "purge_threshold"
      ],
      "properties": {
        "notification_types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "purge_frequency": {
          "type": "integer"
        },
        "purge_threshold": {
          "type": "integer"
        }
      }
    },
    "sts_internal_api_customer.customerAddress": {
      "type": "object",
      "required": [
        "customer_city",
        "customer_country",
        "customer_state",
        "customer_zip"
      ],
      "properties": {
        "customer_area": {
          "type": "string"
        },
        "customer_city": {
          "type": "string"
        },
        "customer_country": {
          "type": "string"
        },
        "customer_state": {
          "type": "string"
        },
        "customer_street": {
          "type": "string"
        },
        "customer_unit": {
          "type": "string"
        },
        "customer_zip": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_customer.customerAssignReq": {
      "type": "object",
      "required": [
        "customer_id",
        "user_id"
      ],
      "properties": {
        "customer_id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_customer.customerCreateReq": {
      "type": "object",
      "required": [
        "customer_address",
        "customer_icon",
        "customer_image",
        "customer_key",
        "customer_name",
        "organization_id"
      ],
      "properties": {
        "customer_address": {
          "$ref": "#/definitions/sts_internal_api_customer.customerAddress"
        },
        "customer_contact": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customer_description": {
          "type": "string"
        },
        "customer_icon": {
          "type": "string"
        },
        "customer_image": {
          "type": "string"
        },
        "customer_key": {
          "type": "string"
        },
        "customer_name": {
          "type": "string"
        },
        "customer_sites": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customer_type": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_customer.customerIDReq": {
      "type": "object",
      "required": [
        "customer_id"
      ],
      "properties": {
        "customer_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_customer.customerResp": {
      "type": "object",
      "required": [
        "customer_address",
        "customer_icon",
        "customer_id",
        "customer_image",
        "customer_key",
        "customer_name",
        "organization_id"
      ],
      "properties": {
        "customer_address": {
          "$ref": "#/definitions/sts_internal_api_customer.customerAddress"
        },
        "customer_contact": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customer_description": {
          "type": "string"
        },
        "customer_icon": {
          "type": "string"
        },
        "customer_id": {
          "type": "string"
        },
        "customer_image": {
          "type": "string"
        },
        "customer_key": {
          "type": "string"
        },
        "customer_name": {
          "type": "string"
        },
        "customer_sites": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customer_type": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_customer.customerSiteAssignReq": {
      "type": "object",
      "required": [
        "customer_id",
        "site_ids"
      ],
      "properties": {
        "customer_id": {
          "type": "string"
        },
        "site_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "sts_internal_api_customer.customerUpdateReq": {
      "type": "object",
      "required": [
        "customer_address",
        "customer_icon",
        "customer_id",
        "customer_image",
        "customer_key",
        "customer_name",
        "organization_id"
      ],
      "properties": {
        "customer_address": {
          "$ref": "#/definitions/sts_internal_api_customer.customerAddress"
        },
        "customer_contact": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customer_description": {
          "type": "string"
        },
        "customer_icon": {
          "type": "string"
        },
        "customer_id": {
          "type": "string"
        },
        "customer_image": {
          "type": "string"
        },
        "customer_key": {
          "type": "string"
        },
        "customer_name": {
          "type": "string"
        },
        "customer_sites": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customer_type": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_device.deviceCreateReq": {
      "type": "object",
      "required": [
        "device_identifier",
        "device_name",
        "device_tags",
        "device_type",
        "nimble_id",
        "site_id"
      ],
      "properties": {
        "device_identifier": {
          "type": "string"
        },
        "device_image": {
          "type": "string"
        },
        "device_name": {
          "type": "string"
        },
        "device_streams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api__common.DeviceStream"
          }
        },
        "device_tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "device_type": {
          "type": "string"
        },
        "device_uuid": {
          "type": "string"
        },
        "nimble_id": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_device.deviceDeleteReq": {
      "type": "object",
      "required": [
        "device_id"
      ],
      "properties": {
        "device_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_device.deviceUpdateReq": {
      "type": "object",
      "required": [
        "device_id",
        "device_identifier",
        "device_name",
        "device_tags",
        "device_type",
        "nimble_id",
        "site_id"
      ],
      "properties": {
        "device_id": {
          "type": "string"
        },
        "device_identifier": {
          "type": "string"
        },
        "device_image": {
          "type": "string"
        },
        "device_name": {
          "type": "string"
        },
        "device_streams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api__common.DeviceStream"
          }
        },
        "device_tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "device_type": {
          "type": "string"
        },
        "device_uuid": {
          "type": "string"
        },
        "nimble_id": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_device.staticContentCreateReq": {
      "type": "object",
      "required": [
        "id",
        "source_id",
        "static_content_data",
        "static_content_name",
        "static_content_type"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "source_id": {
          "type": "string"
        },
        "static_content_data": {
          "type": "object",
          "additionalProperties": true
        },
        "static_content_name": {
          "type": "string"
        },
        "static_content_type": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_device.staticContentIDReq": {
      "type": "object",
      "required": [
        "static_content_id"
      ],
      "properties": {
        "static_content_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_device.staticContentResp": {
      "type": "object",
      "required": [
        "id",
        "source_id",
        "static_content_data",
        "static_content_name",
        "static_content_type"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "source_id": {
          "type": "string"
        },
        "static_content_data": {
          "type": "object",
          "additionalProperties": true
        },
        "static_content_id": {
          "type": "string"
        },
        "static_content_name": {
          "type": "string"
        },
        "static_content_type": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_device.staticContentUpdateReq": {
      "type": "object",
      "required": [
        "id",
        "source_id",
        "static_content_data",
        "static_content_id",
        "static_content_name",
        "static_content_type"
      ],
      "properties": {
        "id": {
          "type": "integer"
        },
        "source_id": {
          "type": "string"
        },
        "static_content_data": {
          "type": "object",
          "additionalProperties": true
        },
        "static_content_id": {
          "type": "string"
        },
        "static_content_name": {
          "type": "string"
        },
        "static_content_type": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_instance.instanceCreateReq": {
      "type": "object",
      "required": [
        "instance_auth_url",
        "instance_base_url",
        "instance_name",
        "instance_uuid",
        "instance_version"
      ],
      "properties": {
        "instance_auth_url": {
          "type": "string"
        },
        "instance_base_url": {
          "type": "string"
        },
        "instance_desc": {
          "type": "string"
        },
        "instance_image": {
          "type": "string"
        },
        "instance_name": {
          "type": "string"
        },
        "instance_uuid": {
          "type": "string"
        },
        "instance_version": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_instance.instanceNotificationSendReq": {
      "type": "object",
      "properties": {
        "instance_attachments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instance_notification": {
          "$ref": "#/definitions/sts_internal_api_instance.notificationData"
        }
      }
    },
    "sts_internal_api_instance.instanceUpdateReq": {
      "type": "object",
      "properties": {
        "instance_image": {
          "type": "string"
        },
        "instance_name": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_instance.instanceUsageProcessReq": {
      "type": "object",
      "required": [
        "bucket",
        "filename",
        "object"
      ],
      "properties": {
        "bucket": {
          "type": "string"
        },
        "filename": {
          "type": "string"
        },
        "object": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_instance.notificationData": {
      "type": "object",
      "properties": {
        "action": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/model.Action"
          }
        },
        "action_uuid": {
          "type": "string"
        },
        "customer_name": {
          "type": "string"
        },
        "extra_data": {
          "type": "object",
          "additionalProperties": true
        },
        "image_url": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "notification_url": {
          "type": "string"
        },
        "rule_expression": {
          "type": "string"
        },
        "rule_name": {
          "type": "string"
        },
        "rule_uuid": {
          "type": "string"
        },
        "site_name": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_license.licenseCreateReq": {
      "type": "object",
      "required": [
        "license_customer"
      ],
      "properties": {
        "license_customer": {
          "type": "string"
        },
        "license_name": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_license.licenseResp": {
      "type": "object",
      "properties": {
        "license_created_at": {
          "type": "string"
        },
        "license_customer": {
          "type": "string"
        },
        "license_expires_at": {
          "type": "string"
        },
        "license_id": {
          "type": "string"
        },
        "license_name": {
          "type": "string"
        },
        "license_status": {
          "type": "object",
          "additionalProperties": true
        },
        "license_updated_at": {
          "type": "string"
        },
        "license_uuid": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_license.licenseStatusReq": {
      "type": "object",
      "required": [
        "license_id"
      ],
      "properties": {
        "license_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_license.licenseUpdateReq": {
      "type": "object",
      "required": [
        "license_customer",
        "license_id"
      ],
      "properties": {
        "license_customer": {
          "type": "string"
        },
        "license_id": {
          "type": "string"
        },
        "license_name": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_nimble.licenseResp": {
      "type": "object",
      "properties": {
        "license_created_at": {
          "type": "string"
        },
        "license_customer": {
          "type": "string"
        },
        "license_expires_at": {
          "type": "string"
        },
        "license_id": {
          "type": "string"
        },
        "license_name": {
          "type": "string"
        },
        "license_status": {
          "type": "object",
          "additionalProperties": true
        },
        "license_updated_at": {
          "type": "string"
        },
        "license_uuid": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_nimble.nimbleCreateReq": {
      "type": "object",
      "required": [
        "license_id",
        "nimble_address",
        "nimble_is_secure",
        "nimble_name",
        "nimble_port",
        "nimble_retry",
        "nimble_timeout"
      ],
      "properties": {
        "license_id": {
          "type": "string"
        },
        "nimble_address": {
          "type": "string"
        },
        "nimble_is_secure": {
          "type": "boolean"
        },
        "nimble_key": {
          "type": "string"
        },
        "nimble_name": {
          "type": "string"
        },
        "nimble_port": {
          "type": "integer"
        },
        "nimble_retry": {
          "$ref": "#/definitions/sts_internal_api_nimble.nimbleRetryConfig"
        },
        "nimble_timeout": {
          "type": "string"
        },
        "site_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "sts_internal_api_nimble.nimbleLicenseUpsertReq": {
      "type": "object",
      "required": [
        "license_id"
      ],
      "properties": {
        "license_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_nimble.nimbleResp": {
      "type": "object",
      "properties": {
        "license": {
          "$ref": "#/definitions/sts_internal_api_nimble.licenseResp"
        },
        "nimble_address": {
          "type": "string"
        },
        "nimble_api_version": {
          "type": "string"
        },
        "nimble_created_at": {
          "type": "string"
        },
        "nimble_device_types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nimble_hash": {
          "type": "string"
        },
        "nimble_host_name": {
          "type": "string"
        },
        "nimble_id": {
          "type": "string"
        },
        "nimble_is_active": {
          "type": "boolean"
        },
        "nimble_is_override": {
          "type": "boolean"
        },
        "nimble_is_secure": {
          "type": "boolean"
        },
        "nimble_is_statistics": {
          "type": "boolean"
        },
        "nimble_key": {
          "type": "string"
        },
        "nimble_name": {
          "type": "string"
        },
        "nimble_port": {
          "type": "integer"
        },
        "nimble_retry": {
          "$ref": "#/definitions/sts_internal_api_nimble.nimbleRetryConfig"
        },
        "nimble_routes": {
          "type": "object",
          "additionalProperties": true
        },
        "nimble_status": {
          "type": "integer"
        },
        "nimble_timeout": {
          "type": "string"
        },
        "nimble_updated_at": {
          "type": "string"
        },
        "nimble_version": {
          "type": "string"
        },
        "site_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "transaction_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_nimble.nimbleRetryConfig": {
      "type": "object",
      "required": [
        "disable_backoff",
        "times",
        "wait_base"
      ],
      "properties": {
        "disable_backoff": {
          "type": "boolean"
        },
        "times": {
          "type": "integer"
        },
        "wait_base": {
          "type": "integer"
        }
      }
    },
    "sts_internal_api_nimble.nimbleStats": {
      "type": "object",
      "properties": {
        "cpu": {
          "type": "number"
        },
        "mem_physical": {
          "type": "integer"
        },
        "mem_virtual": {
          "type": "integer"
        },
        "time": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_nimble.nimbleStatsResp": {
      "type": "object",
      "properties": {
        "nimble_id": {
          "type": "string"
        },
        "nimble_stats": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api_nimble.nimbleStats"
          }
        },
        "nimble_uptime": {
          "type": "number"
        }
      }
    },
    "sts_internal_api_nimble.nimbleStatusReq": {
      "type": "object",
      "required": [
        "nimble_id"
      ],
      "properties": {
        "nimble_id": {
          "type": "string"
        },
        "nimble_is_override": {
          "type": "boolean"
        }
      }
    },
    "sts_internal_api_nimble.nimbleUpdateReq": {
      "type": "object",
      "required": [
        "license_id",
        "nimble_address",
        "nimble_id",
        "nimble_is_secure",
        "nimble_name",
        "nimble_port",
        "nimble_retry",
        "nimble_timeout"
      ],
      "properties": {
        "license_id": {
          "type": "string"
        },
        "nimble_address": {
          "type": "string"
        },
        "nimble_id": {
          "type": "string"
        },
        "nimble_is_secure": {
          "type": "boolean"
        },
        "nimble_key": {
          "type": "string"
        },
        "nimble_name": {
          "type": "string"
        },
        "nimble_port": {
          "type": "integer"
        },
        "nimble_retry": {
          "$ref": "#/definitions/sts_internal_api_nimble.nimbleRetryConfig"
        },
        "nimble_timeout": {
          "type": "string"
        },
        "site_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "sts_internal_api_notification.notificationRangeResp": {
      "type": "object",
      "properties": {
        "end": {
          "type": "string"
        },
        "notifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api_notification.notificationUUIDResp"
          }
        },
        "rule_uuid": {
          "description": "UseCase       string                 `json:\"usecase_key\"`\nChannelID     string                 `json:\"channel_id\"`",
          "type": "string"
        },
        "start": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_notification.notificationStatResp": {
      "type": "object",
      "properties": {
        "usecase_channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api__common.EventStatsResp"
          }
        },
        "usecase_key": {
          "type": "string"
        },
        "usecase_total_alert": {
          "type": "integer"
        },
        "usecase_total_notification": {
          "type": "integer"
        },
        "usecase_total_stats": {
          "$ref": "#/definitions/sts_internal_api__common.Stats"
        }
      }
    },
    "sts_internal_api_notification.notificationUUIDResp": {
      "type": "object",
      "properties": {
        "notification_data": {
          "$ref": "#/definitions/structs.DefaultEmail"
        },
        "notification_extra": {
          "type": "string"
        },
        "notification_time": {
          "type": "string"
        },
        "notification_uuid": {
          "type": "string"
        },
        "rule_uuid": {
          "type": "string"
        },
        "total_count": {
          "type": "integer"
        }
      }
    },
    "sts_internal_api_organization.geoLocation": {
      "type": "object",
      "required": [
        "lat",
        "long"
      ],
      "properties": {
        "lat": {
          "type": "number"
        },
        "long": {
          "type": "number"
        }
      }
    },
    "sts_internal_api_organization.organizationAddress": {
      "type": "object",
      "required": [
        "organization_area",
        "organization_city",
        "organization_country",
        "organization_geolocation",
        "organization_state",
        "organization_street",
        "organization_unit",
        "organization_zip"
      ],
      "properties": {
        "organization_area": {
          "type": "string"
        },
        "organization_city": {
          "type": "string"
        },
        "organization_country": {
          "type": "string"
        },
        "organization_geolocation": {
          "$ref": "#/definitions/sts_internal_api_organization.geoLocation"
        },
        "organization_state": {
          "type": "string"
        },
        "organization_street": {
          "type": "string"
        },
        "organization_unit": {
          "type": "string"
        },
        "organization_zip": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_organization.organizationCreateReq": {
      "type": "object",
      "required": [
        "organization_address",
        "organization_description",
        "organization_icon",
        "organization_key",
        "organization_name",
        "organization_website"
      ],
      "properties": {
        "organization_address": {
          "$ref": "#/definitions/sts_internal_api_organization.organizationAddress"
        },
        "organization_description": {
          "type": "string"
        },
        "organization_icon": {
          "type": "string"
        },
        "organization_key": {
          "type": "string"
        },
        "organization_name": {
          "type": "string"
        },
        "organization_website": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_organization.organizationIDReq": {
      "type": "object",
      "required": [
        "organization_id"
      ],
      "properties": {
        "organization_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_organization.organizationResp": {
      "type": "object",
      "required": [
        "organization_address",
        "organization_description",
        "organization_icon",
        "organization_key",
        "organization_name",
        "organization_website"
      ],
      "properties": {
        "organization_address": {
          "$ref": "#/definitions/sts_internal_api_organization.organizationAddress"
        },
        "organization_description": {
          "type": "string"
        },
        "organization_icon": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "organization_key": {
          "type": "string"
        },
        "organization_name": {
          "type": "string"
        },
        "organization_website": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_organization.organizationUpdateReq": {
      "type": "object",
      "required": [
        "organization_address",
        "organization_description",
        "organization_icon",
        "organization_id",
        "organization_key",
        "organization_name",
        "organization_website"
      ],
      "properties": {
        "organization_address": {
          "$ref": "#/definitions/sts_internal_api_organization.organizationAddress"
        },
        "organization_description": {
          "type": "string"
        },
        "organization_icon": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "organization_key": {
          "type": "string"
        },
        "organization_name": {
          "type": "string"
        },
        "organization_website": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_pipeline.pipelineCatalogInfoResp": {
      "type": "object",
      "properties": {
        "catalog_elements": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "models": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        }
      }
    },
    "sts_internal_api_pipeline.pipelineCatalogRefreshReq": {
      "type": "object",
      "properties": {
        "nimble_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_pipeline.pipelineCatalogRefreshResp": {
      "type": "object",
      "required": [
        "transaction_id"
      ],
      "properties": {
        "transaction_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_pipeline.pipelineCreateReq": {
      "type": "object",
      "required": [
        "nimble_id",
        "pipeline_elements",
        "pipeline_name",
        "pipeline_reference_key",
        "pipeline_usecase"
      ],
      "properties": {
        "nimble_id": {
          "type": "string"
        },
        "pipeline_elements": {
          "type": "object",
          "additionalProperties": true
        },
        "pipeline_name": {
          "type": "string"
        },
        "pipeline_reference_key": {
          "type": "integer"
        },
        "pipeline_source": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "pipeline_usecase": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_pipeline.pipelineDefaultsResp": {
      "type": "object",
      "required": [
        "default_data"
      ],
      "properties": {
        "default_data": {
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "sts_internal_api_pipeline.pipelineIDReq": {
      "type": "object",
      "required": [
        "pipeline_id"
      ],
      "properties": {
        "pipeline_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_pipeline.pipelineResp": {
      "type": "object",
      "required": [
        "nimble_id",
        "pipeline_elements",
        "pipeline_name",
        "pipeline_reference_key",
        "pipeline_usecase"
      ],
      "properties": {
        "nimble_id": {
          "type": "string"
        },
        "pipeline_elements": {
          "type": "object",
          "additionalProperties": true
        },
        "pipeline_id": {
          "type": "string"
        },
        "pipeline_name": {
          "type": "string"
        },
        "pipeline_reference_key": {
          "type": "integer"
        },
        "pipeline_source": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "pipeline_usecase": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_role.roleListResp": {
      "type": "object",
      "properties": {
        "role_id": {
          "type": "string"
        },
        "role_key": {
          "type": "string"
        },
        "role_name": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_rule.action": {
      "type": "object",
      "properties": {
        "action_access_id": {
          "type": "string"
        },
        "action_access_token": {
          "type": "string"
        },
        "action_auth_header": {
          "type": "string"
        },
        "action_external_link": {
          "type": "string"
        },
        "action_header": {
          "type": "string"
        },
        "action_is_auto_payload": {
          "type": "boolean"
        },
        "action_is_secure": {
          "type": "boolean"
        },
        "action_message": {
          "type": "string"
        },
        "action_method": {
          "type": "string"
        },
        "action_payload": {
          "type": "string"
        },
        "action_process_delay": {
          "type": "integer"
        },
        "action_query": {
          "type": "string"
        },
        "action_subject": {
          "type": "string"
        },
        "action_to": {
          "type": "string"
        },
        "action_type": {
          "type": "string"
        },
        "action_url": {
          "type": "string"
        },
        "service_key": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_rule.notification": {
      "type": "object",
      "required": [
        "notification_is_reminder",
        "notification_type"
      ],
      "properties": {
        "notification_frequency": {
          "type": "integer"
        },
        "notification_is_reminder": {
          "type": "boolean"
        },
        "notification_reminder": {
          "$ref": "#/definitions/sts_internal_api_rule.reminder"
        },
        "notification_type": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_rule.reminder": {
      "type": "object",
      "required": [
        "reminder_frequency",
        "reminder_is_ack",
        "reminder_priority_type",
        "reminder_type"
      ],
      "properties": {
        "reminder_count": {
          "type": "integer"
        },
        "reminder_frequency": {
          "type": "integer"
        },
        "reminder_is_ack": {
          "type": "boolean"
        },
        "reminder_priority_type": {
          "type": "string"
        },
        "reminder_type": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_rule.ruleActivateDeActivateReq": {
      "type": "object",
      "required": [
        "rule_id",
        "site_id"
      ],
      "properties": {
        "rule_id": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_rule.ruleCreateReq": {
      "type": "object",
      "required": [
        "rule_action",
        "rule_expression",
        "rule_name",
        "rule_notification",
        "rule_priority",
        "rule_tolerance",
        "site_id"
      ],
      "properties": {
        "rule_action": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "rule_expression": {
          "type": "string"
        },
        "rule_frequency": {
          "type": "integer"
        },
        "rule_name": {
          "type": "string"
        },
        "rule_notification": {
          "$ref": "#/definitions/sts_internal_api_rule.notification"
        },
        "rule_priority": {
          "type": "string"
        },
        "rule_template": {
          "type": "object",
          "additionalProperties": true
        },
        "rule_tolerance": {
          "type": "integer"
        },
        "site_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_rule.ruleIDReq": {
      "type": "object",
      "required": [
        "rule_id"
      ],
      "properties": {
        "rule_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_rule.ruleResp": {
      "type": "object",
      "properties": {
        "is_active": {
          "type": "boolean"
        },
        "rule_action": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api_rule.action"
          }
        },
        "rule_expand": {
          "type": "object",
          "additionalProperties": true
        },
        "rule_expression": {
          "type": "string"
        },
        "rule_frequency": {
          "type": "integer"
        },
        "rule_id": {
          "type": "string"
        },
        "rule_name": {
          "type": "string"
        },
        "rule_notification": {
          "$ref": "#/definitions/sts_internal_api_rule.notification"
        },
        "rule_priority": {
          "type": "string"
        },
        "rule_template": {
          "type": "object",
          "additionalProperties": true
        },
        "rule_tolerance": {
          "type": "integer"
        },
        "rule_uuid": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_rule.ruleUpdateReq": {
      "type": "object",
      "required": [
        "rule_action",
        "rule_expression",
        "rule_id",
        "rule_name",
        "rule_notification",
        "rule_priority",
        "rule_tolerance",
        "site_id"
      ],
      "properties": {
        "rule_action": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "rule_expression": {
          "type": "string"
        },
        "rule_frequency": {
          "type": "integer"
        },
        "rule_id": {
          "type": "string"
        },
        "rule_name": {
          "type": "string"
        },
        "rule_notification": {
          "$ref": "#/definitions/sts_internal_api_rule.notification"
        },
        "rule_priority": {
          "type": "string"
        },
        "rule_template": {
          "type": "object",
          "additionalProperties": true
        },
        "rule_tolerance": {
          "type": "integer"
        },
        "site_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_schedule.scheduleCreateReq": {
      "type": "object",
      "required": [
        "schedule_name",
        "schedule_occurrence",
        "schedule_timezone",
        "schedule_type"
      ],
      "properties": {
        "alert_id": {
          "type": "string"
        },
        "channel_id": {
          "type": "string"
        },
        "rule_id": {
          "type": "string"
        },
        "schedule_name": {
          "type": "string"
        },
        "schedule_occurrence": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api_schedule.scheduleOccurrence"
          }
        },
        "schedule_timezone": {
          "type": "string"
        },
        "schedule_type": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_schedule.scheduleIDReq": {
      "type": "object",
      "required": [
        "schedule_id"
      ],
      "properties": {
        "schedule_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_schedule.scheduleListReq": {
      "type": "object",
      "required": [
        "channel_id"
      ],
      "properties": {
        "channel_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_schedule.scheduleOccurrence": {
      "type": "object",
      "required": [
        "occurrence_activate_cron",
        "occurrence_constraint",
        "occurrence_deactivate_cron",
        "occurrence_end_time",
        "occurrence_is_allday",
        "occurrence_start_time"
      ],
      "properties": {
        "occurrence_activate_cron": {
          "type": "string"
        },
        "occurrence_constraint": {
          "type": "string"
        },
        "occurrence_deactivate_cron": {
          "type": "string"
        },
        "occurrence_end_time": {
          "type": "string"
        },
        "occurrence_id": {
          "type": "integer"
        },
        "occurrence_is_allday": {
          "type": "boolean"
        },
        "occurrence_start_time": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_schedule.scheduleResp": {
      "type": "object",
      "properties": {
        "alert_id": {
          "type": "string"
        },
        "channel_id": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "rule_id": {
          "type": "string"
        },
        "schedule_id": {
          "type": "string"
        },
        "schedule_name": {
          "type": "string"
        },
        "schedule_occurrence": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api_schedule.scheduleOccurrence"
          }
        },
        "schedule_type": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_schedule.scheduleRuleListReq": {
      "type": "object",
      "required": [
        "site_id"
      ],
      "properties": {
        "site_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_schedule.scheduleUpdateReq": {
      "type": "object",
      "required": [
        "schedule_id",
        "schedule_name",
        "schedule_occurrence",
        "schedule_timezone",
        "schedule_type"
      ],
      "properties": {
        "alert_id": {
          "type": "string"
        },
        "channel_id": {
          "type": "string"
        },
        "rule_id": {
          "type": "string"
        },
        "schedule_id": {
          "type": "string"
        },
        "schedule_name": {
          "type": "string"
        },
        "schedule_occurrence": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api_schedule.scheduleOccurrence"
          }
        },
        "schedule_timezone": {
          "type": "string"
        },
        "schedule_type": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_site.geoLocation": {
      "type": "object",
      "required": [
        "lat",
        "long"
      ],
      "properties": {
        "lat": {
          "type": "number"
        },
        "long": {
          "type": "number"
        }
      }
    },
    "sts_internal_api_site.siteAddress": {
      "type": "object",
      "required": [
        "site_city",
        "site_country",
        "site_geolocation",
        "site_state",
        "site_timezone",
        "site_zip"
      ],
      "properties": {
        "site_area": {
          "type": "string"
        },
        "site_city": {
          "type": "string"
        },
        "site_country": {
          "type": "string"
        },
        "site_geolocation": {
          "$ref": "#/definitions/sts_internal_api_site.geoLocation"
        },
        "site_state": {
          "type": "string"
        },
        "site_street": {
          "type": "string"
        },
        "site_timezone": {
          "type": "string"
        },
        "site_unit": {
          "type": "string"
        },
        "site_zip": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_site.siteAssignReq": {
      "type": "object",
      "required": [
        "site_id",
        "user_id"
      ],
      "properties": {
        "site_id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_site.siteCreateReq": {
      "type": "object",
      "required": [
        "customer_id",
        "organization_id",
        "site_address",
        "site_icon",
        "site_image",
        "site_key",
        "site_name",
        "site_type"
      ],
      "properties": {
        "customer_id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "site_address": {
          "$ref": "#/definitions/sts_internal_api_site.siteAddress"
        },
        "site_description": {
          "type": "string"
        },
        "site_icon": {
          "type": "string"
        },
        "site_image": {
          "type": "string"
        },
        "site_key": {
          "type": "string"
        },
        "site_name": {
          "type": "string"
        },
        "site_type": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_site.siteDeleteReq": {
      "type": "object",
      "required": [
        "site_id"
      ],
      "properties": {
        "site_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_site.siteUnAssignReq": {
      "type": "object",
      "required": [
        "customer_id",
        "site_id",
        "user_id"
      ],
      "properties": {
        "customer_id": {
          "type": "string"
        },
        "site_id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_site.siteUpdateReq": {
      "type": "object",
      "required": [
        "customer_id",
        "organization_id",
        "site_address",
        "site_icon",
        "site_id",
        "site_image",
        "site_key",
        "site_name",
        "site_type"
      ],
      "properties": {
        "customer_id": {
          "type": "string"
        },
        "organization_id": {
          "type": "string"
        },
        "site_address": {
          "$ref": "#/definitions/sts_internal_api_site.siteAddress"
        },
        "site_description": {
          "type": "string"
        },
        "site_icon": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        },
        "site_image": {
          "type": "string"
        },
        "site_key": {
          "type": "string"
        },
        "site_name": {
          "type": "string"
        },
        "site_type": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_source.channelResp": {
      "type": "object",
      "properties": {
        "channel_favorite": {
          "type": "boolean"
        },
        "channel_id": {
          "type": "string"
        },
        "channel_key": {
          "type": "string"
        },
        "channel_name": {
          "type": "string"
        },
        "channel_sid": {
          "type": "string"
        },
        "channel_threshold_duration": {
          "type": "integer"
        },
        "is_active": {
          "type": "boolean"
        },
        "is_auto_recovery": {
          "type": "boolean"
        },
        "is_storage": {
          "type": "boolean"
        },
        "is_verified": {
          "type": "boolean"
        },
        "nimble_id": {
          "type": "string"
        },
        "pipeline_id": {
          "type": "string"
        },
        "source_id": {
          "type": "string"
        },
        "usecase_icon": {
          "type": "string"
        },
        "usecase_id": {
          "type": "string"
        },
        "usecase_key": {
          "type": "string"
        },
        "usecase_meta_key": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "usecase_name": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_source.sourceCreateReq": {
      "type": "object",
      "required": [
        "device_id",
        "nimble_id",
        "source_name",
        "stream_id"
      ],
      "properties": {
        "device_id": {
          "type": "string"
        },
        "nimble_id": {
          "type": "string"
        },
        "source_address": {
          "type": "string"
        },
        "source_fps": {
          "type": "number"
        },
        "source_name": {
          "type": "string"
        },
        "source_type": {
          "type": "string"
        },
        "static_content": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "stream_id": {
          "type": "integer"
        }
      }
    },
    "sts_internal_api_source.sourceIDReq": {
      "type": "object",
      "required": [
        "source_id"
      ],
      "properties": {
        "source_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_source.sourceMappingResp": {
      "type": "object",
      "properties": {
        "is_default": {
          "type": "boolean"
        },
        "nimble_address": {
          "type": "string"
        },
        "nimble_hostname": {
          "type": "string"
        },
        "nimble_id": {
          "type": "string"
        },
        "site_id": {
          "type": "string"
        },
        "site_name": {
          "type": "string"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api_source.sourceResp"
          }
        }
      }
    },
    "sts_internal_api_source.sourceResp": {
      "type": "object",
      "required": [
        "device_id",
        "nimble_id",
        "source_name",
        "stream_id"
      ],
      "properties": {
        "device_id": {
          "type": "string"
        },
        "nimble_id": {
          "type": "string"
        },
        "source_address": {
          "type": "string"
        },
        "source_channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api_source.channelResp"
          }
        },
        "source_fps": {
          "type": "number"
        },
        "source_id": {
          "type": "string"
        },
        "source_name": {
          "type": "string"
        },
        "source_type": {
          "type": "string"
        },
        "static_content": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "stream_id": {
          "type": "integer"
        }
      }
    },
    "sts_internal_api_status.statusResp": {
      "type": "object",
      "properties": {
        "auth_providers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "brand_name": {
          "type": "string"
        },
        "desc": {
          "type": "string"
        },
        "is_onboarding": {
          "type": "boolean"
        },
        "license_count": {
          "type": "integer"
        },
        "nis_module": {
          "type": "boolean"
        },
        "sms_module": {
          "type": "boolean"
        },
        "smtp_module": {
          "type": "boolean"
        },
        "sts_service": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": true
          }
        },
        "version": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_trace.trace": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "data": {},
        "message": {
          "type": "string"
        },
        "time": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_trace.traceCodesResp": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_trace.traceRangeResp": {
      "type": "object",
      "properties": {
        "end": {
          "type": "string"
        },
        "start": {
          "type": "string"
        },
        "total_count": {
          "type": "integer"
        },
        "trace_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api_trace.trace"
          }
        }
      }
    },
    "sts_internal_api_trace.transaction": {
      "type": "object",
      "properties": {
        "data": {},
        "message": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "time": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_trace.transactionResp": {
      "type": "object",
      "properties": {
        "transaction_count": {
          "type": "integer"
        },
        "transaction_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api_trace.transaction"
          }
        }
      }
    },
    "sts_internal_api_usecase.channelStatsResp": {
      "type": "object",
      "properties": {
        "channel_alert": {
          "$ref": "#/definitions/model.AlertData"
        },
        "channel_id": {
          "type": "string"
        },
        "channel_key": {
          "type": "string"
        },
        "channel_name": {
          "type": "string"
        },
        "channel_stats": {
          "$ref": "#/definitions/model.StatsData"
        },
        "channel_total_alert": {
          "type": "integer"
        },
        "channel_total_notification": {
          "type": "integer"
        },
        "usecase_key": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_usecase.usecaseAssignReq": {
      "type": "object",
      "required": [
        "usecase_id",
        "user_id"
      ],
      "properties": {
        "usecase_id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_usecase.usecaseCreateReq": {
      "type": "object",
      "properties": {
        "usecase_background_color": {
          "type": "string"
        },
        "usecase_channel_count": {
          "type": "integer"
        },
        "usecase_component_key": {
          "type": "string"
        },
        "usecase_desc": {
          "type": "string"
        },
        "usecase_icon": {
          "type": "string"
        },
        "usecase_key": {
          "type": "string"
        },
        "usecase_meta_key": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "usecase_name": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_usecase.usecaseReportReq": {
      "type": "object",
      "required": [
        "channel_id",
        "details",
        "end_date",
        "start_date",
        "usecase_key"
      ],
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "details": {
          "type": "boolean"
        },
        "end_date": {
          "type": "string"
        },
        "start_date": {
          "type": "string"
        },
        "usecase_key": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_usecase.usecaseReq": {
      "type": "object",
      "required": [
        "usecase_id"
      ],
      "properties": {
        "usecase_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_usecase.usecaseStatReq": {
      "type": "object",
      "required": [
        "details",
        "frequency",
        "usecase_key",
        "usecase_meta_key"
      ],
      "properties": {
        "details": {
          "type": "boolean"
        },
        "frequency": {
          "type": "string"
        },
        "usecase_key": {
          "type": "string"
        },
        "usecase_meta_key": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "sts_internal_api_usecase.usecaseStatResp": {
      "type": "object",
      "properties": {
        "usecase_channel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sts_internal_api_usecase.channelStatsResp"
          }
        },
        "usecase_key": {
          "type": "string"
        },
        "usecase_total_alert": {
          "type": "integer"
        },
        "usecase_total_notification": {
          "type": "integer"
        },
        "usecase_total_stats": {
          "$ref": "#/definitions/model.StatsData"
        }
      }
    },
    "sts_internal_api_usecase.usecaseUnAssignReq": {
      "type": "object",
      "required": [
        "usecase_id",
        "user_id"
      ],
      "properties": {
        "usecase_id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_usecase.usecaseUpdateReq": {
      "type": "object",
      "required": [
        "usecase_id"
      ],
      "properties": {
        "usecase_background_color": {
          "type": "string"
        },
        "usecase_channel_count": {
          "type": "integer"
        },
        "usecase_component_key": {
          "type": "string"
        },
        "usecase_desc": {
          "type": "string"
        },
        "usecase_icon": {
          "type": "string"
        },
        "usecase_id": {
          "type": "string"
        },
        "usecase_key": {
          "type": "string"
        },
        "usecase_meta_key": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "usecase_name": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_user.userNotificationFetchReq": {
      "type": "object",
      "required": [
        "end",
        "is_deleted",
        "is_read",
        "limit",
        "offset",
        "start",
        "user_uuid"
      ],
      "properties": {
        "end": {
          "type": "string"
        },
        "is_deleted": {
          "type": "boolean"
        },
        "is_read": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "start": {
          "type": "string"
        },
        "user_uuid": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_user.userNotificationReq": {
      "type": "object",
      "required": [
        "notification_uuid",
        "user_uuid"
      ],
      "properties": {
        "notification_uuid": {
          "type": "string"
        },
        "user_uuid": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_user.userPushTokenDeleteReq": {
      "type": "object",
      "required": [
        "mobile_token"
      ],
      "properties": {
        "mobile_token": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_user.userPushTokenReq": {
      "type": "object",
      "required": [
        "mobile_token",
        "mobile_type",
        "user_uuid"
      ],
      "properties": {
        "mobile_token": {
          "type": "string"
        },
        "mobile_type": {
          "type": "string"
        },
        "user_uuid": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_user.userSessionCheckReq": {
      "type": "object",
      "required": [
        "exchange_token",
        "user_uuid"
      ],
      "properties": {
        "exchange_token": {
          "type": "string"
        },
        "user_uuid": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_user.userSessionInitReq": {
      "type": "object",
      "required": [
        "instance_id"
      ],
      "properties": {
        "instance_id": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_user.userSessionInitResp": {
      "type": "object",
      "properties": {
        "exchange_token": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_user.userSyncCreateReq": {
      "type": "object",
      "properties": {
        "attempt_count": {
          "type": "integer"
        },
        "avatar": {
          "type": "string"
        },
        "confirm_selector": {
          "type": "string"
        },
        "confirm_verifier": {
          "type": "string"
        },
        "confirmed": {
          "type": "boolean"
        },
        "created_at": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "is_verified": {
          "type": "boolean"
        },
        "last_attempt": {
          "type": "string"
        },
        "last_logged_in_at": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "locked": {
          "type": "string"
        },
        "o_auth2_accessToken": {
          "type": "string"
        },
        "o_auth2_expiry": {
          "type": "string"
        },
        "o_auth2_provider": {
          "type": "string"
        },
        "o_auth2_refreshToken": {
          "type": "string"
        },
        "o_auth2_uid": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "recover_selector": {
          "type": "string"
        },
        "recover_token_expiry": {
          "type": "string"
        },
        "recover_verifier": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "user_name": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_user.userSyncRemoveReq": {
      "type": "object",
      "required": [
        "user_uuid"
      ],
      "properties": {
        "user_uuid": {
          "type": "string"
        }
      }
    },
    "sts_internal_api_user.userUpdateConfigResp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "OAuth2Password": {
      "type": "oauth2",
      "flow": "password",
      "tokenUrl": "http://localhost:8001/oauth2/token"
    }
  }
}